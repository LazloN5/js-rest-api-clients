import * as Resources from './resources';
import request, { RequestOptions, LogLevel } from '../request';
import { subscribeToEvents, EventsSubscription } from '../subscribeToEvents';
import pollJobResult from '../pollJobResult';

export type ClientConfigOptions = {
  apiToken: string | null;
  baseUrl?: string;
  environment?: string;
  extraHeaders?: Record<string, string>;
  logLevel?: LogLevel;
  autoRetry?: boolean;
};

export class Client {
  static readonly defaultBaseUrl = '{{{baseUrl}}}';

  {{#each resources}}
    {{{namespace}}}: Resources.{{{resourceClassName}}};
  {{/each}}

  private config: ClientConfigOptions;
  private eventsSubscription?: EventsSubscription;

  constructor(config: ClientConfigOptions) {
    this.config = config;
    {{#each resources}}
      this.{{{namespace}}} = new Resources.{{{resourceClassName}}}(this);
    {{/each}}
  }

  get baseUrl() {
    return this.config.baseUrl || Client.defaultBaseUrl;
  }

  request<T>(options: RequestOptions) {
    return request<T>({
      ...this.config,
      ...options,
      baseUrl: this.baseUrl,
      preCallStack: new Error().stack,
      fetchJobResult: (jobId: string) => {
        if (this.eventsSubscription) {
          return this.eventsSubscription.waitJobResult(jobId);
        }
        return pollJobResult(() => this.jobResults.rawFind(jobId));
      },
    });
  }

  async subscribeToEvents(): Promise<void> {
    if (!this.config.apiToken) {
      throw new Error('Missing API token!');
    }

    {{#if isCma}}
      const { data: site } = await this.site.rawFind();

      this.eventsSubscription = await subscribeToEvents(
        `${this.baseUrl}/pusher/authenticate`,
        this.config.apiToken,
        this.config.environment
          ? `private-site-${site.id}-environment-${this.config.environment}`
          : `private-site-${site.id}`,
      );
    {{else}}
      const { data: account } = await this.account.rawFind();

      this.eventsSubscription = await subscribeToEvents(
        `${this.baseUrl}/pusher/authenticate`,
        this.config.apiToken,
        `private-account-${account.id}`,
      );
    {{/if}}
  }

  get eventsChannel() {
    if (!this.eventsSubscription) {
      return;
    }

    return this.eventsSubscription.channel;
  }

  unsubscribeToEvents() {
    if (!this.eventsSubscription) {
      return;
    }

    return this.eventsSubscription.unsubscribe();
  }
}