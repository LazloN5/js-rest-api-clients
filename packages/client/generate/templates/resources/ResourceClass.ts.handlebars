import BaseResource from '../BaseResource';
import serializeRequestBody from '../../serializeRequestBody';
import deserializeResponseBody from '../../deserializeResponseBody';
import toId from '../../toId';
import * as SchemaTypes from '../SchemaTypes';
import * as SimpleSchemaTypes from '../SimpleSchemaTypes';

export default class {{{resourceClassName}}} extends BaseResource {
  static readonly TYPE: '{{jsonApiType}}' = '{{jsonApiType}}';

  {{#each endpoints}}
  /**
   * {{{comment}}}
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   {{#if deprecated}}
   *
   * @deprecated {{{deprecated}}}
  {{/if}}
   */
  {{{name}}}(
    {{#if urlPlaceholder}}
      {{{urlPlaceholder}}}: string | SimpleSchemaTypes.{{{../entityRelType}}},
    {{/if}}
    {{#if queryParamsType}}
      queryParams{{#unless requestBodyType}}?{{/unless}}: SimpleSchemaTypes.{{{queryParamsType}}},
    {{/if}}
    {{#if requestBodyType}}
      body: SimpleSchemaTypes.{{{requestBodyType}}},
    {{/if}}
  ) {
    return this.{{{rawName}}}(
        {{#if urlPlaceholder}}
          toId({{{urlPlaceholder}}}),
        {{/if}}
        {{#if queryParamsType}}
          queryParams,
        {{/if}}
        {{#if requestBodyType}}
          serializeRequestBody<SchemaTypes.{{{requestBodyType}}}>({
            body,
            {{#if urlPlaceholderIsEntityId}}
              id: toId({{{urlPlaceholder}}}),
            {{/if}}
            type: {{{../resourceClassName}}}.TYPE,
          }),
        {{/if}}
      )
      {{#if responseType}}
      .then(body => deserializeResponseBody<SimpleSchemaTypes.{{{responseType}}}>(body))
      {{/if}}
    ;
  }

  /**
   * {{{comment}}}
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   {{#if deprecated}}
   *
   * @deprecated {{{deprecated}}}
  {{/if}}
   */
  {{{rawName}}}(
    {{#if urlPlaceholder}}
      {{{urlPlaceholder}}}: string,
    {{/if}}
    {{#if queryParamsType}}
      queryParams{{#unless requestBodyType}}?{{/unless}}: SchemaTypes.{{{queryParamsType}}},
    {{/if}}
    {{#if requestBodyType}}
      body: SchemaTypes.{{{requestBodyType}}},
    {{/if}}
  ): Promise<
    {{#if responseType}}
      SchemaTypes.{{{responseType}}}
    {{else}}
      void
    {{/if}}
  > {
    return this.client.request<
      {{#if responseType}}
        SchemaTypes.{{{responseType}}}
      {{else}}
        void
      {{/if}}
    >({
      method: '{{method}}',
      url: `{{urlTemplate}}`,
      {{#if requestBodyType}}
        body,
      {{/if}}
      {{#if queryParamsType}}
        queryParams,
      {{/if}}
    });
  }

  {{/each}}
}
