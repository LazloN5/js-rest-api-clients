import BaseResource from '../BaseResource';
import { serializeRequestBody } from '../../serialize';
import { deserializeResponseBody, deserializeJsonEntity } from '../../deserialize';
import toId from '../../toId';
import * as SchemaTypes from '../SchemaTypes';
import * as SimpleSchemaTypes from '../SimpleSchemaTypes';
import { IteratorOptions, rawPageIterator } from '../../rawPageIterator';

export default class {{{resourceClassName}}} extends BaseResource {
  static readonly TYPE: '{{jsonApiType}}' = '{{jsonApiType}}';

  {{#each endpoints}}
  /**
   * {{{comment}}}
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   {{#if deprecated}}
   *
   * @deprecated {{{deprecated}}}
  {{/if}}
   */
  {{{name}}}(
    {{#if urlPlaceholder}}
      {{{urlPlaceholder}}}: string | SimpleSchemaTypes.{{{../entityRelType}}},
    {{/if}}
    {{#if queryParamsType}}
      queryParams{{#unless requestBodyType}}?{{/unless}}: SimpleSchemaTypes.{{{queryParamsType}}},
    {{/if}}
    {{#if requestBodyType}}
      body: SimpleSchemaTypes.{{{requestBodyType}}},
    {{/if}}
  ) {
    return this.{{{rawName}}}(
        {{#if urlPlaceholder}}
          toId({{{urlPlaceholder}}}),
        {{/if}}
        {{#if queryParamsType}}
          queryParams,
        {{/if}}
        {{#if requestBodyType}}
          serializeRequestBody<SchemaTypes.{{{requestBodyType}}}>({
            body,
            {{#if urlPlaceholderIsEntityId}}
              id: toId({{{urlPlaceholder}}}),
            {{/if}}
            type: {{{../resourceClassName}}}.TYPE,
          }),
        {{/if}}
      )
      {{#if responseType}}
      .then(body => deserializeResponseBody<SimpleSchemaTypes.{{{responseType}}}>(body))
      {{/if}}
    ;
  }

  /**
   * {{{comment}}}
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   {{#if deprecated}}
   *
   * @deprecated {{{deprecated}}}
  {{/if}}
   */
  {{{rawName}}}(
    {{#if urlPlaceholder}}
      {{{urlPlaceholder}}}: string,
    {{/if}}
    {{#if queryParamsType}}
      queryParams{{#unless requestBodyType}}?{{/unless}}: SchemaTypes.{{{queryParamsType}}},
    {{/if}}
    {{#if requestBodyType}}
      body: SchemaTypes.{{{requestBodyType}}},
    {{/if}}
  ): Promise<
    {{#if responseType}}
      SchemaTypes.{{{responseType}}}
    {{else}}
      void
    {{/if}}
  > {
    return this.client.request<
      {{#if responseType}}
        SchemaTypes.{{{responseType}}}
      {{else}}
        void
      {{/if}}
    >({
      method: '{{method}}',
      url: `{{urlTemplate}}`,
      {{#if requestBodyType}}
        body,
      {{/if}}
      {{#if queryParamsType}}
        queryParams,
      {{/if}}
    });
  }

  {{#if paginatedResponse}}
  /**
   * Async iterator to auto-paginate over elements returned by {{{name}}}()
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   */
    async *{{{name}}}PagedIterator(
      {{#if urlPlaceholder}}
        {{{urlPlaceholder}}}: string | SimpleSchemaTypes.{{{../entityRelType}}},
      {{/if}}
      queryParams?: SimpleSchemaTypes.{{{queryParamsType}}},
      iteratorOptions?: IteratorOptions,
    ) {
      for await (const element of this.{{{rawName}}}PagedIterator(
        {{#if urlPlaceholder}}
          toId({{{urlPlaceholder}}}),
        {{/if}}
        queryParams,
        iteratorOptions,
      )) {
        yield deserializeJsonEntity<
          SimpleSchemaTypes.{{{responseType}}}[0]
        >(element);
      }
    }

  /**
   * Async iterator to auto-paginate over elements returned by {{{rawName}}}()
   {{#if docUrl}}
   *
   * Read more: {{{docUrl}}}
   {{/if}}
   */
    {{{rawName}}}PagedIterator(
      {{#if urlPlaceholder}}
        {{{urlPlaceholder}}}: string,
      {{/if}}
      queryParams?: SchemaTypes.{{{queryParamsType}}},
      iteratorOptions?: IteratorOptions,
    ) {
      return rawPageIterator<
        SchemaTypes.{{{responseType}}}['data'][0]
      >(
        {
          defaultLimit: {{{paginatedResponse.defaultLimit}}},
          maxLimit: {{{paginatedResponse.maxLimit}}},
        },
        (page) => this.{{{rawName}}}(
          {{#if urlPlaceholder}}
            {{{urlPlaceholder}}},
          {{/if}}
          { ...queryParams, page },
        ),
        iteratorOptions,
      );
    }
  {{/if}}

  {{/each}}
}
