export default {
  baseUrl: 'https://site-api.datocms.com',
  resources: [
    {
      jsonApiType: 'role',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/role/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/roles',
          method: 'POST',
          comment: 'Create a new role',
          requestBodyType: 'RoleCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'can_edit_favicon',
              'can_edit_site',
              'can_edit_schema',
              'can_manage_menu',
              'can_edit_environment',
              'can_promote_environments',
              'environments_access',
              'can_manage_users',
              'can_manage_shared_filters',
              'can_manage_build_triggers',
              'can_manage_webhooks',
              'can_manage_environments',
              'can_manage_sso',
              'can_access_audit_log',
              'can_manage_workflows',
              'can_manage_access_tokens',
              'can_perform_site_search',
              'can_access_build_events_log',
              'positive_item_type_permissions',
              'negative_item_type_permissions',
              'positive_upload_permissions',
              'negative_upload_permissions',
              'positive_build_trigger_permissions',
              'negative_build_trigger_permissions',
            ],
            relationships: ['inherits_permissions_from'],
          },
          responseType: 'RoleCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/role/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/roles/${roleId}',
          method: 'PUT',
          comment: 'Update a role',
          urlPlaceholder: {
            variableName: 'roleId',
            isEntityId: true,
            relType: 'RoleData',
          },
          requestBodyType: 'RoleUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'can_edit_favicon',
              'can_edit_site',
              'can_edit_schema',
              'can_manage_menu',
              'can_edit_environment',
              'can_promote_environments',
              'environments_access',
              'can_manage_users',
              'can_manage_shared_filters',
              'can_manage_build_triggers',
              'can_manage_webhooks',
              'can_manage_environments',
              'can_manage_sso',
              'can_access_audit_log',
              'can_manage_workflows',
              'can_manage_access_tokens',
              'can_perform_site_search',
              'can_access_build_events_log',
              'positive_item_type_permissions',
              'negative_item_type_permissions',
              'positive_upload_permissions',
              'negative_upload_permissions',
              'positive_build_trigger_permissions',
              'negative_build_trigger_permissions',
            ],
            relationships: ['inherits_permissions_from'],
          },
          responseType: 'RoleUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/role/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/roles',
          method: 'GET',
          comment: 'List all roles',
          simpleMethodAvailable: true,
          responseType: 'RoleInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/role/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/roles/${roleId}',
          method: 'GET',
          comment: 'Retrieve a role',
          urlPlaceholder: {
            variableName: 'roleId',
            isEntityId: true,
            relType: 'RoleData',
          },
          simpleMethodAvailable: true,
          responseType: 'RoleSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/role/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/roles/${roleId}',
          method: 'DELETE',
          comment: 'Delete a role',
          urlPlaceholder: {
            variableName: 'roleId',
            isEntityId: true,
            relType: 'RoleData',
          },
          simpleMethodAvailable: true,
          responseType: 'RoleDestroyTargetSchema',
        },
      ],
      namespace: 'roles',
      resourceClassName: 'Role',
    },
    {
      jsonApiType: 'user',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/user/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/users/${userId}',
          method: 'PUT',
          comment: 'Update a collaborator',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: true,
            relType: 'UserData',
          },
          requestBodyType: 'UserUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['is_active'],
            relationships: ['role'],
          },
          responseType: 'UserUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/user/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/users',
          method: 'GET',
          comment: 'List all collaborators',
          simpleMethodAvailable: true,
          responseType: 'UserInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/user/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/users/${userId}',
          method: 'GET',
          comment: 'Retrieve a collaborator',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: true,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'UserSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/user/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/users/${userId}',
          method: 'DELETE',
          comment: 'Delete a collaborator',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: true,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'UserDestroyHrefSchema',
          responseType: 'UserDestroyTargetSchema',
        },
      ],
      namespace: 'users',
      resourceClassName: 'User',
    },
    {
      jsonApiType: 'sso_user',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-user/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/sso-users',
          method: 'GET',
          comment: 'List all users',
          simpleMethodAvailable: true,
          responseType: 'SsoUserInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-user/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/sso-users/${userId}',
          method: 'GET',
          comment: 'Returns a SSO user',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'SsoUserSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-user/copy_users',
          name: 'copyUsers',
          rawName: 'rawCopyUsers',
          urlTemplate: '/sso-users/copy-users',
          method: 'POST',
          comment: 'Copy editors as SSO users',
          simpleMethodAvailable: true,
          responseType: 'SsoUserCopyUsersTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-user/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/sso-users/${userId}',
          method: 'DELETE',
          comment: 'Delete a SSO user',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'SsoUserDestroyHrefSchema',
          responseType: 'SsoUserDestroyTargetSchema',
        },
      ],
      namespace: 'ssoUsers',
      resourceClassName: 'SsoUser',
    },
    {
      jsonApiType: 'audit_log_event',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/audit-log_event/query',
          name: 'query',
          rawName: 'rawQuery',
          urlTemplate: '/audit-log-events',
          method: 'POST',
          comment: 'List Audit Log events',
          requestBodyType: 'AuditLogEventQuerySchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['filter', 'next_token', 'detailed_log'],
            relationships: [],
          },
          responseType: 'AuditLogEventQueryTargetSchema',
        },
      ],
      namespace: 'auditLogEvents',
      resourceClassName: 'AuditLogEvent',
    },
    {
      jsonApiType: 'menu_item',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/menu-item/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/menu-items',
          method: 'POST',
          comment: 'Create a new menu item',
          requestBodyType: 'MenuItemCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'label',
              'external_url',
              'position',
              'open_in_new_tab',
            ],
            relationships: ['item_type', 'parent'],
          },
          responseType: 'MenuItemCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/menu-item/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/menu-items/${menuItemId}',
          method: 'PUT',
          comment: 'Update a menu item',
          urlPlaceholder: {
            variableName: 'menuItemId',
            isEntityId: true,
            relType: 'MenuItemData',
          },
          requestBodyType: 'MenuItemUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'label',
              'external_url',
              'position',
              'open_in_new_tab',
            ],
            relationships: ['item_type', 'parent'],
          },
          responseType: 'MenuItemUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/menu-item/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/menu-items',
          method: 'GET',
          comment: 'List all menu items',
          simpleMethodAvailable: true,
          queryParamsType: 'MenuItemInstancesHrefSchema',
          responseType: 'MenuItemInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/menu-item/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/menu-items/${menuItemId}',
          method: 'GET',
          comment: 'Retrieve a menu item',
          urlPlaceholder: {
            variableName: 'menuItemId',
            isEntityId: true,
            relType: 'MenuItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'MenuItemSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/menu-item/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/menu-items/${menuItemId}',
          method: 'DELETE',
          comment: 'Delete a menu item',
          urlPlaceholder: {
            variableName: 'menuItemId',
            isEntityId: true,
            relType: 'MenuItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'MenuItemDestroyTargetSchema',
        },
      ],
      namespace: 'menuItems',
      resourceClassName: 'MenuItem',
    },
    {
      jsonApiType: 'item_type',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/item-types',
          method: 'POST',
          comment: 'Create a new model',
          requestBodyType: 'ItemTypeCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'api_key',
              'singleton',
              'all_locales_required',
              'sortable',
              'modular_block',
              'draft_mode_active',
              'tree',
              'ordering_direction',
              'ordering_meta',
              'collection_appeareance',
              'collection_appearance',
              'hint',
            ],
            relationships: [
              'ordering_field',
              'title_field',
              'image_preview_field',
              'excerpt_field',
              'workflow',
            ],
          },
          responseType: 'ItemTypeCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/item-types/${itemTypeId}',
          method: 'PUT',
          comment: 'Update a model',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: true,
            relType: 'ItemTypeData',
          },
          requestBodyType: 'ItemTypeUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'api_key',
              'collection_appeareance',
              'collection_appearance',
              'singleton',
              'all_locales_required',
              'sortable',
              'modular_block',
              'draft_mode_active',
              'tree',
              'ordering_direction',
              'ordering_meta',
              'has_singleton_item',
              'hint',
            ],
            relationships: [
              'ordering_field',
              'title_field',
              'image_preview_field',
              'excerpt_field',
              'workflow',
            ],
          },
          responseType: 'ItemTypeUpdateJobSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/item-types',
          method: 'GET',
          comment: 'List all models',
          simpleMethodAvailable: true,
          responseType: 'ItemTypeInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/item-types/${itemTypeId}',
          method: 'GET',
          comment: 'Retrieve a model',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: true,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemTypeSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/duplicate',
          name: 'duplicate',
          rawName: 'rawDuplicate',
          urlTemplate: '/item-types/${itemTypeId}/duplicate',
          method: 'POST',
          comment: 'Duplicate model',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: true,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemTypeDuplicateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/item-types/${itemTypeId}',
          method: 'DELETE',
          comment: 'Delete a model',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: true,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemTypeDestroyJobSchema',
        },
      ],
      namespace: 'itemTypes',
      resourceClassName: 'ItemType',
    },
    {
      jsonApiType: 'field',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/item-types/${itemTypeId}/fields',
          method: 'POST',
          comment: 'Create a new field',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          requestBodyType: 'FieldCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'label',
              'field_type',
              'api_key',
              'localized',
              'validators',
              'appeareance',
              'appearance',
              'position',
              'hint',
              'default_value',
            ],
            relationships: ['fieldset'],
          },
          responseType: 'FieldCreateJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/fields/${fieldId}',
          method: 'PUT',
          comment: 'Update a field',
          urlPlaceholder: {
            variableName: 'fieldId',
            isEntityId: true,
            relType: 'FieldData',
          },
          requestBodyType: 'FieldUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'default_value',
              'label',
              'api_key',
              'localized',
              'validators',
              'appeareance',
              'appearance',
              'position',
              'field_type',
              'hint',
            ],
            relationships: ['fieldset'],
          },
          responseType: 'FieldUpdateJobSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/item-types/${itemTypeId}/fields',
          method: 'GET',
          comment: 'List all fields',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/referencing',
          name: 'referencing',
          rawName: 'rawReferencing',
          urlTemplate: '/item-types/${itemTypeId}/fields/referencing',
          method: 'GET',
          comment: 'List referenced fields',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldReferencingTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/related',
          name: 'related',
          rawName: 'rawRelated',
          urlTemplate: '/item-types/${itemTypeId}/fields/related',
          method: 'GET',
          comment: 'List related fields',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldRelatedTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/fields/${fieldId}',
          method: 'GET',
          comment: 'Retrieve a field',
          urlPlaceholder: {
            variableName: 'fieldId',
            isEntityId: true,
            relType: 'FieldData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/fields/${fieldId}',
          method: 'DELETE',
          comment: 'Delete a field',
          urlPlaceholder: {
            variableName: 'fieldId',
            isEntityId: true,
            relType: 'FieldData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldDestroyJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/field/duplicate',
          name: 'duplicate',
          rawName: 'rawDuplicate',
          urlTemplate: '/fields/${fieldId}/duplicate',
          method: 'POST',
          comment: 'Duplicate a field',
          urlPlaceholder: {
            variableName: 'fieldId',
            isEntityId: true,
            relType: 'FieldData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldDuplicateJobSchema',
        },
      ],
      namespace: 'fields',
      resourceClassName: 'Field',
    },
    {
      jsonApiType: 'fieldset',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/fieldset/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/item-types/${itemTypeId}/fieldsets',
          method: 'POST',
          comment: 'Create a new fieldset',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          requestBodyType: 'FieldsetCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'title',
              'hint',
              'position',
              'collapsible',
              'start_collapsed',
            ],
            relationships: [],
          },
          responseType: 'FieldsetCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/fieldset/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/fieldsets/${fieldsetId}',
          method: 'PUT',
          comment: 'Update a fieldset',
          urlPlaceholder: {
            variableName: 'fieldsetId',
            isEntityId: true,
            relType: 'FieldsetData',
          },
          requestBodyType: 'FieldsetUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'title',
              'hint',
              'position',
              'collapsible',
              'start_collapsed',
            ],
            relationships: [],
          },
          responseType: 'FieldsetUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/fieldset/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/item-types/${itemTypeId}/fieldsets',
          method: 'GET',
          comment: 'List all fieldsets',
          urlPlaceholder: {
            variableName: 'itemTypeId',
            isEntityId: false,
            relType: 'ItemTypeData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldsetInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/fieldset/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/fieldsets/${fieldsetId}',
          method: 'GET',
          comment: 'Retrieve a fieldset',
          urlPlaceholder: {
            variableName: 'fieldsetId',
            isEntityId: true,
            relType: 'FieldsetData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldsetSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/fieldset/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/fieldsets/${fieldsetId}',
          method: 'DELETE',
          comment: 'Delete a fieldset',
          urlPlaceholder: {
            variableName: 'fieldsetId',
            isEntityId: true,
            relType: 'FieldsetData',
          },
          simpleMethodAvailable: true,
          responseType: 'FieldsetDestroyTargetSchema',
        },
      ],
      namespace: 'fieldsets',
      resourceClassName: 'Fieldset',
    },
    {
      jsonApiType: 'session',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/session/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/sessions',
          method: 'POST',
          comment: 'Create a new session',
          requestBodyType: 'SessionCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['email', 'password', 'otp_code'],
            relationships: [],
          },
          responseType: 'SessionCreateTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
      ],
      namespace: 'session',
      resourceClassName: 'Session',
    },
    {
      jsonApiType: 'access_token',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/access_tokens',
          method: 'POST',
          comment: 'Create a new API token',
          requestBodyType: 'AccessTokenCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'can_access_cda',
              'can_access_cda_preview',
              'can_access_cma',
            ],
            relationships: ['role'],
          },
          responseType: 'AccessTokenCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/access_tokens/${userId}',
          method: 'PUT',
          comment: 'Update an API token',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          requestBodyType: 'AccessTokenUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'can_access_cda',
              'can_access_cda_preview',
              'can_access_cma',
            ],
            relationships: ['role'],
          },
          responseType: 'AccessTokenUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/access_tokens',
          method: 'GET',
          comment: 'List all API tokens',
          simpleMethodAvailable: true,
          responseType: 'AccessTokenInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/access_tokens/${userId}',
          method: 'GET',
          comment: 'Retrieve an API token',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'AccessTokenSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/regenerate_token',
          name: 'regenerateToken',
          rawName: 'rawRegenerateToken',
          urlTemplate: '/access_tokens/${userId}/regenerate_token',
          method: 'POST',
          comment: 'Rotate API token',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'AccessTokenRegenerateTokenTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/access-token/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/access_tokens/${userId}',
          method: 'DELETE',
          comment: 'Delete an API token',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'AccessTokenDestroyHrefSchema',
          responseType: 'AccessTokenDestroyTargetSchema',
        },
      ],
      namespace: 'accessTokens',
      resourceClassName: 'AccessToken',
    },
    {
      jsonApiType: 'plugin',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/plugins',
          method: 'POST',
          comment: 'Create a new plugin',
          requestBodyType: 'PluginCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'package_name',
              'name',
              'description',
              'url',
              'permissions',
              'plugin_type',
              'field_types',
              'parameter_definitions',
              'package_version',
            ],
            relationships: [],
          },
          responseType: 'PluginCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/plugins/${pluginId}',
          method: 'PUT',
          comment: 'Update a plugin',
          urlPlaceholder: {
            variableName: 'pluginId',
            isEntityId: true,
            relType: 'PluginData',
          },
          requestBodyType: 'PluginUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'description',
              'url',
              'parameters',
              'package_version',
              'permissions',
            ],
            relationships: [],
          },
          responseType: 'PluginUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/plugins',
          method: 'GET',
          comment: 'List all plugins',
          simpleMethodAvailable: true,
          responseType: 'PluginInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/plugins/${pluginId}',
          method: 'GET',
          comment: 'Retrieve a plugins',
          urlPlaceholder: {
            variableName: 'pluginId',
            isEntityId: true,
            relType: 'PluginData',
          },
          simpleMethodAvailable: true,
          responseType: 'PluginSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/plugins/${pluginId}',
          method: 'DELETE',
          comment: 'Delete a plugin',
          urlPlaceholder: {
            variableName: 'pluginId',
            isEntityId: true,
            relType: 'PluginData',
          },
          simpleMethodAvailable: true,
          responseType: 'PluginDestroyTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/plugin/fields',
          name: 'fields',
          rawName: 'rawFields',
          urlTemplate: '/plugins/${pluginId}/fields',
          method: 'GET',
          comment: 'Retrieve all fields using the plugin',
          urlPlaceholder: {
            variableName: 'pluginId',
            isEntityId: true,
            relType: 'PluginData',
          },
          simpleMethodAvailable: true,
          responseType: 'PluginFieldsTargetSchema',
        },
      ],
      namespace: 'plugins',
      resourceClassName: 'Plugin',
    },
    {
      jsonApiType: 'job_result',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/job-result/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/job-results/${jobResultId}',
          method: 'GET',
          comment: 'Retrieve a job result',
          urlPlaceholder: {
            variableName: 'jobResultId',
            isEntityId: true,
            relType: 'JobResultData',
          },
          simpleMethodAvailable: true,
          responseType: 'JobResultSelfTargetSchema',
        },
      ],
      namespace: 'jobResults',
      resourceClassName: 'JobResult',
    },
    {
      jsonApiType: 'subscription_limit',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/subscription-limit/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/subscription-limits',
          method: 'GET',
          comment: 'Get all the subscription limits',
          simpleMethodAvailable: true,
          responseType: 'SubscriptionLimitInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/subscription-limit/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/subscription-limits/${subscriptionLimitId}',
          method: 'GET',
          comment: 'Get a single subscription limit',
          urlPlaceholder: {
            variableName: 'subscriptionLimitId',
            isEntityId: true,
            relType: 'SubscriptionLimitData',
          },
          simpleMethodAvailable: true,
          responseType: 'SubscriptionLimitSelfTargetSchema',
        },
      ],
      namespace: 'subscriptionLimits',
      resourceClassName: 'SubscriptionLimit',
    },
    {
      jsonApiType: 'subscription_feature',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/subscription-feature/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/subscription-features',
          method: 'GET',
          comment: 'Get all the subscription features',
          simpleMethodAvailable: true,
          responseType: 'SubscriptionFeatureInstancesTargetSchema',
        },
      ],
      namespace: 'subscriptionFeatures',
      resourceClassName: 'SubscriptionFeature',
    },
    {
      jsonApiType: 'build_event',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-event/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/build-events',
          method: 'GET',
          comment: 'List all deploy events',
          simpleMethodAvailable: true,
          responseType: 'BuildEventInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-event/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/build-events/${buildEventId}',
          method: 'GET',
          comment: 'Retrieve a deploy event',
          urlPlaceholder: {
            variableName: 'buildEventId',
            isEntityId: true,
            relType: 'BuildEventData',
          },
          simpleMethodAvailable: true,
          responseType: 'BuildEventSelfTargetSchema',
        },
      ],
      namespace: 'buildEvents',
      resourceClassName: 'BuildEvent',
    },
    {
      jsonApiType: 'item',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/items',
          method: 'GET',
          comment: 'List all records',
          simpleMethodAvailable: true,
          queryParamsType: 'ItemInstancesHrefSchema',
          responseType: 'ItemInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 30,
            maxLimit: 500,
          },
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/validate_existing',
          name: 'validateExisting',
          rawName: 'rawValidateExisting',
          urlTemplate: '/items/${itemId}/validate',
          method: 'POST',
          comment: 'Validates an existing record field',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          requestBodyType: 'ItemValidateExistingSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: '*',
            relationships: ['item_type', 'creator'],
          },
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/validate_new',
          name: 'validateNew',
          rawName: 'rawValidateNew',
          urlTemplate: '/items/validate',
          method: 'POST',
          comment: 'Validates a record field',
          requestBodyType: 'ItemValidateNewSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: '*',
            relationships: ['item_type'],
          },
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/items',
          method: 'POST',
          comment: 'Create a new record',
          requestBodyType: 'ItemCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: '*',
            relationships: ['item_type'],
          },
          responseType: 'ItemCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/duplicate',
          name: 'duplicate',
          rawName: 'rawDuplicate',
          urlTemplate: '/items/${itemId}/duplicate',
          method: 'POST',
          comment: 'Duplicate a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemDuplicateJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/items/${itemId}',
          method: 'PUT',
          comment: 'Update a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          requestBodyType: 'ItemUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: '*',
            relationships: ['creator'],
          },
          responseType: 'ItemUpdateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/references',
          name: 'references',
          rawName: 'rawReferences',
          urlTemplate: '/items/${itemId}/references',
          method: 'GET',
          comment: 'Referenced records',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'ItemReferencesHrefSchema',
          responseType: 'ItemReferencesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/items/${itemId}',
          method: 'GET',
          comment: 'Retrieve a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'ItemSelfHrefSchema',
          responseType: 'ItemSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/items/${itemId}',
          method: 'DELETE',
          comment: 'Delete a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemDestroyJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/batch_destroy',
          name: 'batchDestroy',
          rawName: 'rawBatchDestroy',
          urlTemplate: '/items',
          method: 'DELETE',
          comment: 'Delete multiple records',
          simpleMethodAvailable: true,
          queryParamsType: 'ItemBatchDestroyHrefSchema',
          responseType: 'ItemBatchDestroyJobSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/batch_publish',
          name: 'batchPublish',
          rawName: 'rawBatchPublish',
          urlTemplate: '/items/publish',
          method: 'PUT',
          comment: 'Publish multiple records',
          simpleMethodAvailable: true,
          queryParamsType: 'ItemBatchPublishHrefSchema',
          responseType: 'ItemBatchPublishJobSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/batch_unpublish',
          name: 'batchUnpublish',
          rawName: 'rawBatchUnpublish',
          urlTemplate: '/items/unpublish',
          method: 'PUT',
          comment: 'Unpublish multiple records',
          simpleMethodAvailable: true,
          queryParamsType: 'ItemBatchUnpublishHrefSchema',
          responseType: 'ItemBatchUnpublishJobSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/publish',
          name: 'publish',
          rawName: 'rawPublish',
          urlTemplate: '/items/${itemId}/publish',
          method: 'PUT',
          comment: 'Publish a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'ItemPublishHrefSchema',
          responseType: 'ItemPublishTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/unpublish',
          name: 'unpublish',
          rawName: 'rawUnpublish',
          urlTemplate: '/items/${itemId}/unpublish',
          method: 'PUT',
          comment: 'Unpublish a record',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: true,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'ItemUnpublishHrefSchema',
          responseType: 'ItemUnpublishTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/bulk_publish',
          name: 'bulkPublish',
          rawName: 'rawBulkPublish',
          urlTemplate: '/items/bulk/publish',
          method: 'POST',
          comment: 'Publish items in bulk',
          requestBodyType: 'ItemBulkPublishSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['items'],
          },
          responseType: 'ItemBulkPublishJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/bulk_unpublish',
          name: 'bulkUnpublish',
          rawName: 'rawBulkUnpublish',
          urlTemplate: '/items/bulk/unpublish',
          method: 'POST',
          comment: 'Unpublish items in bulk',
          requestBodyType: 'ItemBulkUnpublishSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['items'],
          },
          responseType: 'ItemBulkUnpublishJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/bulk_destroy',
          name: 'bulkDestroy',
          rawName: 'rawBulkDestroy',
          urlTemplate: '/items/bulk/destroy',
          method: 'POST',
          comment: 'Destroy items in bulk',
          requestBodyType: 'ItemBulkDestroySchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['items'],
          },
          responseType: 'ItemBulkDestroyJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item/bulk_move_to_stage',
          name: 'bulkMoveToStage',
          rawName: 'rawBulkMoveToStage',
          urlTemplate: '/items/bulk/move-to-stage',
          method: 'POST',
          comment: 'Move items to stage in bulk',
          requestBodyType: 'ItemBulkMoveToStageSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['stage'],
            relationships: ['items'],
          },
          responseType: 'ItemBulkMoveToStageJobSchema',
        },
      ],
      namespace: 'items',
      resourceClassName: 'Item',
    },
    {
      jsonApiType: 'item_version',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-version/restore',
          name: 'restore',
          rawName: 'rawRestore',
          urlTemplate: '/versions/${itemVersionId}',
          method: 'POST',
          comment: 'Restore an old record version',
          urlPlaceholder: {
            variableName: 'itemVersionId',
            isEntityId: true,
            relType: 'ItemVersionData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemVersionRestoreJobSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-version/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/items/${itemId}/versions',
          method: 'GET',
          comment: 'List all record versions',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: false,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'ItemVersionInstancesHrefSchema',
          responseType: 'ItemVersionInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 15,
            maxLimit: 50,
          },
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-version/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/versions/${itemVersionId}',
          method: 'GET',
          comment: 'Retrieve a record version',
          urlPlaceholder: {
            variableName: 'itemVersionId',
            isEntityId: true,
            relType: 'ItemVersionData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemVersionSelfTargetSchema',
        },
      ],
      namespace: 'itemVersions',
      resourceClassName: 'ItemVersion',
    },
    {
      jsonApiType: 'upload',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/uploads',
          method: 'POST',
          comment: 'Create a new upload',
          requestBodyType: 'UploadCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'path',
              'copyright',
              'author',
              'notes',
              'default_field_metadata',
              'tags',
            ],
            relationships: [],
          },
          responseType: 'UploadCreateJobSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/uploads',
          method: 'GET',
          comment: 'List all uploads',
          simpleMethodAvailable: true,
          queryParamsType: 'UploadInstancesHrefSchema',
          responseType: 'UploadInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 30,
            maxLimit: 500,
          },
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/uploads/${uploadId}',
          method: 'GET',
          comment: 'Retrieve an upload',
          urlPlaceholder: {
            variableName: 'uploadId',
            isEntityId: true,
            relType: 'UploadData',
          },
          simpleMethodAvailable: true,
          responseType: 'UploadSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/uploads/${uploadId}',
          method: 'DELETE',
          comment: 'Delete an upload',
          urlPlaceholder: {
            variableName: 'uploadId',
            isEntityId: true,
            relType: 'UploadData',
          },
          simpleMethodAvailable: true,
          responseType: 'UploadDestroyTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/uploads/${uploadId}',
          method: 'PUT',
          comment: 'Update an upload',
          urlPlaceholder: {
            variableName: 'uploadId',
            isEntityId: true,
            relType: 'UploadData',
          },
          requestBodyType: 'UploadUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'path',
              'basename',
              'copyright',
              'author',
              'notes',
              'tags',
              'default_field_metadata',
            ],
            relationships: ['creator'],
          },
          responseType: 'UploadUpdateJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/batch_add_tags',
          name: 'batchAddTags',
          rawName: 'rawBatchAddTags',
          urlTemplate: '/uploads/batch-add-tags',
          method: 'PUT',
          comment: 'Batch add tags to uploads',
          requestBodyType: 'UploadBatchAddTagsSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['tags'],
            relationships: [],
          },
          queryParamsType: 'UploadBatchAddTagsHrefSchema',
          responseType: 'UploadBatchAddTagsJobSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/batch_destroy',
          name: 'batchDestroy',
          rawName: 'rawBatchDestroy',
          urlTemplate: '/uploads/batch-destroy',
          method: 'DELETE',
          comment: 'Delete multiple uploads',
          simpleMethodAvailable: true,
          queryParamsType: 'UploadBatchDestroyHrefSchema',
          responseType: 'UploadBatchDestroyJobSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/references',
          name: 'references',
          rawName: 'rawReferences',
          urlTemplate: '/uploads/${uploadId}/references',
          method: 'GET',
          comment: 'Referenced records',
          urlPlaceholder: {
            variableName: 'uploadId',
            isEntityId: true,
            relType: 'UploadData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'UploadReferencesHrefSchema',
          responseType: 'UploadReferencesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/bulk_tag',
          name: 'bulkTag',
          rawName: 'rawBulkTag',
          urlTemplate: '/uploads/bulk/tag',
          method: 'POST',
          comment: 'Add tags to assets in bulk',
          requestBodyType: 'UploadBulkTagSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['tags'],
            relationships: ['uploads'],
          },
          responseType: 'UploadBulkTagJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload/bulk_destroy',
          name: 'bulkDestroy',
          rawName: 'rawBulkDestroy',
          urlTemplate: '/uploads/bulk/destroy',
          method: 'POST',
          comment: 'Destroy uploads',
          requestBodyType: 'UploadBulkDestroySchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['uploads'],
          },
          responseType: 'UploadBulkDestroyJobSchema',
        },
      ],
      namespace: 'uploads',
      resourceClassName: 'Upload',
    },
    {
      jsonApiType: 'upload_request',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-request/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/upload-requests',
          method: 'POST',
          comment: 'Request a new upload',
          requestBodyType: 'UploadRequestCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['filename'],
            relationships: [],
          },
          responseType: 'UploadRequestCreateTargetSchema',
        },
      ],
      namespace: 'uploadRequest',
      resourceClassName: 'UploadRequest',
    },
    {
      jsonApiType: 'scheduled_publication',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/scheduled-publication/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/items/${itemId}/scheduled-publication',
          method: 'POST',
          comment: 'Create a new scheduled publication',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: false,
            relType: 'ItemData',
          },
          requestBodyType: 'ScheduledPublicationCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['publication_scheduled_at'],
            relationships: [],
          },
          responseType: 'ScheduledPublicationCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/scheduled-publication/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/items/${itemId}/scheduled-publication',
          method: 'DELETE',
          comment: 'Delete a scheduled publication',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: false,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'ScheduledPublicationDestroyTargetSchema',
        },
      ],
      namespace: 'scheduledPublication',
      resourceClassName: 'ScheduledPublication',
    },
    {
      jsonApiType: 'scheduled_unpublishing',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/scheduled-unpublishing/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/items/${itemId}/scheduled-unpublishing',
          method: 'POST',
          comment: 'Create a new scheduled unpublishing',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: false,
            relType: 'ItemData',
          },
          requestBodyType: 'ScheduledUnpublishingCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['unpublishing_scheduled_at'],
            relationships: [],
          },
          responseType: 'ScheduledUnpublishingCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/scheduled-unpublishing/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/items/${itemId}/scheduled-unpublishing',
          method: 'DELETE',
          comment: 'Delete a scheduled unpublishing',
          urlPlaceholder: {
            variableName: 'itemId',
            isEntityId: false,
            relType: 'ItemData',
          },
          simpleMethodAvailable: true,
          responseType: 'ScheduledUnpublishingDestroyTargetSchema',
        },
      ],
      namespace: 'scheduledUnpublishing',
      resourceClassName: 'ScheduledUnpublishing',
    },
    {
      jsonApiType: 'search_result',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/search-result/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/search-results',
          method: 'GET',
          comment: 'Search for results',
          simpleMethodAvailable: true,
          queryParamsType: 'SearchResultInstancesHrefSchema',
          responseType: 'SearchResultInstancesTargetSchema',
        },
      ],
      namespace: 'searchResults',
      resourceClassName: 'SearchResult',
    },
    {
      jsonApiType: 'environment',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/environment/fork',
          name: 'fork',
          rawName: 'rawFork',
          urlTemplate: '/environments/${environmentId}/fork',
          method: 'POST',
          comment: 'Fork an existing environment',
          urlPlaceholder: {
            variableName: 'environmentId',
            isEntityId: true,
            relType: 'EnvironmentData',
          },
          requestBodyType: 'EnvironmentForkSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: [],
          },
          responseType: 'EnvironmentForkJobSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/environment/promote',
          name: 'promote',
          rawName: 'rawPromote',
          urlTemplate: '/environments/${environmentId}/promote',
          method: 'PUT',
          comment: 'Promote an environment to primary',
          urlPlaceholder: {
            variableName: 'environmentId',
            isEntityId: true,
            relType: 'EnvironmentData',
          },
          simpleMethodAvailable: true,
          responseType: 'EnvironmentPromoteTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/environment/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/environments',
          method: 'GET',
          comment: 'List all environments',
          simpleMethodAvailable: true,
          responseType: 'EnvironmentInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/environment/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/environments/${environmentId}',
          method: 'GET',
          comment: 'Retrieve a environment',
          urlPlaceholder: {
            variableName: 'environmentId',
            isEntityId: true,
            relType: 'EnvironmentData',
          },
          simpleMethodAvailable: true,
          responseType: 'EnvironmentSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/environment/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/environments/${environmentId}',
          method: 'DELETE',
          comment: 'Delete a environment',
          urlPlaceholder: {
            variableName: 'environmentId',
            isEntityId: true,
            relType: 'EnvironmentData',
          },
          simpleMethodAvailable: true,
          responseType: 'EnvironmentDestroyJobSchema',
        },
      ],
      namespace: 'environments',
      resourceClassName: 'Environment',
    },
    {
      jsonApiType: 'maintenance_mode',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/maintenance-mode/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/maintenance-mode',
          method: 'GET',
          comment: 'Retrieve maintenence mode',
          simpleMethodAvailable: true,
          responseType: 'MaintenanceModeSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/maintenance-mode/activate',
          name: 'activate',
          rawName: 'rawActivate',
          urlTemplate: '/maintenance-mode/activate',
          method: 'PUT',
          comment:
            'Activate maintenance mode: this means that the primary environment will be read-only',
          simpleMethodAvailable: true,
          queryParamsType: 'MaintenanceModeActivateHrefSchema',
          responseType: 'MaintenanceModeActivateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/maintenance-mode/deactivate',
          name: 'deactivate',
          rawName: 'rawDeactivate',
          urlTemplate: '/maintenance-mode/deactivate',
          method: 'PUT',
          comment: 'De-activate maintenance mode',
          simpleMethodAvailable: true,
          responseType: 'MaintenanceModeDeactivateTargetSchema',
        },
      ],
      namespace: 'maintenanceMode',
      resourceClassName: 'MaintenanceMode',
    },
    {
      jsonApiType: 'webhook',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/webhooks',
          method: 'POST',
          comment: 'Create a new webhook',
          requestBodyType: 'WebhookCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'url',
              'custom_payload',
              'headers',
              'events',
              'http_basic_user',
              'http_basic_password',
              'enabled',
              'payload_api_version',
              'nested_items_in_payload',
            ],
            relationships: [],
          },
          responseType: 'WebhookCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/webhooks/${userId}',
          method: 'PUT',
          comment: 'Update a webhook',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          requestBodyType: 'WebhookUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'url',
              'custom_payload',
              'headers',
              'events',
              'http_basic_user',
              'http_basic_password',
              'enabled',
              'payload_api_version',
              'nested_items_in_payload',
            ],
            relationships: [],
          },
          responseType: 'WebhookUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/webhooks',
          method: 'GET',
          comment: 'List all webhooks',
          simpleMethodAvailable: true,
          responseType: 'WebhookInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/webhooks/${userId}',
          method: 'GET',
          comment: 'Retrieve a webhook',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'WebhookSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/webhooks/${userId}',
          method: 'DELETE',
          comment: 'Delete a webhook',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
          responseType: 'WebhookDestroyTargetSchema',
        },
      ],
      namespace: 'webhooks',
      resourceClassName: 'Webhook',
    },
    {
      jsonApiType: 'webhook_call',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook-call/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/webhook_calls',
          method: 'GET',
          comment: 'List all webhooks calls',
          simpleMethodAvailable: true,
          queryParamsType: 'WebhookCallInstancesHrefSchema',
          responseType: 'WebhookCallInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 30,
            maxLimit: 500,
          },
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/webhook-call/resend_webhook',
          name: 'resendWebhook',
          rawName: 'rawResendWebhook',
          urlTemplate: '/webhook_calls/${userId}/resend_webhook',
          method: 'POST',
          comment: 'Re-send the webhook call',
          urlPlaceholder: {
            variableName: 'userId',
            isEntityId: false,
            relType: 'UserData',
          },
          simpleMethodAvailable: true,
        },
      ],
      namespace: 'webhookCalls',
      resourceClassName: 'WebhookCall',
    },
    {
      jsonApiType: 'build_trigger',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/build-triggers',
          method: 'GET',
          comment: 'List all build triggers for a site',
          simpleMethodAvailable: true,
          responseType: 'BuildTriggerInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/build-triggers/${buildTriggerId}',
          method: 'GET',
          comment: 'Retrieve a build trigger',
          urlPlaceholder: {
            variableName: 'buildTriggerId',
            isEntityId: true,
            relType: 'BuildTriggerData',
          },
          simpleMethodAvailable: true,
          responseType: 'BuildTriggerSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/build-triggers',
          method: 'POST',
          comment: 'Create build trigger',
          requestBodyType: 'BuildTriggerCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'webhook_token',
              'adapter',
              'indexing_enabled',
              'frontend_url',
              'autotrigger_on_scheduled_publications',
              'adapter_settings',
            ],
            relationships: [],
          },
          responseType: 'BuildTriggerCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/build-triggers/${buildTriggerId}',
          method: 'PUT',
          comment: 'Update build trigger',
          urlPlaceholder: {
            variableName: 'buildTriggerId',
            isEntityId: true,
            relType: 'BuildTriggerData',
          },
          requestBodyType: 'BuildTriggerUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'name',
              'adapter',
              'indexing_enabled',
              'frontend_url',
              'autotrigger_on_scheduled_publications',
              'adapter_settings',
            ],
            relationships: [],
          },
          responseType: 'BuildTriggerUpdateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/trigger',
          name: 'trigger',
          rawName: 'rawTrigger',
          urlTemplate: '/build-triggers/${buildTriggerId}/trigger',
          method: 'POST',
          comment: 'Trigger a deploy',
          urlPlaceholder: {
            variableName: 'buildTriggerId',
            isEntityId: true,
            relType: 'BuildTriggerData',
          },
          simpleMethodAvailable: true,
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/reindex',
          name: 'reindex',
          rawName: 'rawReindex',
          urlTemplate: '/build-triggers/${buildTriggerId}/reindex',
          method: 'PUT',
          comment: 'Trigger a new Site Search spidering of the website',
          urlPlaceholder: {
            variableName: 'buildTriggerId',
            isEntityId: true,
            relType: 'BuildTriggerData',
          },
          simpleMethodAvailable: true,
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/build-trigger/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/build-triggers/${buildTriggerId}',
          method: 'DELETE',
          comment: 'Delete a build trigger',
          urlPlaceholder: {
            variableName: 'buildTriggerId',
            isEntityId: true,
            relType: 'BuildTriggerData',
          },
          simpleMethodAvailable: true,
          responseType: 'BuildTriggerDestroyTargetSchema',
        },
      ],
      namespace: 'buildTriggers',
      resourceClassName: 'BuildTrigger',
    },
    {
      jsonApiType: 'item_type_filter',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type_filter/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/item-type-filters',
          method: 'POST',
          comment: 'Create a new filter',
          requestBodyType: 'ItemTypeFilterCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'filter', 'shared'],
            relationships: ['item_type'],
          },
          responseType: 'ItemTypeFilterCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type_filter/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/item-type-filters/${itemTypeFilterId}',
          method: 'PUT',
          comment: 'Update a filter',
          urlPlaceholder: {
            variableName: 'itemTypeFilterId',
            isEntityId: true,
            relType: 'ItemTypeFilterData',
          },
          requestBodyType: 'ItemTypeFilterUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'shared', 'filter'],
            relationships: [],
          },
          responseType: 'ItemTypeFilterUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type_filter/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/item-type-filters',
          method: 'GET',
          comment: 'List all filters',
          simpleMethodAvailable: true,
          responseType: 'ItemTypeFilterInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type_filter/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/item-type-filters/${itemTypeFilterId}',
          method: 'GET',
          comment: 'Retrieve a filter',
          urlPlaceholder: {
            variableName: 'itemTypeFilterId',
            isEntityId: true,
            relType: 'ItemTypeFilterData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemTypeFilterSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/item-type_filter/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/item-type-filters/${itemTypeFilterId}',
          method: 'DELETE',
          comment: 'Delete a filter',
          urlPlaceholder: {
            variableName: 'itemTypeFilterId',
            isEntityId: true,
            relType: 'ItemTypeFilterData',
          },
          simpleMethodAvailable: true,
          responseType: 'ItemTypeFilterDestroyTargetSchema',
        },
      ],
      namespace: 'itemTypeFilters',
      resourceClassName: 'ItemTypeFilter',
    },
    {
      jsonApiType: 'upload_filter',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-filter/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/upload-filters',
          method: 'POST',
          comment: 'Create a new filter',
          requestBodyType: 'UploadFilterCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'filter', 'shared'],
            relationships: [],
          },
          responseType: 'UploadFilterCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-filter/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/upload-filters/${uploadFilterId}',
          method: 'PUT',
          comment: 'Update a filter',
          urlPlaceholder: {
            variableName: 'uploadFilterId',
            isEntityId: true,
            relType: 'UploadFilterData',
          },
          requestBodyType: 'UploadFilterUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'shared', 'filter'],
            relationships: [],
          },
          responseType: 'UploadFilterUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-filter/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/upload-filters',
          method: 'GET',
          comment: 'List all filters',
          simpleMethodAvailable: true,
          responseType: 'UploadFilterInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-filter/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/upload-filters/${uploadFilterId}',
          method: 'GET',
          comment: 'Retrieve a filter',
          urlPlaceholder: {
            variableName: 'uploadFilterId',
            isEntityId: true,
            relType: 'UploadFilterData',
          },
          simpleMethodAvailable: true,
          responseType: 'UploadFilterSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-filter/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/upload-filters/${uploadFilterId}',
          method: 'DELETE',
          comment: 'Delete a filter',
          urlPlaceholder: {
            variableName: 'uploadFilterId',
            isEntityId: true,
            relType: 'UploadFilterData',
          },
          simpleMethodAvailable: true,
          responseType: 'UploadFilterDestroyTargetSchema',
        },
      ],
      namespace: 'uploadFilters',
      resourceClassName: 'UploadFilter',
    },
    {
      jsonApiType: 'site_invitation',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/site-invitations',
          method: 'POST',
          comment: 'Invite a new user',
          requestBodyType: 'SiteInvitationCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['email'],
            relationships: ['role'],
          },
          responseType: 'SiteInvitationCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/site-invitations/${siteInvitationId}',
          method: 'PUT',
          comment: 'Update an invitation',
          urlPlaceholder: {
            variableName: 'siteInvitationId',
            isEntityId: true,
            relType: 'SiteInvitationData',
          },
          requestBodyType: 'SiteInvitationUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['role'],
          },
          responseType: 'SiteInvitationUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/site-invitations',
          method: 'GET',
          comment: 'List all invitations',
          simpleMethodAvailable: true,
          responseType: 'SiteInvitationInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/site-invitations/${siteInvitationId}',
          method: 'GET',
          comment: 'Retrieve an invitation',
          urlPlaceholder: {
            variableName: 'siteInvitationId',
            isEntityId: true,
            relType: 'SiteInvitationData',
          },
          simpleMethodAvailable: true,
          responseType: 'SiteInvitationSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/site-invitations/${siteInvitationId}',
          method: 'DELETE',
          comment: 'Delete an invitation',
          urlPlaceholder: {
            variableName: 'siteInvitationId',
            isEntityId: true,
            relType: 'SiteInvitationData',
          },
          simpleMethodAvailable: true,
          responseType: 'SiteInvitationDestroyTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site-invitation/resend',
          name: 'resend',
          rawName: 'rawResend',
          urlTemplate: '/site-invitations/${siteInvitationId}/resend',
          method: 'POST',
          comment: 'Resend an invitation',
          urlPlaceholder: {
            variableName: 'siteInvitationId',
            isEntityId: true,
            relType: 'SiteInvitationData',
          },
          simpleMethodAvailable: true,
        },
      ],
      namespace: 'siteInvitations',
      resourceClassName: 'SiteInvitation',
    },
    {
      jsonApiType: 'editing_session',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/editing-session/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/editing-sessions',
          method: 'GET',
          comment: 'List all editing sessions',
          simpleMethodAvailable: true,
          responseType: 'EditingSessionInstancesTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/editing-session/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/editing-sessions/${editingSessionId}',
          method: 'PUT',
          comment: 'Allows all actions on editing sessions',
          urlPlaceholder: {
            variableName: 'editingSessionId',
            isEntityId: true,
            relType: 'EditingSessionData',
          },
          requestBodyType: 'EditingSessionUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [],
            relationships: ['item', 'item', 'item'],
          },
          responseType: 'EditingSessionUpdateTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/editing-session/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/editing-sessions/${editingSessionId}',
          method: 'DELETE',
          comment: 'Delete an editing session',
          urlPlaceholder: {
            variableName: 'editingSessionId',
            isEntityId: true,
            relType: 'EditingSessionData',
          },
          simpleMethodAvailable: true,
          responseType: 'EditingSessionDestroyTargetSchema',
          deprecated:
            'This API call is to be considered private and might change without notice',
        },
      ],
      namespace: 'editingSessions',
      resourceClassName: 'EditingSession',
    },
    {
      jsonApiType: 'sso_group',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-group/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/sso-groups',
          method: 'GET',
          comment: 'List all SSO groups',
          simpleMethodAvailable: true,
          responseType: 'SsoGroupInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-group/copy_roles',
          name: 'copyRoles',
          rawName: 'rawCopyRoles',
          urlTemplate: '/sso-groups/${ssoGroupId}/copy-roles',
          method: 'POST',
          comment: 'Sync SSO provider groups to DatoCMS roles',
          urlPlaceholder: {
            variableName: 'ssoGroupId',
            isEntityId: true,
            relType: 'SsoGroupData',
          },
          simpleMethodAvailable: true,
          responseType: 'SsoGroupCopyRolesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-group/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/sso-groups/${ssoGroupId}',
          method: 'PUT',
          comment: 'Update a SSO group',
          urlPlaceholder: {
            variableName: 'ssoGroupId',
            isEntityId: true,
            relType: 'SsoGroupData',
          },
          requestBodyType: 'SsoGroupUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['priority'],
            relationships: ['role'],
          },
          responseType: 'SsoGroupUpdateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-group/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/sso-groups/${ssoGroupId}',
          method: 'DELETE',
          comment: 'Delete a group',
          urlPlaceholder: {
            variableName: 'ssoGroupId',
            isEntityId: true,
            relType: 'SsoGroupData',
          },
          simpleMethodAvailable: true,
          responseType: 'SsoGroupDestroyTargetSchema',
        },
      ],
      namespace: 'ssoGroups',
      resourceClassName: 'SsoGroup',
    },
    {
      jsonApiType: 'sso_settings',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-settings/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/sso-settings',
          method: 'GET',
          comment: 'Retrieve SSO Settings',
          simpleMethodAvailable: true,
          responseType: 'SsoSettingsSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-settings/generate_token',
          name: 'generateToken',
          rawName: 'rawGenerateToken',
          urlTemplate: '/sso-settings/generate-token',
          method: 'PUT',
          comment: 'Generate SSO token',
          simpleMethodAvailable: true,
          responseType: 'SsoSettingsGenerateTokenTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/sso-settings/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/sso-settings',
          method: 'PUT',
          comment: 'Update SSO Settings',
          requestBodyType: 'SsoSettingsUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['idp_saml_metadata_url'],
            relationships: ['default_role'],
          },
          responseType: 'SsoSettingsUpdateTargetSchema',
        },
      ],
      namespace: 'ssoSettings',
      resourceClassName: 'SsoSettings',
    },
    {
      jsonApiType: 'white_label_settings',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/white-label_settings/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/white-label-settings',
          method: 'GET',
          comment: 'Retrieve white-label settings',
          simpleMethodAvailable: true,
          responseType: 'WhiteLabelSettingsSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/white-label_settings/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/white-label-settings',
          method: 'PUT',
          comment: 'Update white-label settings',
          requestBodyType: 'WhiteLabelSettingsUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['custom_i18n_messages_template_url'],
            relationships: [],
          },
          responseType: 'WhiteLabelSettingsUpdateTargetSchema',
        },
      ],
      namespace: 'whiteLabelSettings',
      resourceClassName: 'WhiteLabelSettings',
    },
    {
      jsonApiType: 'public_info',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/public-info/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/public-info',
          method: 'GET',
          comment: 'Retrieve public site info',
          simpleMethodAvailable: true,
          responseType: 'PublicInfoSelfTargetSchema',
        },
      ],
      namespace: 'publicInfo',
      resourceClassName: 'PublicInfo',
    },
    {
      jsonApiType: 'daily_usage',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/daily-usage/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/daily-site-usages',
          method: 'GET',
          comment: "Retrieve project's daily usage info",
          simpleMethodAvailable: true,
          responseType: 'DailyUsageInstancesTargetSchema',
        },
      ],
      namespace: 'dailyUsages',
      resourceClassName: 'DailyUsage',
    },
    {
      jsonApiType: 'usage_counter',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/usage-counter/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/usage-log-counters/${usageCounterId}',
          method: 'GET',
          comment: "Retrieve a project's usage counter",
          urlPlaceholder: {
            variableName: 'usageCounterId',
            isEntityId: true,
            relType: 'UsageCounterData',
          },
          simpleMethodAvailable: true,
          queryParamsType: 'UsageCounterSelfHrefSchema',
          responseType: 'UsageCounterSelfTargetSchema',
        },
      ],
      namespace: 'usageCounters',
      resourceClassName: 'UsageCounter',
    },
    {
      jsonApiType: 'upload_tag',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-tag/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/upload-tags',
          method: 'GET',
          comment: 'List all manually created upload tags',
          simpleMethodAvailable: true,
          queryParamsType: 'UploadTagInstancesHrefSchema',
          responseType: 'UploadTagInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 50,
            maxLimit: 500,
          },
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-tag/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/upload-tags',
          method: 'POST',
          comment: 'Create a new upload tag',
          requestBodyType: 'UploadTagCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name'],
            relationships: [],
          },
          responseType: 'UploadTagCreateTargetSchema',
        },
      ],
      namespace: 'uploadTags',
      resourceClassName: 'UploadTag',
    },
    {
      jsonApiType: 'upload_smart_tag',
      endpoints: [
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/upload-smart_tag/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/upload-smart-tags',
          method: 'GET',
          comment: 'List all automatically created upload tags',
          simpleMethodAvailable: true,
          queryParamsType: 'UploadSmartTagInstancesHrefSchema',
          responseType: 'UploadSmartTagInstancesTargetSchema',
          paginatedResponse: {
            defaultLimit: 50,
            maxLimit: 500,
          },
        },
      ],
      namespace: 'uploadSmartTags',
      resourceClassName: 'UploadSmartTag',
    },
    {
      jsonApiType: 'site',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/site',
          method: 'GET',
          comment: 'Retrieve the site',
          simpleMethodAvailable: true,
          responseType: 'SiteSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/site/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/site',
          method: 'PUT',
          comment: "Update the site's settings",
          requestBodyType: 'SiteUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: [
              'no_index',
              'favicon',
              'global_seo',
              'name',
              'theme',
              'locales',
              'timezone',
              'require_2fa',
              'ip_tracking_enabled',
            ],
            relationships: ['sso_default_role'],
          },
          responseType: 'SiteUpdateJobSchema',
        },
      ],
      namespace: 'site',
      resourceClassName: 'Site',
    },
    {
      jsonApiType: 'workflow',
      endpoints: [
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/workflow/create',
          name: 'create',
          rawName: 'rawCreate',
          urlTemplate: '/workflows',
          method: 'POST',
          comment: 'Create a new workflow',
          requestBodyType: 'WorkflowCreateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'stages'],
            relationships: [],
          },
          responseType: 'WorkflowCreateTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/workflow/update',
          name: 'update',
          rawName: 'rawUpdate',
          urlTemplate: '/workflows/${workflowId}',
          method: 'PUT',
          comment: 'Update a workflow',
          urlPlaceholder: {
            variableName: 'workflowId',
            isEntityId: true,
            relType: 'WorkflowData',
          },
          requestBodyType: 'WorkflowUpdateSchema',
          simpleMethodAvailable: true,
          requestStructure: {
            attributes: ['name', 'stages'],
            relationships: [],
          },
          responseType: 'WorkflowUpdateTargetSchema',
        },
        {
          returnsCollection: true,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/workflow/instances',
          name: 'list',
          rawName: 'rawList',
          urlTemplate: '/workflows',
          method: 'GET',
          comment: 'List all workflows',
          simpleMethodAvailable: true,
          responseType: 'WorkflowInstancesTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/workflow/self',
          name: 'find',
          rawName: 'rawFind',
          urlTemplate: '/workflows/${workflowId}',
          method: 'GET',
          comment: 'Retrieve a workflow',
          urlPlaceholder: {
            variableName: 'workflowId',
            isEntityId: true,
            relType: 'WorkflowData',
          },
          simpleMethodAvailable: true,
          responseType: 'WorkflowSelfTargetSchema',
        },
        {
          returnsCollection: false,
          docUrl:
            'https://www.datocms.com/docs/content-management-api/resources/workflow/destroy',
          name: 'destroy',
          rawName: 'rawDestroy',
          urlTemplate: '/workflows/${workflowId}',
          method: 'DELETE',
          comment: 'Delete a workflow',
          urlPlaceholder: {
            variableName: 'workflowId',
            isEntityId: true,
            relType: 'WorkflowData',
          },
          simpleMethodAvailable: true,
        },
      ],
      namespace: 'workflows',
      resourceClassName: 'Workflow',
    },
  ],
  simpleTypings:
    '/* tslint:disable */\n/**\n * This file was automatically generated by hyperschema-to-ts: DO NOT MODIFY IT BY HAND.\n */\n\n/**\n * ID of role\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type RoleIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type RoleType = "role";\n/**\n * ID of item type\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemTypeIdentity = string;\n/**\n * ID of workflow\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WorkflowIdentity = string;\n/**\n * ID of environment. Can only contain lowercase letters, numbers and dashes\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type EnvironmentIdentity = string;\n/**\n * ID of build_trigger\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type BuildTriggerIdentity = string;\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type RoleInstancesTargetSchema = Role[];\n/**\n * ID of collaborator\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UserIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UserType = "user";\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type UserInstancesTargetSchema = User[];\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type UserDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted user. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted user. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * ID of user\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoUserIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoUserType = "sso_user";\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoGroupType = "sso_group";\n/**\n * ID of group\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoGroupIdentity = string;\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SsoUserInstancesTargetSchema = SsoUser[];\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `copy_users.targetSchema` link.\n */\nexport type SsoUserCopyUsersTargetSchema = SsoUser[];\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type SsoUserDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted SSO user. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted SSO user. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * ULID of event (https://github.com/ulid/spec)\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AuditLogEventIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AuditLogEventType = "audit_log_event";\n/**\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `query.targetSchema` link.\n */\nexport type AuditLogEventQueryTargetSchema = AuditLogEvent[];\n/**\n * ID of account\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AccountIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AccountType = "account";\n/**\n * ID of plan\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SitePlanIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SitePlanType = "site_plan";\n/**\n * ID of menu item\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type MenuItemIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type MenuItemType = "menu_item";\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemTypeType = "item_type";\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type MenuItemInstancesTargetSchema = MenuItem[];\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type MenuItemInstancesHrefSchema = {\n  filter?: {\n    /**\n     * IDs to fetch, comma separated\n     */\n    ids: string;\n  };\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemType1 = "item";\n/**\n * ID of record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type FieldType = "field";\n/**\n * ID of field\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type FieldIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WorkflowType = "workflow";\n/**\n * ID of job\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type JobIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type JobType = "job";\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type ItemTypeInstancesTargetSchema = ItemType[];\n/**\n * JSON API type fieldset\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type FieldsetType = "fieldset";\n/**\n * ID of fieldset\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type FieldsetIdentity = string;\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type FieldInstancesTargetSchema = Field[];\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `referencing.targetSchema` link.\n */\nexport type FieldReferencingTargetSchema = Field[];\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `related.targetSchema` link.\n */\nexport type FieldRelatedTargetSchema = Field[];\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type FieldsetInstancesTargetSchema = Fieldset[];\n/**\n * JSON web token for the session\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SessionIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SessionType = "session";\n/**\n * ID of access_token\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AccessTokenIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AccessTokenType = "access_token";\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type AccessTokenInstancesTargetSchema = AccessToken[];\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type AccessTokenDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted access token. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted access token. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * ID of plugin\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type PluginIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type PluginType = "plugin";\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type PluginInstancesTargetSchema = Plugin[];\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `fields.targetSchema` link.\n */\nexport type PluginFieldsTargetSchema = Field[];\n/**\n * ID of job result\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type JobResultIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type JobResultType = "job_result";\n/**\n * ID of limit\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SubscriptionLimitIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SubscriptionLimitType = "subscription_limit";\n/**\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SubscriptionLimitInstancesTargetSchema = SubscriptionLimit[];\n/**\n * ID of feature\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SubscriptionFeatureIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SubscriptionFeatureType = "subscription_feature";\n/**\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SubscriptionFeatureInstancesTargetSchema = SubscriptionFeature[];\n/**\n * ID of menu item\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type BuildEventIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type BuildEventType = "build_event";\n/**\n * JSON API type field\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type BuildTriggerType = "build_trigger";\n/**\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type BuildEventInstancesTargetSchema = BuildEvent[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type ItemInstancesTargetSchema = Item[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type ItemInstancesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Attributes to filter records\n   */\n  filter?: {\n    /**\n     * Record (or block record) IDs to fetch, comma separated. If you use this filter, you _must not_ use `filter[type]` or `filter[fields]`\n     */\n    ids?: string;\n    /**\n     * Model ID or `api_key` to filter. If you use this filter, you _must not_ use `filter[ids]`. Comma separated values are accepted, but you _must not_ use `filter[fields]` in this case\n     */\n    type?: string;\n    /**\n     * Textual query to match. You _must not_ use `filter[ids]`. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    query?: string;\n    /**\n     * Same as [GraphQL API records filters](/docs/content-delivery-api/filtering-records). Use snake_case for fields names. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    fields?: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * When `filter[query]` or `field[fields]` is defined, filter by this locale. Default: environment\'s main locale\n   */\n  locale?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first record to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of records to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  /**\n   * Fields used to order results. You _must_ specify also `filter[type]` with one element only to be able use this option. Format: `<field_name>_<DIRECTION(ASC|DESC)>`. You can pass multiple comma separated rules\n   */\n  order_by?: string;\n  /**\n   * Whether you want the currently published versions (`published`, default) of your records, or the latest available (`current`)\n   */\n  version?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `references.targetSchema` link.\n */\nexport type ItemReferencesTargetSchema = Item[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `references.hrefSchema` link.\n */\nexport type ItemReferencesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields, return full payload for nested blocks instead of IDs\n   */\n  nested?: "true";\n  /**\n   * Retrieve only the selected type of version that is linked to the record; current, published or both\n   */\n  version?: null | ("current" | "published" | "published-or-current");\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `self.hrefSchema` link.\n */\nexport type ItemSelfHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Whether you want the currently published versions (`published`, default) of your records, or the latest available (`current`)\n   */\n  version?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.jobSchema` link.\n */\nexport type ItemBatchDestroyJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.hrefSchema` link.\n */\nexport type ItemBatchDestroyHrefSchema = {\n  /**\n   * IDs of records to delete, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.jobSchema` link.\n */\nexport type ItemBatchPublishJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.hrefSchema` link.\n */\nexport type ItemBatchPublishHrefSchema = {\n  /**\n   * IDs of records to publish, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.jobSchema` link.\n */\nexport type ItemBatchUnpublishJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.hrefSchema` link.\n */\nexport type ItemBatchUnpublishHrefSchema = {\n  /**\n   * IDs of records to unpublish, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `publish.hrefSchema` link.\n */\nexport type ItemPublishHrefSchema = {\n  /**\n   * If the record references other draft records, force a recursive publication\n   */\n  recursive?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `unpublish.hrefSchema` link.\n */\nexport type ItemUnpublishHrefSchema = {\n  /**\n   * If the record is referenced by other published records, unpublish them recursively\n   */\n  recursive?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.jobSchema` link.\n */\nexport type ItemBulkPublishJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.jobSchema` link.\n */\nexport type ItemBulkUnpublishJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.jobSchema` link.\n */\nexport type ItemBulkDestroyJobSchema = unknown[];\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.jobSchema` link.\n */\nexport type ItemBulkMoveToStageJobSchema = unknown[];\n/**\n * ID of record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemVersionIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemVersionType = "item_version";\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `restore.jobSchema` link.\n */\nexport type ItemVersionRestoreJobSchema = [Item, ItemVersion];\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type ItemVersionInstancesTargetSchema = ItemVersion[];\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type ItemVersionInstancesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first element to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of elements to fetch  (defaults to 15, maximum is 50)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * ID of upload\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadIdentity = string;\n/**\n * JSON API type upload\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadType = "upload";\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type UploadInstancesTargetSchema = Upload[];\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadInstancesHrefSchema = {\n  /**\n   * Attributes to filter uploads\n   */\n  filter?: {\n    /**\n     * IDs to fetch, comma separated\n     */\n    ids?: string;\n    /**\n     * Textual query to match. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    query?: string;\n    /**\n     * Same as [GraphQL API uploads filters](/docs/content-delivery-api/filtering-uploads). Use snake_case for fields names. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    fields?: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * When `filter[query]` or `field[fields]` is defined, filter by this locale. Default: environment\'s main locale\n   */\n  locale?: string;\n  /**\n   * Fields used to order results. Format: `<field_name>_<DIRECTION(ASC|DESC)>`. You can pass multiple comma separated rules.\n   */\n  order_by?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first upload to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of uplads to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.jobSchema` link.\n */\nexport type UploadBatchAddTagsJobSchema = unknown[];\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.hrefSchema` link.\n */\nexport type UploadBatchAddTagsHrefSchema = {\n  /**\n   * IDs to tag, comma separated\n   */\n  "filter[ids]"?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.jobSchema` link.\n */\nexport type UploadBatchDestroyJobSchema = unknown[];\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.hrefSchema` link.\n */\nexport type UploadBatchDestroyHrefSchema = {\n  /**\n   * IDs to destroy, comma separated\n   */\n  "filter[ids]"?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `references.targetSchema` link.\n */\nexport type UploadReferencesTargetSchema = Item[];\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `references.hrefSchema` link.\n */\nexport type UploadReferencesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields, return full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Retrieve only the selected type of version that is linked to the upload; current, published or both\n   */\n  version?: null | ("current" | "published" | "published-or-current");\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.jobSchema` link.\n */\nexport type UploadBulkTagJobSchema = unknown[];\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.jobSchema` link.\n */\nexport type UploadBulkDestroyJobSchema = unknown[];\n/**\n * The S3 path where the file will be stored\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadRequestIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadRequestType = "upload_request";\n/**\n * ID of scheduled_publication\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ScheduledPublicationIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ScheduledPublicationType = "scheduled_publication";\n/**\n * ID of scheduled_unpublishing\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ScheduledUnpublishingIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ScheduledUnpublishingType = "scheduled_unpublishing";\n/**\n * ID of result\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SearchResultIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SearchResultType = "search_result";\n/**\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SearchResultInstancesTargetSchema = SearchResult[];\n/**\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type SearchResultInstancesHrefSchema = {\n  /**\n   * The query string to search\n   */\n  q: string;\n  /**\n   * The build trigger ID on which the search will be performed\n   */\n  build_trigger_id?: string;\n  /**\n   * Restrict the search on one locale\n   */\n  locale?: string;\n  /**\n   * Maximum number of results to return (defaults to 20, maximum is 100)\n   */\n  limit?: number;\n  /**\n   * Number of records to offset for the search\n   */\n  offset?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type EnvironmentType = "environment";\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `fork.targetSchema` link.\n */\nexport type EnvironmentForkTargetSchema = Job | Environment;\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type EnvironmentInstancesTargetSchema = Environment[];\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport type EnvironmentDestroyTargetSchema = Job | Environment;\n/**\n * ID of maintenance_mode\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type MaintenanceModeIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type MaintenanceModeType = "maintenance_mode";\n/**\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `activate.hrefSchema` link.\n */\nexport type MaintenanceModeActivateHrefSchema = {\n  /**\n   * Force the activation, even if there are collaborators editing some records.\n   */\n  force?: boolean;\n  [k: string]: unknown;\n};\n/**\n * ID of webhook\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WebhookIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WebhookType = "webhook";\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type WebhookInstancesTargetSchema = Webhook[];\n/**\n * ID of webhook call\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WebhookCallIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WebhookCallType = "webhook_call";\n/**\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type WebhookCallInstancesTargetSchema = WebhookCall[];\n/**\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type WebhookCallInstancesHrefSchema = {\n  /**\n   * Params to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first element to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of elements to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type BuildTriggerInstancesTargetSchema = BuildTrigger[];\n/**\n * ID of filter\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemTypeFilterIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemTypeFilterType = "item_type_filter";\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type ItemTypeFilterInstancesTargetSchema = ItemTypeFilter[];\n/**\n * ID of filter\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadFilterIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadFilterType = "upload_filter";\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type UploadFilterInstancesTargetSchema = UploadFilter[];\n/**\n * ID of invitation\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SiteInvitationIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SiteInvitationType = "site_invitation";\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SiteInvitationInstancesTargetSchema = SiteInvitation[];\n/**\n * UUID of presence\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type EditingSessionIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type EditingSessionType = "editing_session";\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type EditingSessionInstancesTargetSchema = EditingSession[];\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport type EditingSessionUpdateSchema =\n  | {\n      /**\n       * JSON API type\n       */\n      type?: "editing_session_enter_item";\n      item: ItemData;\n    }\n  | {\n      /**\n       * JSON API type\n       */\n      type?: "editing_session_take_over_item";\n      item: ItemData;\n    }\n  | {\n      /**\n       * JSON API type\n       */\n      type?: "editing_session_lock_item";\n      item: ItemData;\n    }\n  | {\n      /**\n       * JSON API type\n       */\n      type?: "editing_session_unlock_item";\n    };\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type SsoGroupInstancesTargetSchema = SsoGroup[];\n/**\n * ID\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoSettingsIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoSettingsType = "sso_settings";\n/**\n * ID\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WhiteLabelSettingsIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WhiteLabelSettingsType = "white_label_settings";\n/**\n * ID of site\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type PublicInfoIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type PublicInfoType = "public_info";\n/**\n * ID of site\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type DailyUsageIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type DailyUsageType = "daily_usage";\n/**\n * Name of the counter\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UsageCounterIdentity =\n  | "assets_path_bytes"\n  | "assets_referrer_bytes"\n  | "assets_ip_bytes"\n  | "assets_full_path_bytes"\n  | "assets_path_requests"\n  | "assets_full_path_requests"\n  | "cda_access_token_id_bytes"\n  | "cda_access_token_id_requests"\n  | "cda_referrer_bytes"\n  | "cda_referrer_requests"\n  | "cda_ip_bytes"\n  | "cda_ip_requests"\n  | "cma_endpoint_bytes"\n  | "cma_endpoint_requests"\n  | "cma_user_bytes"\n  | "cma_user_requests"\n  | "cma_ip_bytes"\n  | "cma_ip_requests"\n  | "video_path_seconds";\n/**\n * JSON API type field\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UsageCounterType = "usage_counter";\n/**\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `self.hrefSchema` link.\n */\nexport type UsageCounterSelfHrefSchema = {\n  /**\n   * The time period upon which counters will be returned\n   */\n  period?: "today" | "current_month" | "last_month";\n};\n/**\n * ID of upload tag\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadTagIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadTagType = "upload_tag";\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type UploadTagInstancesTargetSchema = UploadTag[];\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadTagInstancesHrefSchema = {\n  /**\n   * Attributes to filter tags\n   */\n  filter?: {\n    /**\n     * Textual query to match.\n     */\n    query?: string;\n    [k: string]: unknown;\n  };\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first tag to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of tags to fetch (defaults to 50, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * ID of upload tag\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadSmartTagIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadSmartTagType = "upload_smart_tag";\n/**\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type UploadSmartTagInstancesTargetSchema = UploadSmartTag[];\n/**\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadSmartTagInstancesHrefSchema = {\n  /**\n   * Attributes to filter tags\n   */\n  filter?: {\n    /**\n     * Textual query to match.\n     */\n    query?: string;\n    [k: string]: unknown;\n  };\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first tag to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of tags to fetch (defaults to 50, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * ID of site\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SiteIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SiteType = "site";\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport type WorkflowInstancesTargetSchema = Workflow[];\n\nexport interface DatoApi {\n  role?: Role;\n  user?: User;\n  sso_user?: SsoUser;\n  audit_log_event?: AuditLogEvent;\n  account?: Account;\n  site_plan?: SitePlan;\n  menu_item?: MenuItem;\n  item_type?: ItemType;\n  field?: Field;\n  fieldset?: Fieldset;\n  job?: Job;\n  session?: Session;\n  access_token?: AccessToken;\n  plugin?: Plugin;\n  job_result?: JobResult;\n  subscription_limit?: SubscriptionLimit;\n  subscription_feature?: SubscriptionFeature;\n  build_event?: BuildEvent;\n  item?: Item;\n  item_version?: ItemVersion;\n  upload?: Upload;\n  upload_request?: UploadRequest;\n  scheduled_publication?: ScheduledPublication;\n  scheduled_unpublishing?: ScheduledUnpublishing;\n  search_result?: SearchResult;\n  environment?: Environment;\n  maintenance_mode?: MaintenanceMode;\n  webhook?: Webhook;\n  webhook_call?: WebhookCall;\n  build_trigger?: BuildTrigger;\n  item_type_filter?: ItemTypeFilter;\n  upload_filter?: UploadFilter;\n  site_invitation?: SiteInvitation;\n  editing_session?: EditingSession;\n  sso_group?: SsoGroup;\n  sso_settings?: SsoSettings;\n  white_label_settings?: WhiteLabelSettings;\n  public_info?: PublicInfo;\n  daily_usage?: DailyUsage;\n  usage_counter?: UsageCounter;\n  upload_tag?: UploadTag;\n  upload_smart_tag?: UploadSmartTag;\n  site?: Site;\n  workflow?: Workflow;\n  [k: string]: unknown;\n}\n\n/**\n * A Role represents a specific set of actions an editor (or an API token) can perform on your administrative area.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "role".\n */\nexport interface Role {\n  id: RoleIdentity;\n  type: RoleType;\n  /**\n   * The name of the role\n   */\n  name: string;\n  /**\n   * Can edit favicon, global SEO settings and no-index policy\n   */\n  can_edit_favicon: boolean;\n  /**\n   * Can change project name and 2FA settings\n   */\n  can_edit_site: boolean;\n  /**\n   * Can create/edit models and plugins\n   */\n  can_edit_schema: boolean;\n  /**\n   * Can customize content navigation bar\n   */\n  can_manage_menu: boolean;\n  /**\n   * Can change locales, timezone and UI theme\n   */\n  can_edit_environment: boolean;\n  /**\n   * Can promote environments to primary and manage maintenance mode\n   */\n  can_promote_environments: boolean;\n  /**\n   * Specifies the environments the user can access\n   */\n  environments_access: "all" | "primary_only" | "sandbox_only";\n  /**\n   * Can create/edit roles and invite/remove collaborators\n   */\n  can_manage_users: boolean;\n  /**\n   * Can create/edit shared filters (both for models and the media area)\n   */\n  can_manage_shared_filters?: boolean;\n  /**\n   * Can create/edit Build triggers\n   */\n  can_manage_build_triggers: boolean;\n  /**\n   * Can create/edit webhooks\n   */\n  can_manage_webhooks: boolean;\n  /**\n   * Can create/delete sandbox environments and promote them to primary environment\n   */\n  can_manage_environments: boolean;\n  /**\n   * Can manage Single Sign-On settings\n   */\n  can_manage_sso: boolean;\n  /**\n   * Can access Audit Log\n   */\n  can_access_audit_log: boolean;\n  /**\n   * Can create/edit workflows\n   */\n  can_manage_workflows: boolean;\n  /**\n   * Can manage API tokens\n   */\n  can_manage_access_tokens: boolean;\n  /**\n   * Can perform Site Search API calls\n   */\n  can_perform_site_search: boolean;\n  /**\n   * Can access the build events log\n   */\n  can_access_build_events_log: boolean;\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed build triggers for a role\n   */\n  positive_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  /**\n   * Prohibited build triggers for a role\n   */\n  negative_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  inherits_permissions_from: RoleData[];\n  meta: RoleMeta;\n}\nexport type RoleCreateTargetSchema = Role;\nexport type RoleUpdateTargetSchema = Role;\nexport type RoleSelfTargetSchema = Role;\nexport type RoleDestroyTargetSchema = Role;\n/**\n * JSON API data\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface RoleData {\n  type: RoleType;\n  id: RoleIdentity;\n}\n\n/**\n * Meta information regarding the record\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface RoleMeta {\n  /**\n   * The final set of permissions considering also inherited roles\n   */\n  final_permissions: {\n    /**\n     * Can edit favicon, global SEO settings and no-index policy\n     */\n    can_edit_favicon: boolean;\n    /**\n     * Can change project name and 2FA settings\n     */\n    can_edit_site: boolean;\n    /**\n     * Can create/edit models and plugins\n     */\n    can_edit_schema: boolean;\n    /**\n     * Can customize content navigation bar\n     */\n    can_manage_menu: boolean;\n    /**\n     * Can change locales, timezone and UI theme\n     */\n    can_edit_environment: boolean;\n    /**\n     * Can promote environments to primary and manage maintenance mode\n     */\n    can_promote_environments: boolean;\n    /**\n     * Specifies the environments the user can access\n     */\n    environments_access: "all" | "primary_only" | "sandbox_only";\n    /**\n     * Can create/edit roles and invite/remove collaborators\n     */\n    can_manage_users: boolean;\n    /**\n     * Can create/edit shared filters (both for models and the media area)\n     */\n    can_manage_shared_filters?: boolean;\n    /**\n     * Can create/edit Build triggers\n     */\n    can_manage_build_triggers: boolean;\n    /**\n     * Can create/edit webhooks\n     */\n    can_manage_webhooks: boolean;\n    /**\n     * Can create/delete sandbox environments and promote them to primary environment\n     */\n    can_manage_environments: boolean;\n    /**\n     * Can manage Single Sign-On settings\n     */\n    can_manage_sso: boolean;\n    /**\n     * Can access Audit Log\n     */\n    can_access_audit_log: boolean;\n    /**\n     * Can create/edit workflows\n     */\n    can_manage_workflows: boolean;\n    /**\n     * Can manage API tokens\n     */\n    can_manage_access_tokens: boolean;\n    /**\n     * Can perform Site Search API calls\n     */\n    can_perform_site_search: boolean;\n    /**\n     * Can access the build events log\n     */\n    can_access_build_events_log: boolean;\n    /**\n     * Allowed actions on a model (or all) for a role\n     */\n    positive_item_type_permissions: {\n      item_type?: ItemTypeIdentity | null;\n      workflow?: WorkflowIdentity | null;\n      on_stage?: null | string;\n      to_stage?: null | string;\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action:\n        | "all"\n        | "read"\n        | "update"\n        | "create"\n        | "duplicate"\n        | "delete"\n        | "publish"\n        | "edit_creator"\n        | "take_over"\n        | "move_to_stage";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Prohibited actions on a model (or all) for a role\n     */\n    negative_item_type_permissions: {\n      item_type?: ItemTypeIdentity | null;\n      workflow?: WorkflowIdentity | null;\n      on_stage?: null | string;\n      to_stage?: null | string;\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action:\n        | "all"\n        | "read"\n        | "update"\n        | "create"\n        | "duplicate"\n        | "delete"\n        | "publish"\n        | "edit_creator"\n        | "take_over"\n        | "move_to_stage";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Allowed actions on a model (or all) for a role\n     */\n    positive_upload_permissions: {\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Prohibited actions on a model (or all) for a role\n     */\n    negative_upload_permissions: {\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Allowed build triggers for a role\n     */\n    positive_build_trigger_permissions: {\n      build_trigger?: BuildTriggerIdentity | null;\n    }[];\n    /**\n     * Prohibited build triggers for a role\n     */\n    negative_build_trigger_permissions: {\n      build_trigger?: BuildTriggerIdentity | null;\n    }[];\n  };\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface RoleAttributes {\n  /**\n   * The name of the role\n   */\n  name: string;\n  /**\n   * Can edit favicon, global SEO settings and no-index policy\n   */\n  can_edit_favicon: boolean;\n  /**\n   * Can change project name and 2FA settings\n   */\n  can_edit_site: boolean;\n  /**\n   * Can create/edit models and plugins\n   */\n  can_edit_schema: boolean;\n  /**\n   * Can customize content navigation bar\n   */\n  can_manage_menu: boolean;\n  /**\n   * Can change locales, timezone and UI theme\n   */\n  can_edit_environment: boolean;\n  /**\n   * Can promote environments to primary and manage maintenance mode\n   */\n  can_promote_environments: boolean;\n  /**\n   * Specifies the environments the user can access\n   */\n  environments_access: "all" | "primary_only" | "sandbox_only";\n  /**\n   * Can create/edit roles and invite/remove collaborators\n   */\n  can_manage_users: boolean;\n  /**\n   * Can create/edit shared filters (both for models and the media area)\n   */\n  can_manage_shared_filters?: boolean;\n  /**\n   * Can create/edit Build triggers\n   */\n  can_manage_build_triggers: boolean;\n  /**\n   * Can create/edit webhooks\n   */\n  can_manage_webhooks: boolean;\n  /**\n   * Can create/delete sandbox environments and promote them to primary environment\n   */\n  can_manage_environments: boolean;\n  /**\n   * Can manage Single Sign-On settings\n   */\n  can_manage_sso: boolean;\n  /**\n   * Can access Audit Log\n   */\n  can_access_audit_log: boolean;\n  /**\n   * Can create/edit workflows\n   */\n  can_manage_workflows: boolean;\n  /**\n   * Can manage API tokens\n   */\n  can_manage_access_tokens: boolean;\n  /**\n   * Can perform Site Search API calls\n   */\n  can_perform_site_search: boolean;\n  /**\n   * Can access the build events log\n   */\n  can_access_build_events_log: boolean;\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed build triggers for a role\n   */\n  positive_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  /**\n   * Prohibited build triggers for a role\n   */\n  negative_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface RoleRelationships {\n  inherits_permissions_from: RoleData[];\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface RoleCreateSchema {\n  type?: RoleType;\n  /**\n   * The name of the role\n   */\n  name: string;\n  /**\n   * Can edit favicon, global SEO settings and no-index policy\n   */\n  can_edit_favicon?: boolean;\n  /**\n   * Can change project name and 2FA settings\n   */\n  can_edit_site?: boolean;\n  /**\n   * Can create/edit models and plugins\n   */\n  can_edit_schema?: boolean;\n  /**\n   * Can customize content navigation bar\n   */\n  can_manage_menu?: boolean;\n  /**\n   * Can change locales, timezone and UI theme\n   */\n  can_edit_environment?: boolean;\n  /**\n   * Can promote environments to primary and manage maintenance mode\n   */\n  can_promote_environments?: boolean;\n  /**\n   * Specifies the environments the user can access\n   */\n  environments_access?: "all" | "primary_only" | "sandbox_only";\n  /**\n   * Can create/edit roles and invite/remove collaborators\n   */\n  can_manage_users?: boolean;\n  /**\n   * Can create/edit shared filters (both for models and the media area)\n   */\n  can_manage_shared_filters?: boolean;\n  /**\n   * Can create/edit Build triggers\n   */\n  can_manage_build_triggers?: boolean;\n  /**\n   * Can create/edit webhooks\n   */\n  can_manage_webhooks?: boolean;\n  /**\n   * Can create/delete sandbox environments and promote them to primary environment\n   */\n  can_manage_environments?: boolean;\n  /**\n   * Can manage Single Sign-On settings\n   */\n  can_manage_sso?: boolean;\n  /**\n   * Can access Audit Log\n   */\n  can_access_audit_log?: boolean;\n  /**\n   * Can create/edit workflows\n   */\n  can_manage_workflows?: boolean;\n  /**\n   * Can manage API tokens\n   */\n  can_manage_access_tokens?: boolean;\n  /**\n   * Can perform Site Search API calls\n   */\n  can_perform_site_search?: boolean;\n  /**\n   * Can access the build events log\n   */\n  can_access_build_events_log?: boolean;\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_item_type_permissions?: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_item_type_permissions?: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_upload_permissions?: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_upload_permissions?: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed build triggers for a role\n   */\n  positive_build_trigger_permissions?: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  /**\n   * Prohibited build triggers for a role\n   */\n  negative_build_trigger_permissions?: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  inherits_permissions_from?: RoleData[];\n  meta?: RoleMeta;\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface RoleUpdateSchema {\n  id?: RoleIdentity;\n  type?: RoleType;\n  /**\n   * The name of the role\n   */\n  name?: string;\n  /**\n   * Can edit favicon, global SEO settings and no-index policy\n   */\n  can_edit_favicon?: boolean;\n  /**\n   * Can change project name and 2FA settings\n   */\n  can_edit_site?: boolean;\n  /**\n   * Can create/edit models and plugins\n   */\n  can_edit_schema?: boolean;\n  /**\n   * Can customize content navigation bar\n   */\n  can_manage_menu?: boolean;\n  /**\n   * Can change locales, timezone and UI theme\n   */\n  can_edit_environment?: boolean;\n  /**\n   * Can promote environments to primary and manage maintenance mode\n   */\n  can_promote_environments?: boolean;\n  /**\n   * Specifies the environments the user can access\n   */\n  environments_access?: "all" | "primary_only" | "sandbox_only";\n  /**\n   * Can create/edit roles and invite/remove collaborators\n   */\n  can_manage_users?: boolean;\n  /**\n   * Can create/edit shared filters (both for models and the media area)\n   */\n  can_manage_shared_filters?: boolean;\n  /**\n   * Can create/edit Build triggers\n   */\n  can_manage_build_triggers?: boolean;\n  /**\n   * Can create/edit webhooks\n   */\n  can_manage_webhooks?: boolean;\n  /**\n   * Can create/delete sandbox environments and promote them to primary environment\n   */\n  can_manage_environments?: boolean;\n  /**\n   * Can manage Single Sign-On settings\n   */\n  can_manage_sso?: boolean;\n  /**\n   * Can access Audit Log\n   */\n  can_access_audit_log?: boolean;\n  /**\n   * Can create/edit workflows\n   */\n  can_manage_workflows?: boolean;\n  /**\n   * Can manage API tokens\n   */\n  can_manage_access_tokens?: boolean;\n  /**\n   * Can perform Site Search API calls\n   */\n  can_perform_site_search?: boolean;\n  /**\n   * Can access the build events log\n   */\n  can_access_build_events_log?: boolean;\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_item_type_permissions?: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_item_type_permissions?: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_upload_permissions?: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_upload_permissions?: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed build triggers for a role\n   */\n  positive_build_trigger_permissions?: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  /**\n   * Prohibited build triggers for a role\n   */\n  negative_build_trigger_permissions?: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  inherits_permissions_from?: RoleData[];\n  meta?: RoleMeta;\n}\n\n/**\n * A DatoCMS administrative area can be accessed by multiple people. Every collaborator is linked to a specific Role, which describes what actions it will be able to perform once logged in.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "user".\n */\nexport interface User {\n  id: UserIdentity;\n  type: UserType;\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * Whether 2-factor authentication is active for this account or not\n   */\n  is_2fa_active: boolean;\n  /**\n   * Full name\n   */\n  full_name: string;\n  /**\n   * Whether the user is active or not\n   */\n  is_active: boolean;\n  role: RoleData;\n  meta?: UserMeta;\n}\nexport type UserUpdateTargetSchema = User;\nexport type UserSelfTargetSchema = User;\nexport type UserDestroyTargetSchema = User;\n/**\n * Meta information on the user\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface UserMeta {\n  /**\n   * Date of last reading/interaction\n   */\n  last_access: string | null;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UserData {\n  type: UserType;\n  id: UserIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UserAttributes {\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * Whether 2-factor authentication is active for this account or not\n   */\n  is_2fa_active: boolean;\n  /**\n   * Full name\n   */\n  full_name: string;\n  /**\n   * Whether the user is active or not\n   */\n  is_active: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface UserRelationships {\n  role: RoleData;\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UserUpdateSchema {\n  id?: UserIdentity;\n  type?: UserType;\n  /**\n   * Whether the user is active or not\n   */\n  is_active?: boolean;\n  role?: RoleData;\n}\n\n/**\n * A Single Sign-On user exists when a DatoCMS project is connected to an external Identity Provider. An SSO user will not use the standard login procedure but has to go through SAML authentication. It can also be linked to one or more IdP groups.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_user".\n */\nexport interface SsoUser {\n  id: SsoUserIdentity;\n  type: SsoUserType;\n  /**\n   * Email\n   */\n  username: string;\n  /**\n   * Identity provider ID\n   */\n  external_id: string | null;\n  /**\n   * Whether this user is active on the identity provider. De-activated users won\'t be able to login.\n   */\n  is_active: boolean;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n  groups: SsoGroupData[];\n  role: RoleData | null;\n  meta: SsoUserMeta;\n}\nexport type SsoUserSelfTargetSchema = SsoUser;\nexport type SsoUserDestroyTargetSchema = SsoUser;\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoGroupData {\n  type: SsoGroupType;\n  id: SsoGroupIdentity;\n}\n\n/**\n * Meta information on the user\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface SsoUserMeta {\n  /**\n   * Date of last reading/interaction\n   */\n  last_access: string | null;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoUserData {\n  type: SsoUserType;\n  id: SsoUserIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoUserAttributes {\n  /**\n   * Email\n   */\n  username: string;\n  /**\n   * Identity provider ID\n   */\n  external_id: string | null;\n  /**\n   * Whether this user is active on the identity provider. De-activated users won\'t be able to login.\n   */\n  is_active: boolean;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoUserRelationships {\n  groups: SsoGroupData[];\n  role: RoleData | null;\n}\n\n/**\n * If the Audit log functionality is enabled in a project, logged events can be queried using SQL-like language and fetched in full detail so that they can be exported or analyzed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "audit_log_event".\n */\nexport interface AuditLogEvent {\n  id: AuditLogEventIdentity;\n  type: AuditLogEventType;\n  /**\n   * The actual action performed\n   */\n  action_name: string;\n  /**\n   * The actor who performed the action\n   */\n  actor: {\n    /**\n     * The type of actor (can be `account`, `user`, `sso_user` or `access_token`)\n     */\n    type: string;\n    /**\n     * The ID of the actor\n     */\n    id: string;\n    /**\n     * An human representation of the actor (name/email/username depending on the type of actor)\n     */\n    name: string;\n  };\n  /**\n   * The role of the actor at the time the action was performed\n   */\n  role: null | {\n    /**\n     * The name of the role\n     */\n    name: string;\n    /**\n     * The ID of the role\n     */\n    id: string;\n  };\n  /**\n   * The environment inside of which the action was performed\n   */\n  environment: {\n    /**\n     * The ID of the environment\n     */\n    id: string;\n    /**\n     * Whether the environment was the primary one at the time the action was performed\n     */\n    primary: boolean;\n  };\n  /**\n   * The actual request being performed\n   */\n  request: {\n    /**\n     * The full path of the request\n     */\n    path: string;\n    /**\n     * The HTTP method of the request\n     */\n    method: string;\n    /**\n     * The X-Request-ID header of the request\n     */\n    id?: string;\n    /**\n     * The full HTTP body of the request\n     */\n    payload?: null | {\n      [k: string]: unknown;\n    };\n  };\n  /**\n   * The actual response being returned by DatoCMS\n   */\n  response: null | {\n    /**\n     * The HTTP status code of the response\n     */\n    status: number;\n    /**\n     * The full HTTP body of the response\n     */\n    payload: {\n      [k: string]: unknown;\n    };\n  };\n  meta: AuditLogEventMeta;\n}\n\n/**\n * JSON API meta\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface AuditLogEventMeta {\n  /**\n   * The date of the event\n   */\n  occurred_at: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AuditLogEventData {\n  type: AuditLogEventType;\n  id: AuditLogEventIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AuditLogEventAttributes {\n  /**\n   * The actual action performed\n   */\n  action_name: string;\n  /**\n   * The actor who performed the action\n   */\n  actor: {\n    /**\n     * The type of actor (can be `account`, `user`, `sso_user` or `access_token`)\n     */\n    type: string;\n    /**\n     * The ID of the actor\n     */\n    id: string;\n    /**\n     * An human representation of the actor (name/email/username depending on the type of actor)\n     */\n    name: string;\n  };\n  /**\n   * The role of the actor at the time the action was performed\n   */\n  role: null | {\n    /**\n     * The name of the role\n     */\n    name: string;\n    /**\n     * The ID of the role\n     */\n    id: string;\n  };\n  /**\n   * The environment inside of which the action was performed\n   */\n  environment: {\n    /**\n     * The ID of the environment\n     */\n    id: string;\n    /**\n     * Whether the environment was the primary one at the time the action was performed\n     */\n    primary: boolean;\n  };\n  /**\n   * The actual request being performed\n   */\n  request: {\n    /**\n     * The full path of the request\n     */\n    path: string;\n    /**\n     * The HTTP method of the request\n     */\n    method: string;\n    /**\n     * The X-Request-ID header of the request\n     */\n    id?: string;\n    /**\n     * The full HTTP body of the request\n     */\n    payload?: null | {\n      [k: string]: unknown;\n    };\n  };\n  /**\n   * The actual response being returned by DatoCMS\n   */\n  response: null | {\n    /**\n     * The HTTP status code of the response\n     */\n    status: number;\n    /**\n     * The full HTTP body of the response\n     */\n    payload: {\n      [k: string]: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `query.schema` link.\n */\nexport interface AuditLogEventQuerySchema {\n  /**\n   * JSON API type field\n   */\n  type?: "audit_log_query";\n  /**\n   * An SQL-like expression to filter the events\n   */\n  filter?: string;\n  /**\n   * Set this value to get remaining results, if a meta.next_token was returned in the previous query response\n   */\n  next_token?: string;\n  /**\n   * Whether a detailed log complete with full request and response payload must be returned or not\n   */\n  detailed_log?: boolean;\n}\n\n/**\n * DatoCMS account\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "account".\n */\nexport interface Account {\n  id: AccountIdentity;\n  type: AccountType;\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n  /**\n   * Company name\n   */\n  company: string | null;\n  /**\n   * Password\n   */\n  password?: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AccountData {\n  type: AccountType;\n  id: AccountIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AccountAttributes {\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n  /**\n   * Company name\n   */\n  company: string | null;\n  /**\n   * Password\n   */\n  password?: string;\n}\n\n/**\n * Stores the information regarding the current plan for the project.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site_plan".\n */\nexport interface SitePlan {\n  id: SitePlanIdentity;\n  type: SitePlanType;\n  /**\n   * The name of the plan\n   */\n  name: string;\n  /**\n   * Whether this plan is active or legacy\n   */\n  active: boolean;\n  /**\n   * Whether custom domain can be enabled or not\n   */\n  custom_domain: boolean;\n  /**\n   * Number of users that can be invited\n   */\n  users: null | number;\n  /**\n   * Number of indexable pages\n   */\n  indexable_pages: null | number;\n  /**\n   * Number of build triggers\n   */\n  build_triggers: null | number;\n  /**\n   * Number of plugins\n   */\n  plugins: null | number;\n  /**\n   * Number of webhooks\n   */\n  webhooks: null | number;\n  /**\n   * Number of records allowed\n   */\n  items: null | number;\n  /**\n   * Monthly price\n   */\n  monthly_price: number;\n  /**\n   * Yearly price\n   */\n  yearly_price: number;\n  /**\n   * Uploadable bytes\n   */\n  uploadable_bytes: null | number;\n  /**\n   * Amount of asset data transferred between our Asset CDN and GraphQL Content Delivery API and content consumers\n   */\n  traffic_bytes: null | number;\n  /**\n   * The number of requests made to both our Content Management and Content Delivery APIs\n   */\n  api_calls: null | number;\n  /**\n   * The number of streaming seconds delivered by Mux.com\n   */\n  mux_streaming_seconds: null | number;\n  /**\n   * The number of available encoding seconds to Mux.com\n   */\n  mux_encoding_seconds: null | number;\n  /**\n   * The number of different API tokens you can generate, each which different permissions\n   */\n  access_tokens: null | number;\n  /**\n   * Number of roles allowed\n   */\n  roles: null | number;\n  /**\n   * Number of locales allowed\n   */\n  locales: null | number;\n  /**\n   * Number of sandbox environments allowed\n   */\n  sandbox_environments: null | number;\n  /**\n   * Number of models allowed\n   */\n  item_types: null | number;\n  /**\n   * Whether collaboration features are enabled or not\n   */\n  item_locking: boolean;\n  /**\n   * Whether project is in white-label mode or not\n   */\n  white_label: boolean;\n  /**\n   * Whether Single Sign-On feature is enabled or not\n   */\n  sso: boolean;\n  /**\n   * Whether built-in image editor and smart-tagging is enabled or not\n   */\n  advanced_media_area: boolean;\n  /**\n   * Maximum number of blocks a record can contain\n   */\n  blocks_per_item: number;\n  /**\n   * Maximum level of block nesting for a record\n   */\n  blocks_depth: number;\n  /**\n   * Whether video streaming with Mux.com is enabled or not\n   */\n  video: boolean;\n  /**\n   * Days of version history retention\n   */\n  history_retention_days: number | null;\n  /**\n   * Maximum number of clients connected at the same time to the Realtime Updates API. The limit is per-project\n   */\n  concurrent_realtime_connections: number;\n  /**\n   * Period (in minutes) in which bursts of changes made to the same record by the same user (or API token) will be grouped into a single one\n   */\n  history_resolution_minutes: number;\n  /**\n   * Whether two-factor authentication can be enabled or not\n   */\n  otp: boolean;\n  /**\n   * Whether workflows are enabled or not\n   */\n  workflows: boolean;\n  /**\n   * Number of workflows allowed\n   */\n  workflows_count: number;\n  /**\n   * Whether audit logs are enabled or not\n   */\n  audit_log: boolean;\n  /**\n   * Whether translator roles are enabled or not\n   */\n  translator_roles: boolean;\n  /**\n   * Available extra packets\n   */\n  extra_packets: {\n    users?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    locales?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    item_types?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    roles?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    build_triggers?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    access_tokens?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_encoding_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    sandbox_environments?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n  /**\n   * Automatic packets\n   */\n  auto_packets: {\n    traffic_bytes?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    api_calls?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_streaming_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SitePlanData {\n  type: SitePlanType;\n  id: SitePlanIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SitePlanAttributes {\n  /**\n   * The name of the plan\n   */\n  name: string;\n  /**\n   * Whether this plan is active or legacy\n   */\n  active: boolean;\n  /**\n   * Whether custom domain can be enabled or not\n   */\n  custom_domain: boolean;\n  /**\n   * Number of users that can be invited\n   */\n  users: null | number;\n  /**\n   * Number of indexable pages\n   */\n  indexable_pages: null | number;\n  /**\n   * Number of build triggers\n   */\n  build_triggers: null | number;\n  /**\n   * Number of plugins\n   */\n  plugins: null | number;\n  /**\n   * Number of webhooks\n   */\n  webhooks: null | number;\n  /**\n   * Number of records allowed\n   */\n  items: null | number;\n  /**\n   * Monthly price\n   */\n  monthly_price: number;\n  /**\n   * Yearly price\n   */\n  yearly_price: number;\n  /**\n   * Uploadable bytes\n   */\n  uploadable_bytes: null | number;\n  /**\n   * Amount of asset data transferred between our Asset CDN and GraphQL Content Delivery API and content consumers\n   */\n  traffic_bytes: null | number;\n  /**\n   * The number of requests made to both our Content Management and Content Delivery APIs\n   */\n  api_calls: null | number;\n  /**\n   * The number of streaming seconds delivered by Mux.com\n   */\n  mux_streaming_seconds: null | number;\n  /**\n   * The number of available encoding seconds to Mux.com\n   */\n  mux_encoding_seconds: null | number;\n  /**\n   * The number of different API tokens you can generate, each which different permissions\n   */\n  access_tokens: null | number;\n  /**\n   * Number of roles allowed\n   */\n  roles: null | number;\n  /**\n   * Number of locales allowed\n   */\n  locales: null | number;\n  /**\n   * Number of sandbox environments allowed\n   */\n  sandbox_environments: null | number;\n  /**\n   * Number of models allowed\n   */\n  item_types: null | number;\n  /**\n   * Whether collaboration features are enabled or not\n   */\n  item_locking: boolean;\n  /**\n   * Whether project is in white-label mode or not\n   */\n  white_label: boolean;\n  /**\n   * Whether Single Sign-On feature is enabled or not\n   */\n  sso: boolean;\n  /**\n   * Whether built-in image editor and smart-tagging is enabled or not\n   */\n  advanced_media_area: boolean;\n  /**\n   * Maximum number of blocks a record can contain\n   */\n  blocks_per_item: number;\n  /**\n   * Maximum level of block nesting for a record\n   */\n  blocks_depth: number;\n  /**\n   * Whether video streaming with Mux.com is enabled or not\n   */\n  video: boolean;\n  /**\n   * Days of version history retention\n   */\n  history_retention_days: number | null;\n  /**\n   * Maximum number of clients connected at the same time to the Realtime Updates API. The limit is per-project\n   */\n  concurrent_realtime_connections: number;\n  /**\n   * Period (in minutes) in which bursts of changes made to the same record by the same user (or API token) will be grouped into a single one\n   */\n  history_resolution_minutes: number;\n  /**\n   * Whether two-factor authentication can be enabled or not\n   */\n  otp: boolean;\n  /**\n   * Whether workflows are enabled or not\n   */\n  workflows: boolean;\n  /**\n   * Number of workflows allowed\n   */\n  workflows_count: number;\n  /**\n   * Whether audit logs are enabled or not\n   */\n  audit_log: boolean;\n  /**\n   * Whether translator roles are enabled or not\n   */\n  translator_roles: boolean;\n  /**\n   * Available extra packets\n   */\n  extra_packets: {\n    users?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    locales?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    item_types?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    roles?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    build_triggers?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    access_tokens?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_encoding_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    sandbox_environments?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n  /**\n   * Automatic packets\n   */\n  auto_packets: {\n    traffic_bytes?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    api_calls?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_streaming_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n}\n\n/**\n * In DatoCMS you can organize the different Models present in your administrative area reordering and grouping them, so that their purpose will be more clear to the final editor.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "menu_item".\n */\nexport interface MenuItem {\n  id: MenuItemIdentity;\n  type: MenuItemType;\n  /**\n   * The label of the menu item\n   */\n  label: string;\n  /**\n   * The URL to which the menu item points to\n   */\n  external_url: null | string;\n  /**\n   * Ordering index\n   */\n  position: number;\n  /**\n   * Opens link in new tab (used together with `external_url`)\n   */\n  open_in_new_tab: boolean;\n  item_type: ItemTypeData | null;\n  parent: null | MenuItemData;\n  children: MenuItemData[];\n}\nexport type MenuItemCreateTargetSchema = MenuItem;\nexport type MenuItemUpdateTargetSchema = MenuItem;\nexport type MenuItemSelfTargetSchema = MenuItem;\nexport type MenuItemDestroyTargetSchema = MenuItem;\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemTypeData {\n  type: ItemTypeType;\n  id: ItemTypeIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface MenuItemData {\n  type: MenuItemType;\n  id: MenuItemIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface MenuItemAttributes {\n  /**\n   * The label of the menu item\n   */\n  label: string;\n  /**\n   * The URL to which the menu item points to\n   */\n  external_url: null | string;\n  /**\n   * Ordering index\n   */\n  position: number;\n  /**\n   * Opens link in new tab (used together with `external_url`)\n   */\n  open_in_new_tab: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface MenuItemRelationships {\n  item_type: ItemTypeData | null;\n  parent: null | MenuItemData;\n  children: MenuItemData[];\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface MenuItemCreateSchema {\n  type?: MenuItemType;\n  /**\n   * The label of the menu item\n   */\n  label: string;\n  /**\n   * The URL to which the menu item points to\n   */\n  external_url?: null | string;\n  /**\n   * Ordering index\n   */\n  position: number;\n  /**\n   * Opens link in new tab (used together with `external_url`)\n   */\n  open_in_new_tab?: boolean;\n  item_type?: ItemTypeData | null;\n  parent?: null | MenuItemData;\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface MenuItemUpdateSchema {\n  id?: MenuItemIdentity;\n  type?: MenuItemType;\n  /**\n   * The label of the menu item\n   */\n  label?: string;\n  /**\n   * The URL to which the menu item points to\n   */\n  external_url?: null | string;\n  /**\n   * Ordering index\n   */\n  position?: number;\n  /**\n   * Opens link in new tab (used together with `external_url`)\n   */\n  open_in_new_tab?: boolean;\n  item_type?: ItemTypeData | null;\n  parent?: null | MenuItemData;\n}\n\n/**\n * The way you define the kind of content you can edit inside your administrative area passes through the concept of Models, which are much like database tables. For backward-compatibility reasons, the API refers to models as "item types".\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_type".\n */\nexport interface ItemType {\n  id: ItemTypeIdentity;\n  type: ItemTypeType;\n  /**\n   * Name of the model\n   */\n  name: string;\n  /**\n   * API key of the model\n   */\n  api_key: string;\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appeareance: "compact" | "table";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appearance: "compact" | "table";\n  /**\n   * Whether the model is single-instance or not\n   */\n  singleton: boolean;\n  /**\n   * Whether we require all the project locales to be present for each localized field or not\n   */\n  all_locales_required: boolean;\n  /**\n   * Whether editors can sort records via drag & drop or not\n   */\n  sortable: boolean;\n  /**\n   * Whether this model is a modular content block or not\n   */\n  modular_block: boolean;\n  /**\n   * Whether draft/published mode is active or not\n   */\n  draft_mode_active: boolean;\n  /**\n   * Whether editors can organize records in a tree or not\n   */\n  tree: boolean;\n  /**\n   * If an ordering field is set, this fields specify the sorting direction\n   */\n  ordering_direction: null | "asc" | "desc";\n  /**\n   * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n   */\n  ordering_meta: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n  /**\n   * If this model is single-instance, this tells the single-instance record has already been created or not\n   */\n  has_singleton_item: boolean;\n  /**\n   * A hint shown to editors to help them understand the purpose of this model/block\n   */\n  hint: string | null;\n  singleton_item: ItemData | null;\n  fields: FieldData[];\n  title_field: FieldData | null;\n  image_preview_field: FieldData | null;\n  excerpt_field: FieldData | null;\n  ordering_field: FieldData | null;\n  workflow: WorkflowData | null;\n}\nexport type ItemTypeCreateTargetSchema = ItemType;\nexport type ItemTypeUpdateJobSchema = ItemType;\nexport type ItemTypeSelfTargetSchema = ItemType;\nexport type ItemTypeDuplicateTargetSchema = ItemType;\nexport type ItemTypeDestroyJobSchema = ItemType;\n/**\n * JSON API data\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemData {\n  type: ItemType1;\n  id: ItemIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface FieldData {\n  type: FieldType;\n  id: FieldIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WorkflowData {\n  type: WorkflowType;\n  id: WorkflowIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemTypeAttributes {\n  /**\n   * Name of the model\n   */\n  name: string;\n  /**\n   * API key of the model\n   */\n  api_key: string;\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appeareance: "compact" | "table";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appearance: "compact" | "table";\n  /**\n   * Whether the model is single-instance or not\n   */\n  singleton: boolean;\n  /**\n   * Whether we require all the project locales to be present for each localized field or not\n   */\n  all_locales_required: boolean;\n  /**\n   * Whether editors can sort records via drag & drop or not\n   */\n  sortable: boolean;\n  /**\n   * Whether this model is a modular content block or not\n   */\n  modular_block: boolean;\n  /**\n   * Whether draft/published mode is active or not\n   */\n  draft_mode_active: boolean;\n  /**\n   * Whether editors can organize records in a tree or not\n   */\n  tree: boolean;\n  /**\n   * If an ordering field is set, this fields specify the sorting direction\n   */\n  ordering_direction: null | "asc" | "desc";\n  /**\n   * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n   */\n  ordering_meta: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n  /**\n   * If this model is single-instance, this tells the single-instance record has already been created or not\n   */\n  has_singleton_item: boolean;\n  /**\n   * A hint shown to editors to help them understand the purpose of this model/block\n   */\n  hint: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemTypeRelationships {\n  singleton_item: ItemData | null;\n  fields: FieldData[];\n  title_field: FieldData | null;\n  image_preview_field: FieldData | null;\n  excerpt_field: FieldData | null;\n  ordering_field: FieldData | null;\n  workflow: WorkflowData | null;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemTypeCreateSchema {\n  type?: ItemTypeType;\n  /**\n   * Name of the model\n   */\n  name: string;\n  /**\n   * API key of the model\n   */\n  api_key: string;\n  /**\n   * Whether the model is single-instance or not\n   */\n  singleton?: boolean;\n  /**\n   * Whether we require all the project locales to be present for each localized field or not\n   */\n  all_locales_required?: boolean;\n  /**\n   * Whether editors can sort records via drag & drop or not\n   */\n  sortable?: boolean;\n  /**\n   * Whether this model is a modular content block or not\n   */\n  modular_block?: boolean;\n  /**\n   * Whether draft/published mode is active or not\n   */\n  draft_mode_active?: boolean;\n  /**\n   * Whether editors can organize records in a tree or not\n   */\n  tree?: boolean;\n  /**\n   * If an ordering field is set, this fields specify the sorting direction\n   */\n  ordering_direction?: null | "asc" | "desc";\n  /**\n   * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n   */\n  ordering_meta?: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appeareance?: "compact" | "table";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appearance?: "compact" | "table";\n  /**\n   * A hint shown to editors to help them understand the purpose of this model/block\n   */\n  hint?: string | null;\n  ordering_field?: FieldData | null;\n  title_field?: FieldData | null;\n  image_preview_field?: FieldData | null;\n  excerpt_field?: FieldData | null;\n  workflow?: WorkflowData | null;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemTypeUpdateSchema {\n  id?: ItemTypeIdentity;\n  type?: ItemTypeType;\n  /**\n   * Name of the model\n   */\n  name?: string;\n  /**\n   * API key of the model\n   */\n  api_key?: string;\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appeareance?: "compact" | "table";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appearance?: "compact" | "table";\n  /**\n   * Whether the model is single-instance or not\n   */\n  singleton?: boolean;\n  /**\n   * Whether we require all the project locales to be present for each localized field or not\n   */\n  all_locales_required?: boolean;\n  /**\n   * Whether editors can sort records via drag & drop or not\n   */\n  sortable?: boolean;\n  /**\n   * Whether this model is a modular content block or not\n   */\n  modular_block?: boolean;\n  /**\n   * Whether draft/published mode is active or not\n   */\n  draft_mode_active?: boolean;\n  /**\n   * Whether editors can organize records in a tree or not\n   */\n  tree?: boolean;\n  /**\n   * If an ordering field is set, this fields specify the sorting direction\n   */\n  ordering_direction?: null | "asc" | "desc";\n  /**\n   * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n   */\n  ordering_meta?: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n  /**\n   * If this model is single-instance, this tells the single-instance record has already been created or not\n   */\n  has_singleton_item?: boolean;\n  /**\n   * A hint shown to editors to help them understand the purpose of this model/block\n   */\n  hint?: string | null;\n  ordering_field?: FieldData | null;\n  title_field?: FieldData | null;\n  image_preview_field?: FieldData | null;\n  excerpt_field?: FieldData | null;\n  workflow?: WorkflowData | null;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `update.targetSchema` link.\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `create.targetSchema` link.\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `update.targetSchema` link.\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `duplicate.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `duplicate.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.targetSchema` link.\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.targetSchema` link.\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `restore.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `create.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `update.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.targetSchema` link.\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.targetSchema` link.\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `update.targetSchema` link.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "job".\n */\nexport interface Job {\n  id: JobIdentity;\n  type: JobType;\n}\nexport type ItemTypeUpdateTargetSchema = Job;\nexport type ItemTypeDestroyTargetSchema = Job;\nexport type FieldCreateTargetSchema = Job;\nexport type FieldUpdateTargetSchema = Job;\nexport type FieldDestroyTargetSchema = Job;\nexport type FieldDuplicateTargetSchema = Job;\nexport type ItemDuplicateTargetSchema = Job;\nexport type ItemDestroyTargetSchema = Job;\nexport type ItemBatchDestroyTargetSchema = Job;\nexport type ItemBatchPublishTargetSchema = Job;\nexport type ItemBatchUnpublishTargetSchema = Job;\nexport type ItemBulkPublishTargetSchema = Job;\nexport type ItemBulkUnpublishTargetSchema = Job;\nexport type ItemBulkDestroyTargetSchema = Job;\nexport type ItemBulkMoveToStageTargetSchema = Job;\nexport type ItemVersionRestoreTargetSchema = Job;\nexport type UploadCreateTargetSchema = Job;\nexport type UploadUpdateTargetSchema = Job;\nexport type UploadBatchAddTagsTargetSchema = Job;\nexport type UploadBatchDestroyTargetSchema = Job;\nexport type UploadBulkTagTargetSchema = Job;\nexport type UploadBulkDestroyTargetSchema = Job;\nexport type SiteUpdateTargetSchema = Job;\n/**\n * JSON API data\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface JobData {\n  type: JobType;\n  id: JobIdentity;\n}\n\n/**\n * Each Model consists of a set of fields. Using the database metaphore, fields are like table columns, and when creating them you need to specify their type (`string`, `file`, `float`, etc.) and any required validation.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "field".\n */\nexport interface Field {\n  id: FieldIdentity;\n  type: FieldType;\n  /**\n   * The label of the field\n   */\n  label: string;\n  /**\n   * Type of input\n   */\n  field_type: string;\n  /**\n   * Whether the field needs to be multilanguage or not\n   */\n  localized: boolean;\n  /**\n   * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n   */\n  default_value:\n    | boolean\n    | null\n    | string\n    | number\n    | {\n        [k: string]: unknown;\n      };\n  /**\n   * Field API key\n   */\n  api_key: string;\n  /**\n   * Field hint\n   */\n  hint: string | null;\n  /**\n   * Optional field validations\n   */\n  validators: {\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance\n   */\n  appeareance: {\n    editor: string;\n    parameters: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance details, plugin configuration and field add-ons\n   */\n  appearance: {\n    /**\n     * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n     */\n    editor: string;\n    /**\n     * The specific field extension to use for the field (only if the editor is a modern plugin)\n     */\n    field_extension?: string;\n    /**\n     * The editor plugin\'s parameters\n     */\n    parameters: {\n      [k: string]: unknown;\n    };\n    /**\n     * An array of add-on plugins with id and parameters\n     */\n    addons: {\n      /**\n       * The ID of a plugin offering a field addon\n       */\n      id: string;\n      /**\n       * The specific field extension to use for the field (only if the editor is a modern plugin)\n       */\n      field_extension?: string;\n      parameters: {\n        [k: string]: unknown;\n      };\n      [k: string]: unknown;\n    }[];\n    [k: string]: unknown;\n  };\n  /**\n   * Ordering index\n   */\n  position: number;\n  item_type: ItemTypeData;\n  fieldset: null | FieldsetData;\n}\nexport type FieldCreateJobSchema = Field;\nexport type FieldUpdateJobSchema = Field;\nexport type FieldSelfTargetSchema = Field;\nexport type FieldDestroyJobSchema = Field;\nexport type FieldDuplicateJobSchema = Field;\n/**\n * JSON API data\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface FieldsetData {\n  type: FieldsetType;\n  id: FieldsetIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface FieldAttributes {\n  /**\n   * The label of the field\n   */\n  label: string;\n  /**\n   * Type of input\n   */\n  field_type: string;\n  /**\n   * Whether the field needs to be multilanguage or not\n   */\n  localized: boolean;\n  /**\n   * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n   */\n  default_value:\n    | boolean\n    | null\n    | string\n    | number\n    | {\n        [k: string]: unknown;\n      };\n  /**\n   * Field API key\n   */\n  api_key: string;\n  /**\n   * Field hint\n   */\n  hint: string | null;\n  /**\n   * Optional field validations\n   */\n  validators: {\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance\n   */\n  appeareance: {\n    editor: string;\n    parameters: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance details, plugin configuration and field add-ons\n   */\n  appearance: {\n    /**\n     * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n     */\n    editor: string;\n    /**\n     * The specific field extension to use for the field (only if the editor is a modern plugin)\n     */\n    field_extension?: string;\n    /**\n     * The editor plugin\'s parameters\n     */\n    parameters: {\n      [k: string]: unknown;\n    };\n    /**\n     * An array of add-on plugins with id and parameters\n     */\n    addons: {\n      /**\n       * The ID of a plugin offering a field addon\n       */\n      id: string;\n      /**\n       * The specific field extension to use for the field (only if the editor is a modern plugin)\n       */\n      field_extension?: string;\n      parameters: {\n        [k: string]: unknown;\n      };\n      [k: string]: unknown;\n    }[];\n    [k: string]: unknown;\n  };\n  /**\n   * Ordering index\n   */\n  position: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface FieldRelationships {\n  item_type: ItemTypeData;\n  fieldset: null | FieldsetData;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface FieldCreateSchema {\n  type?: FieldType;\n  /**\n   * The label of the field\n   */\n  label: string;\n  /**\n   * Type of input\n   */\n  field_type: string;\n  /**\n   * Field API key\n   */\n  api_key: string;\n  /**\n   * Whether the field needs to be multilanguage or not\n   */\n  localized?: boolean;\n  /**\n   * Optional field validations\n   */\n  validators?: {\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance\n   */\n  appeareance?: {\n    editor: string;\n    parameters: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance details, plugin configuration and field add-ons\n   */\n  appearance?: {\n    /**\n     * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n     */\n    editor: string;\n    /**\n     * The specific field extension to use for the field (only if the editor is a modern plugin)\n     */\n    field_extension?: string;\n    /**\n     * The editor plugin\'s parameters\n     */\n    parameters: {\n      [k: string]: unknown;\n    };\n    /**\n     * An array of add-on plugins with id and parameters\n     */\n    addons: {\n      /**\n       * The ID of a plugin offering a field addon\n       */\n      id: string;\n      /**\n       * The specific field extension to use for the field (only if the editor is a modern plugin)\n       */\n      field_extension?: string;\n      parameters: {\n        [k: string]: unknown;\n      };\n      [k: string]: unknown;\n    }[];\n    [k: string]: unknown;\n  };\n  /**\n   * Ordering index\n   */\n  position?: number;\n  /**\n   * Field hint\n   */\n  hint?: string | null;\n  /**\n   * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n   */\n  default_value?:\n    | boolean\n    | null\n    | string\n    | number\n    | {\n        [k: string]: unknown;\n      };\n  /**\n   * Fieldset linkage\n   */\n  fieldset?: {\n    data: null | FieldsetData;\n  };\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface FieldUpdateSchema {\n  id?: FieldIdentity;\n  type?: FieldType;\n  /**\n   * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n   */\n  default_value?:\n    | boolean\n    | null\n    | string\n    | number\n    | {\n        [k: string]: unknown;\n      };\n  /**\n   * The label of the field\n   */\n  label?: string;\n  /**\n   * Field API key\n   */\n  api_key?: string;\n  /**\n   * Whether the field needs to be multilanguage or not\n   */\n  localized?: boolean;\n  /**\n   * Optional field validations\n   */\n  validators?: {\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance\n   */\n  appeareance?: {\n    editor: string;\n    parameters: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance details, plugin configuration and field add-ons\n   */\n  appearance?: {\n    /**\n     * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n     */\n    editor: string;\n    /**\n     * The specific field extension to use for the field (only if the editor is a modern plugin)\n     */\n    field_extension?: string;\n    /**\n     * The editor plugin\'s parameters\n     */\n    parameters: {\n      [k: string]: unknown;\n    };\n    /**\n     * An array of add-on plugins with id and parameters\n     */\n    addons: {\n      /**\n       * The ID of a plugin offering a field addon\n       */\n      id: string;\n      /**\n       * The specific field extension to use for the field (only if the editor is a modern plugin)\n       */\n      field_extension?: string;\n      parameters: {\n        [k: string]: unknown;\n      };\n      [k: string]: unknown;\n    }[];\n    [k: string]: unknown;\n  };\n  /**\n   * Ordering index\n   */\n  position?: number;\n  /**\n   * Type of input\n   */\n  field_type?: string;\n  /**\n   * Field hint\n   */\n  hint?: string | null;\n  /**\n   * Fieldset linkage\n   */\n  fieldset?: {\n    data: null | FieldsetData;\n  };\n}\n\n/**\n * Fields can be organized and grouped into fieldset to better present them to editors.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "fieldset".\n */\nexport interface Fieldset {\n  id: FieldsetIdentity;\n  type: FieldsetType;\n  /**\n   * The title of the fieldset\n   */\n  title: string;\n  /**\n   * Description/contextual hint for the fieldset\n   */\n  hint: string | null;\n  /**\n   * Whether the fieldset can be collapsed or not\n   */\n  collapsible: boolean;\n  /**\n   * When fieldset is collapsible, determines if the default is to start collapsed or not\n   */\n  start_collapsed: boolean;\n  /**\n   * Ordering index\n   */\n  position: number;\n  item_type: ItemTypeData;\n}\nexport type FieldsetCreateTargetSchema = Fieldset;\nexport type FieldsetUpdateTargetSchema = Fieldset;\nexport type FieldsetSelfTargetSchema = Fieldset;\nexport type FieldsetDestroyTargetSchema = Fieldset;\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface FieldsetAttributes {\n  /**\n   * The title of the fieldset\n   */\n  title: string;\n  /**\n   * Description/contextual hint for the fieldset\n   */\n  hint: string | null;\n  /**\n   * Whether the fieldset can be collapsed or not\n   */\n  collapsible: boolean;\n  /**\n   * When fieldset is collapsible, determines if the default is to start collapsed or not\n   */\n  start_collapsed: boolean;\n  /**\n   * Ordering index\n   */\n  position: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface FieldsetRelationships {\n  item_type: ItemTypeData;\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface FieldsetCreateSchema {\n  type?: FieldsetType;\n  /**\n   * The title of the fieldset\n   */\n  title: string;\n  /**\n   * Description/contextual hint for the fieldset\n   */\n  hint?: string | null;\n  /**\n   * Ordering index\n   */\n  position?: number;\n  /**\n   * Whether the fieldset can be collapsed or not\n   */\n  collapsible?: boolean;\n  /**\n   * When fieldset is collapsible, determines if the default is to start collapsed or not\n   */\n  start_collapsed?: boolean;\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface FieldsetUpdateSchema {\n  id?: FieldsetIdentity;\n  type?: FieldsetType;\n  /**\n   * The title of the fieldset\n   */\n  title?: string;\n  /**\n   * Description/contextual hint for the fieldset\n   */\n  hint?: string | null;\n  /**\n   * Ordering index\n   */\n  position?: number;\n  /**\n   * Whether the fieldset can be collapsed or not\n   */\n  collapsible?: boolean;\n  /**\n   * When fieldset is collapsible, determines if the default is to start collapsed or not\n   */\n  start_collapsed?: boolean;\n}\n\n/**\n * A session is required to access to read-and-write API endpoints\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "session".\n */\nexport interface Session {\n  id: SessionIdentity;\n  type: SessionType;\n  user: UserData;\n}\nexport type SessionCreateTargetSchema = Session;\n/**\n * JSON API data\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SessionData {\n  type: SessionType;\n  id: SessionIdentity;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SessionRelationships {\n  user: UserData;\n}\n\n/**\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface SessionCreateSchema {\n  /**\n   * JSON API type field\n   */\n  type?: "email_credentials";\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * Password\n   */\n  password: string;\n  /**\n   * Two-factor authentication one-time password\n   */\n  otp_code?: string;\n}\n\n/**\n * An API token allows access to our API. It is linked to a Role, which describes what actions can be performed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "access_token".\n */\nexport interface AccessToken {\n  id: AccessTokenIdentity;\n  type: AccessTokenType;\n  /**\n   * Name of API token\n   */\n  name: string;\n  /**\n   * The actual API token\n   */\n  token?: string;\n  /**\n   * Whether this API token can access the Content Delivery API published content endpoint\n   */\n  can_access_cda: boolean;\n  /**\n   * Whether this API token can access the Content Delivery API draft content endpoint\n   */\n  can_access_cda_preview: boolean;\n  /**\n   * Whether this API token can access the Content Management API\n   */\n  can_access_cma: boolean;\n  hardcoded_type: null | string;\n  role: RoleData | null;\n}\nexport type AccessTokenCreateTargetSchema = AccessToken;\nexport type AccessTokenUpdateTargetSchema = AccessToken;\nexport type AccessTokenSelfTargetSchema = AccessToken;\nexport type AccessTokenRegenerateTokenTargetSchema = AccessToken;\nexport type AccessTokenDestroyTargetSchema = AccessToken;\n/**\n * JSON API data\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AccessTokenData {\n  type: AccessTokenType;\n  id: AccessTokenIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AccessTokenAttributes {\n  /**\n   * Name of API token\n   */\n  name: string;\n  /**\n   * The actual API token\n   */\n  token?: string;\n  /**\n   * Whether this API token can access the Content Delivery API published content endpoint\n   */\n  can_access_cda: boolean;\n  /**\n   * Whether this API token can access the Content Delivery API draft content endpoint\n   */\n  can_access_cda_preview: boolean;\n  /**\n   * Whether this API token can access the Content Management API\n   */\n  can_access_cma: boolean;\n  hardcoded_type: null | string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface AccessTokenRelationships {\n  role: RoleData | null;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface AccessTokenCreateSchema {\n  type?: AccessTokenType;\n  /**\n   * Name of API token\n   */\n  name: string;\n  /**\n   * Whether this API token can access the Content Delivery API published content endpoint\n   */\n  can_access_cda: boolean;\n  /**\n   * Whether this API token can access the Content Delivery API draft content endpoint\n   */\n  can_access_cda_preview: boolean;\n  /**\n   * Whether this API token can access the Content Management API\n   */\n  can_access_cma: boolean;\n  role: RoleData | null;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface AccessTokenUpdateSchema {\n  id?: AccessTokenIdentity;\n  type?: AccessTokenType;\n  /**\n   * Name of API token\n   */\n  name: string;\n  /**\n   * Whether this API token can access the Content Delivery API published content endpoint\n   */\n  can_access_cda: boolean;\n  /**\n   * Whether this API token can access the Content Delivery API draft content endpoint\n   */\n  can_access_cda_preview: boolean;\n  /**\n   * Whether this API token can access the Content Management API\n   */\n  can_access_cma: boolean;\n  role: RoleData | null;\n}\n\n/**\n * Plugins enable developers to replace DatoCMS field components with HTML5 applications so the editing experiences of the DatoCMS web app can be customized.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "plugin".\n */\nexport interface Plugin {\n  id: PluginIdentity;\n  type: PluginType;\n  /**\n   * The name of the plugin\n   */\n  name: string;\n  /**\n   * A description of the plugin\n   */\n  description: null | string;\n  /**\n   * NPM package name of the plugin (or null if it\'s a private plugin)\n   */\n  package_name: null | string;\n  /**\n   * The installed version of the plugin (or null if it\'s a private plugin)\n   */\n  package_version: null | string;\n  /**\n   * The entry point URL of the plugin\n   */\n  url: string;\n  /**\n   * Global plugin configuration. Plugins can persist whatever information they want in this object to reuse it later.\n   */\n  parameters: {\n    [k: string]: unknown;\n  };\n  /**\n   * Permissions granted to this plugin\n   */\n  permissions: "currentUserAccessToken"[];\n  /**\n   * The type of field extension a legacy plugin implements\n   */\n  plugin_type: "field_editor" | "sidebar" | "field_addon" | null;\n  /**\n   * On which types of field in which a legacy plugin can be used\n   */\n  field_types:\n    | null\n    | (\n        | "boolean"\n        | "date"\n        | "date_time"\n        | "float"\n        | "integer"\n        | "string"\n        | "text"\n        | "lat_lon"\n        | "json"\n        | "seo"\n        | "link"\n        | "links"\n        | "video"\n        | "color"\n        | "slug"\n        | "rich_text"\n        | "file"\n        | "gallery"\n      )[];\n  /**\n   * The schema for the parameters a legacy plugin can persist\n   */\n  parameter_definitions: null | {\n    global: unknown[];\n    instance: unknown[];\n  };\n  meta: PluginMeta;\n}\nexport type PluginCreateTargetSchema = Plugin;\nexport type PluginUpdateTargetSchema = Plugin;\nexport type PluginSelfTargetSchema = Plugin;\nexport type PluginDestroyTargetSchema = Plugin;\n/**\n * JSON API meta\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface PluginMeta {\n  /**\n   * Version of the plugin. Legacy plugins are v1, new plugins are v2\n   */\n  version: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface PluginData {\n  type: PluginType;\n  id: PluginIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface PluginAttributes {\n  /**\n   * The name of the plugin\n   */\n  name: string;\n  /**\n   * A description of the plugin\n   */\n  description: null | string;\n  /**\n   * NPM package name of the plugin (or null if it\'s a private plugin)\n   */\n  package_name: null | string;\n  /**\n   * The installed version of the plugin (or null if it\'s a private plugin)\n   */\n  package_version: null | string;\n  /**\n   * The entry point URL of the plugin\n   */\n  url: string;\n  /**\n   * Global plugin configuration. Plugins can persist whatever information they want in this object to reuse it later.\n   */\n  parameters: {\n    [k: string]: unknown;\n  };\n  /**\n   * Permissions granted to this plugin\n   */\n  permissions: "currentUserAccessToken"[];\n  /**\n   * The type of field extension a legacy plugin implements\n   */\n  plugin_type: "field_editor" | "sidebar" | "field_addon" | null;\n  /**\n   * On which types of field in which a legacy plugin can be used\n   */\n  field_types:\n    | null\n    | (\n        | "boolean"\n        | "date"\n        | "date_time"\n        | "float"\n        | "integer"\n        | "string"\n        | "text"\n        | "lat_lon"\n        | "json"\n        | "seo"\n        | "link"\n        | "links"\n        | "video"\n        | "color"\n        | "slug"\n        | "rich_text"\n        | "file"\n        | "gallery"\n      )[];\n  /**\n   * The schema for the parameters a legacy plugin can persist\n   */\n  parameter_definitions: null | {\n    global: unknown[];\n    instance: unknown[];\n  };\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface PluginCreateSchema {\n  type?: PluginType;\n  /**\n   * NPM package name of the public plugin you want to install. For public plugins, that\'s the only attribute you need to pass.\n   */\n  package_name?: null | string;\n  /**\n   * The name of the plugin. Only to be passed if package name key is not specified.\n   */\n  name?: string;\n  /**\n   * A description of the plugin. Only to be passed if package name key is not specified.\n   */\n  description?: null | string;\n  /**\n   * The entry point URL of the plugin. Only to be passed if package name key is not specified.\n   */\n  url?: string;\n  /**\n   * Permissions granted to this plugin. Only to be passed if package name key is not specified.\n   */\n  permissions?: "currentUserAccessToken"[];\n  /**\n   * The type of field extension this legacy plugin implements. Only to be passed if package name key is not specified.\n   */\n  plugin_type?: "field_editor" | "sidebar" | "field_addon";\n  /**\n   * On which types of field in which this legacy plugin can be used. Only to be passed if package name key is not specified.\n   */\n  field_types?: (\n    | "boolean"\n    | "date"\n    | "date_time"\n    | "float"\n    | "integer"\n    | "string"\n    | "text"\n    | "lat_lon"\n    | "json"\n    | "seo"\n    | "link"\n    | "links"\n    | "video"\n    | "color"\n    | "slug"\n    | "rich_text"\n    | "file"\n    | "gallery"\n  )[];\n  /**\n   * The schema for the parameters this legacy plugin can persist\n   */\n  parameter_definitions?: {\n    global: unknown[];\n    instance: unknown[];\n  };\n  /**\n   * NPM version of the plugin\n   */\n  package_version?: null | string;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface PluginUpdateSchema {\n  id?: PluginIdentity;\n  type?: PluginType;\n  /**\n   * The name of the plugin\n   */\n  name?: string;\n  /**\n   * A description of the plugin\n   */\n  description?: null | string;\n  /**\n   * The entry point URL of the plugin\n   */\n  url?: string;\n  /**\n   * Global plugin configuration. Plugins can persist whatever information they want in this object to reuse it later.\n   */\n  parameters?: {\n    [k: string]: unknown;\n  };\n  /**\n   * The installed version of the plugin (or null if it\'s a private plugin)\n   */\n  package_version?: null | string;\n  /**\n   * Permissions granted to this plugin\n   */\n  permissions?: "currentUserAccessToken"[];\n  meta?: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * Some API endpoint give results asynchronously, returning the ID of a job.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "job_result".\n */\nexport interface JobResult {\n  id: JobResultIdentity;\n  type: JobResultType;\n  /**\n   * Status of delayed HTTP response\n   */\n  status: number;\n  /**\n   * JSON API response of the HTTP request\n   */\n  payload: null | {\n    [k: string]: unknown;\n  };\n}\nexport type JobResultSelfTargetSchema = JobResult;\n/**\n * JSON API data\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface JobResultData {\n  type: JobResultType;\n  id: JobResultIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface JobResultAttributes {\n  /**\n   * Status of delayed HTTP response\n   */\n  status: number;\n  /**\n   * JSON API response of the HTTP request\n   */\n  payload: null | {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "subscription_limit".\n */\nexport interface SubscriptionLimit {\n  id: SubscriptionLimitIdentity;\n  type: SubscriptionLimitType;\n  /**\n   * The codename for the limit\n   */\n  code: string;\n  /**\n   * Current usage\n   */\n  usage: number;\n  /**\n   * The actual limit\n   */\n  limit: number | null;\n}\nexport type SubscriptionLimitSelfTargetSchema = SubscriptionLimit;\n/**\n * JSON API data\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SubscriptionLimitData {\n  type: SubscriptionLimitType;\n  id: SubscriptionLimitIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SubscriptionLimitAttributes {\n  /**\n   * The codename for the limit\n   */\n  code: string;\n  /**\n   * Current usage\n   */\n  usage: number;\n  /**\n   * The actual limit\n   */\n  limit: number | null;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "subscription_feature".\n */\nexport interface SubscriptionFeature {\n  id: SubscriptionFeatureIdentity;\n  type: SubscriptionFeatureType;\n  /**\n   * The codename for the feature\n   */\n  code: string;\n  /**\n   * Whether the project is currently using the feature\n   */\n  in_use?: boolean;\n  /**\n   * Whether the feature is available on the current project\n   */\n  enabled: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SubscriptionFeatureData {\n  type: SubscriptionFeatureType;\n  id: SubscriptionFeatureIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SubscriptionFeatureAttributes {\n  /**\n   * The codename for the feature\n   */\n  code: string;\n  /**\n   * Whether the project is currently using the feature\n   */\n  in_use?: boolean;\n  /**\n   * Whether the feature is available on the current project\n   */\n  enabled: boolean;\n}\n\n/**\n * Represents an event occurred during the deploy process of your administrative area.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "build_event".\n */\nexport interface BuildEvent {\n  id: BuildEventIdentity;\n  type: BuildEventType;\n  /**\n   * The type of activity\n   */\n  event_type:\n    | "request_success"\n    | "request_failure"\n    | "response_success"\n    | "response_failure"\n    | "request_aborted"\n    | "response_unprocessable"\n    | "indexing_started"\n    | "indexing_success"\n    | "indexing_failure";\n  /**\n   * The moment the activity occurred\n   */\n  created_at: string;\n  /**\n   * Any details regarding the event\n   */\n  data: {\n    [k: string]: unknown;\n  };\n  build_trigger: BuildTriggerData;\n}\nexport type BuildEventSelfTargetSchema = BuildEvent;\n/**\n * JSON API data\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface BuildTriggerData {\n  type: BuildTriggerType;\n  id: BuildTriggerIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface BuildEventData {\n  type: BuildEventType;\n  id: BuildEventIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface BuildEventAttributes {\n  /**\n   * The type of activity\n   */\n  event_type:\n    | "request_success"\n    | "request_failure"\n    | "response_success"\n    | "response_failure"\n    | "request_aborted"\n    | "response_unprocessable"\n    | "indexing_started"\n    | "indexing_success"\n    | "indexing_failure";\n  /**\n   * The moment the activity occurred\n   */\n  created_at: string;\n  /**\n   * Any details regarding the event\n   */\n  data: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface BuildEventRelationships {\n  build_trigger: BuildTriggerData;\n}\n\n/**\n * DatoCMS stores the individual pieces of content you create from a model as records, which are much like table rows in a database. For backward-compatibility reasons, the API refers to records as "items".\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item".\n */\nexport interface Item {\n  id: ItemIdentity;\n  type: ItemType1;\n  item_type: ItemTypeData;\n  creator?: AccountData | AccessTokenData | UserData | SsoUserData;\n  meta: ItemMeta;\n  [k: string]: unknown;\n}\nexport type ItemCreateTargetSchema = Item;\nexport type ItemDuplicateJobSchema = Item;\nexport type ItemUpdateTargetSchema = Item;\nexport type ItemSelfTargetSchema = Item;\nexport type ItemDestroyJobSchema = Item;\nexport type ItemPublishTargetSchema = Item;\nexport type ItemUnpublishTargetSchema = Item;\nexport type ScheduledPublicationDestroyTargetSchema = Item;\nexport type ScheduledUnpublishingDestroyTargetSchema = Item;\n/**\n * Meta information regarding the record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface ItemMeta {\n  /**\n   * Date of creation\n   */\n  created_at: string;\n  /**\n   * Last update time\n   */\n  updated_at: string;\n  /**\n   * Date of last publication\n   */\n  published_at: null | string;\n  /**\n   * Date of first publication\n   */\n  first_published_at: null | string;\n  /**\n   * Date of future publication\n   */\n  publication_scheduled_at: null | string;\n  /**\n   * Date of future unpublishing\n   */\n  unpublishing_scheduled_at: null | string;\n  /**\n   * Status\n   */\n  status: null | ("draft" | "updated" | "published");\n  /**\n   * Whether the current record is valid or not\n   */\n  is_valid: boolean;\n  /**\n   * The ID of the current record version\n   */\n  current_version: string;\n  /**\n   * Workflow stage in which the item is\n   */\n  stage: null | string;\n}\n\n/**\n * The JSON data associated to the record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemAttributes {\n  [k: string]: unknown;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemRelationships {\n  item_type: ItemTypeData;\n  creator?: AccountData | AccessTokenData | UserData | SsoUserData;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `validate_existing.schema` link.\n */\nexport interface ItemValidateExistingSchema {\n  id?: ItemIdentity;\n  type?: ItemType1;\n  item_type: {\n    data: ItemTypeData;\n  };\n  creator?: AccountData | AccessTokenData | UserData | SsoUserData;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `validate_new.schema` link.\n */\nexport interface ItemValidateNewSchema {\n  type?: ItemType1;\n  item_type: {\n    data: ItemTypeData;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemCreateSchema {\n  type?: ItemType1;\n  /**\n   * The record model\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n  /**\n   * Meta information regarding the record\n   */\n  meta?: {\n    /**\n     * Date of creation\n     */\n    created_at?: string;\n    /**\n     * Last update time\n     */\n    updated_at?: string;\n    /**\n     * Date of last publication\n     */\n    published_at?: null | string;\n    /**\n     * Date of first publication\n     */\n    first_published_at?: null | string;\n    /**\n     * Date of future publication\n     */\n    publication_scheduled_at?: null | string;\n    /**\n     * Status\n     */\n    status?: null | ("draft" | "updated" | "published");\n    /**\n     * Whether the current record is valid or not\n     */\n    is_valid?: boolean;\n    /**\n     * The ID of the current record version\n     */\n    current_version?: string;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemUpdateSchema {\n  id?: ItemIdentity;\n  type?: ItemType1;\n  creator?: {\n    data: AccountData | AccessTokenData | UserData | SsoUserData;\n  };\n  /**\n   * Meta information regarding the record\n   */\n  meta?: {\n    /**\n     * Date of creation\n     */\n    created_at?: string;\n    /**\n     * Last update time\n     */\n    updated_at?: string;\n    /**\n     * Date of last publication\n     */\n    published_at?: null | string;\n    /**\n     * Date of first publication\n     */\n    first_published_at?: null | string;\n    /**\n     * Date of future publication\n     */\n    publication_scheduled_at?: null | string;\n    /**\n     * Date of future unpublishing\n     */\n    unpublishing_scheduled_at?: null | string;\n    /**\n     * Status\n     */\n    status?: null | ("draft" | "updated" | "published");\n    /**\n     * Whether the current record is valid or not\n     */\n    is_valid?: boolean;\n    /**\n     * The ID of the current record version (for optimistic locking, see the example)\n     */\n    current_version?: string;\n    /**\n     * The new stage to move the record to\n     */\n    stage?: string | null;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.schema` link.\n */\nexport interface ItemBulkPublishSchema {\n  /**\n   * JSON API type field\n   */\n  type?: "item_bulk_publish_operation";\n  /**\n   * Records to publish\n   */\n  items: {\n    data: ItemData[];\n  };\n  minItems?: unknown;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.schema` link.\n */\nexport interface ItemBulkUnpublishSchema {\n  /**\n   * JSON API type field\n   */\n  type?: "item_bulk_unpublish_operation";\n  /**\n   * Records to unpublish\n   */\n  items: {\n    data: ItemData[];\n  };\n  minItems?: unknown;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.schema` link.\n */\nexport interface ItemBulkDestroySchema {\n  /**\n   * JSON API type field\n   */\n  type?: "item_bulk_destroy_operation";\n  /**\n   * Records to delete\n   */\n  items: {\n    data: ItemData[];\n  };\n  minItems?: unknown;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.schema` link.\n */\nexport interface ItemBulkMoveToStageSchema {\n  /**\n   * JSON API type field\n   */\n  type?: "item_bulk_move_to_stage_operation";\n  /**\n   * Stage to be moved to\n   */\n  stage: string;\n  /**\n   * Records to move\n   */\n  items: {\n    data: ItemData[];\n  };\n  minItems?: unknown;\n}\n\n/**\n * Every change to a record is stored as a separate record version in DatoCMS.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_version".\n */\nexport interface ItemVersion {\n  id: ItemVersionIdentity;\n  type: ItemVersionType;\n  item_type: ItemTypeData;\n  item: ItemData;\n  editor: AccountData | AccessTokenData | UserData | SsoUserData;\n  meta: ItemVersionMeta;\n  [k: string]: unknown;\n}\nexport type ItemVersionSelfTargetSchema = ItemVersion;\n/**\n * Meta information regarding the record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface ItemVersionMeta {\n  /**\n   * Date of record version creation\n   */\n  created_at: string;\n  /**\n   * Whether the record version is valid or not\n   */\n  is_valid: boolean;\n  /**\n   * Whether the record version is the published version or not\n   */\n  is_published: boolean;\n  /**\n   * Whether the record version is the most recent version or not\n   */\n  is_current: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemVersionData {\n  type: ItemVersionType;\n  id: ItemVersionIdentity;\n}\n\n/**\n * The JSON data associated to the record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemVersionAttributes {\n  [k: string]: unknown;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemVersionRelationships {\n  item_type: ItemTypeData;\n  item: ItemData;\n  editor: AccountData | AccessTokenData | UserData | SsoUserData;\n}\n\n/**\n * Every file you upload to DatoCMS will be retrievable from this endpoint.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload".\n */\nexport interface Upload {\n  id: UploadIdentity;\n  type: UploadType;\n  /**\n   * size of the upload\n   */\n  size: number;\n  /**\n   * Width of image\n   */\n  width: null | number;\n  /**\n   * Height of image\n   */\n  height: null | number;\n  /**\n   * Upload path\n   */\n  path: string;\n  /**\n   * Upload basename\n   */\n  basename: string;\n  /**\n   * Upload filename\n   */\n  filename: string;\n  /**\n   * Upload URL\n   */\n  url: string;\n  /**\n   * Format\n   */\n  format: string | null;\n  /**\n   * Author\n   */\n  author: string | null;\n  /**\n   * Copyright\n   */\n  copyright: string | null;\n  /**\n   * Notes\n   */\n  notes: string | null;\n  /**\n   * The MD5 hash of the asset\n   */\n  md5: string;\n  /**\n   * Seconds of duration for the video\n   */\n  duration: number | null;\n  /**\n   * Frame rate (FPS) for the video\n   */\n  frame_rate: number | null;\n  /**\n   * Blurhash for the asset\n   */\n  blurhash: string | null;\n  /**\n   * Public Mux playback ID. Used with stream.mux.com to create the source URL for a video player.\n   */\n  mux_playback_id: string | null;\n  /**\n   * Maximum quality of MP4 rendition available\n   */\n  mux_mp4_highest_res: null | "high" | "medium" | "low";\n  /**\n   * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n   */\n  default_field_metadata: {\n    /**\n     * This interface was referenced by `undefined`\'s JSON-Schema definition\n     * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n     */\n    [k: string]: {\n      /**\n       * Alternate text for the asset\n       */\n      alt: string | null;\n      /**\n       * Title for the asset\n       */\n      title: string | null;\n      /**\n       * Object with arbitrary metadata\n       */\n      custom_data: {\n        [k: string]: unknown;\n      };\n      /**\n       * Focal point (only for image assets)\n       */\n      focal_point: {\n        /**\n         * Horizontal position expressed as float between 0 and 1\n         */\n        x: number;\n        /**\n         * Vertical position expressed as float between 0 and 1\n         */\n        y: number;\n      } | null;\n    };\n  };\n  /**\n   * Is this upload an image?\n   */\n  is_image: boolean;\n  /**\n   * Date of upload\n   */\n  created_at: null | string;\n  /**\n   * Date of last update\n   */\n  updated_at: null | string;\n  /**\n   * Mime type of upload\n   */\n  mime_type: null | string;\n  /**\n   * Tags\n   */\n  tags: string[];\n  /**\n   * Smart tags\n   */\n  smart_tags: string[];\n  /**\n   * Exif information\n   */\n  exif_info: {\n    [k: string]: unknown;\n  };\n  /**\n   * Dominant colors of the image\n   */\n  colors: {\n    /**\n     * Red value (from 0 to 255)\n     */\n    red: number;\n    /**\n     * Green value (from 0 to 255)\n     */\n    green: number;\n    /**\n     * Blue value (from 0 to 255)\n     */\n    blue: number;\n    /**\n     * Alpha value (from 0 to 255)\n     */\n    alpha: number;\n  }[];\n  creator: AccountData | AccessTokenData | UserData | SsoUserData;\n}\nexport type UploadCreateJobSchema = Upload;\nexport type UploadSelfTargetSchema = Upload;\nexport type UploadDestroyTargetSchema = Upload;\nexport type UploadUpdateJobSchema = Upload;\n/**\n * JSON API data\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadData {\n  type: UploadType;\n  id: UploadIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadAttributes {\n  /**\n   * size of the upload\n   */\n  size: number;\n  /**\n   * Width of image\n   */\n  width: null | number;\n  /**\n   * Height of image\n   */\n  height: null | number;\n  /**\n   * Upload path\n   */\n  path: string;\n  /**\n   * Upload basename\n   */\n  basename: string;\n  /**\n   * Upload filename\n   */\n  filename: string;\n  /**\n   * Upload URL\n   */\n  url: string;\n  /**\n   * Format\n   */\n  format: string | null;\n  /**\n   * Author\n   */\n  author: string | null;\n  /**\n   * Copyright\n   */\n  copyright: string | null;\n  /**\n   * Notes\n   */\n  notes: string | null;\n  /**\n   * The MD5 hash of the asset\n   */\n  md5: string;\n  /**\n   * Seconds of duration for the video\n   */\n  duration: number | null;\n  /**\n   * Frame rate (FPS) for the video\n   */\n  frame_rate: number | null;\n  /**\n   * Blurhash for the asset\n   */\n  blurhash: string | null;\n  /**\n   * Public Mux playback ID. Used with stream.mux.com to create the source URL for a video player.\n   */\n  mux_playback_id: string | null;\n  /**\n   * Maximum quality of MP4 rendition available\n   */\n  mux_mp4_highest_res: null | "high" | "medium" | "low";\n  /**\n   * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n   */\n  default_field_metadata: {\n    /**\n     * This interface was referenced by `undefined`\'s JSON-Schema definition\n     * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n     */\n    [k: string]: {\n      /**\n       * Alternate text for the asset\n       */\n      alt: string | null;\n      /**\n       * Title for the asset\n       */\n      title: string | null;\n      /**\n       * Object with arbitrary metadata\n       */\n      custom_data: {\n        [k: string]: unknown;\n      };\n      /**\n       * Focal point (only for image assets)\n       */\n      focal_point: {\n        /**\n         * Horizontal position expressed as float between 0 and 1\n         */\n        x: number;\n        /**\n         * Vertical position expressed as float between 0 and 1\n         */\n        y: number;\n      } | null;\n    };\n  };\n  /**\n   * Is this upload an image?\n   */\n  is_image: boolean;\n  /**\n   * Date of upload\n   */\n  created_at: null | string;\n  /**\n   * Date of last update\n   */\n  updated_at: null | string;\n  /**\n   * Mime type of upload\n   */\n  mime_type: null | string;\n  /**\n   * Tags\n   */\n  tags: string[];\n  /**\n   * Smart tags\n   */\n  smart_tags: string[];\n  /**\n   * Exif information\n   */\n  exif_info: {\n    [k: string]: unknown;\n  };\n  /**\n   * Dominant colors of the image\n   */\n  colors: {\n    /**\n     * Red value (from 0 to 255)\n     */\n    red: number;\n    /**\n     * Green value (from 0 to 255)\n     */\n    green: number;\n    /**\n     * Blue value (from 0 to 255)\n     */\n    blue: number;\n    /**\n     * Alpha value (from 0 to 255)\n     */\n    alpha: number;\n  }[];\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface UploadRelationships {\n  creator: AccountData | AccessTokenData | UserData | SsoUserData;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadCreateSchema {\n  type?: UploadType;\n  /**\n   * Upload path\n   */\n  path: string;\n  /**\n   * Copyright\n   */\n  copyright?: string | null;\n  /**\n   * Author\n   */\n  author?: string | null;\n  /**\n   * Notes\n   */\n  notes?: string | null;\n  /**\n   * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n   */\n  default_field_metadata?: {\n    /**\n     * This interface was referenced by `undefined`\'s JSON-Schema definition\n     * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n     */\n    [k: string]: {\n      /**\n       * Alternate text for the asset\n       */\n      alt?: string | null;\n      /**\n       * Title for the asset\n       */\n      title?: string | null;\n      /**\n       * Object with arbitrary metadata\n       */\n      custom_data?: {\n        [k: string]: unknown;\n      };\n      /**\n       * Focal point (only for image assets)\n       */\n      focal_point?: {\n        /**\n         * Horizontal position expressed as float between 0 and 1\n         */\n        x: number;\n        /**\n         * Vertical position expressed as float between 0 and 1\n         */\n        y: number;\n      } | null;\n    };\n  };\n  /**\n   * Tags\n   */\n  tags?: string[];\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UploadUpdateSchema {\n  id?: UploadIdentity;\n  type?: UploadType;\n  /**\n   * Upload path\n   */\n  path?: string;\n  /**\n   * Upload basename\n   */\n  basename?: string;\n  /**\n   * Copyright\n   */\n  copyright?: string | null;\n  /**\n   * Author\n   */\n  author?: string | null;\n  /**\n   * Notes\n   */\n  notes?: string | null;\n  /**\n   * Tags\n   */\n  tags?: string[];\n  /**\n   * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n   */\n  default_field_metadata?: {\n    /**\n     * This interface was referenced by `undefined`\'s JSON-Schema definition\n     * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n     */\n    [k: string]: {\n      /**\n       * Alternate text for the asset\n       */\n      alt?: string | null;\n      /**\n       * Title for the asset\n       */\n      title?: string | null;\n      /**\n       * Object with arbitrary metadata\n       */\n      custom_data?: {\n        [k: string]: unknown;\n      };\n      /**\n       * Focal point (only for image assets)\n       */\n      focal_point?: {\n        /**\n         * Horizontal position expressed as float between 0 and 1\n         */\n        x: number;\n        /**\n         * Vertical position expressed as float between 0 and 1\n         */\n        y: number;\n      } | null;\n    };\n  };\n  creator?: AccountData | AccessTokenData | UserData | SsoUserData;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.schema` link.\n */\nexport interface UploadBatchAddTagsSchema {\n  type?: UploadType;\n  /**\n   * Tags\n   */\n  tags?: string[];\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.schema` link.\n */\nexport interface UploadBulkTagSchema {\n  /**\n   * JSON API type field\n   */\n  type?: "upload_bulk_tag_operation";\n  /**\n   * The tags to add to the assets\n   */\n  tags: string[];\n  /**\n   * Assets to tag\n   */\n  uploads: {\n    data: UploadData[];\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.schema` link.\n */\nexport interface UploadBulkDestroySchema {\n  /**\n   * JSON API type field\n   */\n  type?: "upload_bulk_destroy_operation";\n  /**\n   * Assets to delete\n   */\n  uploads: {\n    data: UploadData[];\n  };\n}\n\n/**\n * To upload a file in DatoCMS, first you need to obtain an upload permission through this API endpoint. The response will contain the S3 URL where you will be able to upload the file with a direct PUT request.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_request".\n */\nexport interface UploadRequest {\n  id: UploadRequestIdentity;\n  type: UploadRequestType;\n  /**\n   * The URL to use to upload the file with a direct PUT request\n   */\n  url: string;\n}\nexport type UploadRequestCreateTargetSchema = UploadRequest;\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadRequestAttributes {\n  /**\n   * The URL to use to upload the file with a direct PUT request\n   */\n  url: string;\n  [k: string]: unknown;\n}\n\n/**\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadRequestCreateSchema {\n  type?: UploadRequestType;\n  /**\n   * The original file name\n   */\n  filename?: string;\n}\n\n/**\n * You can create scheduled publication to publish records in the future\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "scheduled_publication".\n */\nexport interface ScheduledPublication {\n  id: ScheduledPublicationIdentity;\n  type: ScheduledPublicationType;\n  /**\n   * The future date for the publication\n   */\n  publication_scheduled_at: string;\n  item: ItemData;\n}\nexport type ScheduledPublicationCreateTargetSchema = ScheduledPublication;\n/**\n * JSON API data\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ScheduledPublicationData {\n  type: ScheduledPublicationType;\n  id: ScheduledPublicationIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ScheduledPublicationAttributes {\n  /**\n   * The future date for the publication\n   */\n  publication_scheduled_at: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ScheduledPublicationRelationships {\n  item: ItemData;\n}\n\n/**\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ScheduledPublicationCreateSchema {\n  type?: ScheduledPublicationType;\n}\n\n/**\n * You can create a scheduled unpublishing to unpublish records in the future\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "scheduled_unpublishing".\n */\nexport interface ScheduledUnpublishing {\n  id: ScheduledUnpublishingIdentity;\n  type: ScheduledUnpublishingType;\n  /**\n   * The future date for the unpublishing\n   */\n  unpublishing_scheduled_at: string;\n  item: ItemData;\n}\nexport type ScheduledUnpublishingCreateTargetSchema = ScheduledUnpublishing;\n/**\n * JSON API data\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ScheduledUnpublishingData {\n  type: ScheduledUnpublishingType;\n  id: ScheduledUnpublishingIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ScheduledUnpublishingAttributes {\n  /**\n   * The future date for the unpublishing\n   */\n  unpublishing_scheduled_at: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ScheduledUnpublishingRelationships {\n  item: ItemData;\n}\n\n/**\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ScheduledUnpublishingCreateSchema {\n  type?: ScheduledUnpublishingType;\n}\n\n/**\n * DatoCMS Site Search is a way to deliver tailored search results to your site visitors. This is the endpoint you can use to query for results.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "search_result".\n */\nexport interface SearchResult {\n  id: SearchResultIdentity;\n  type: SearchResultType;\n  /**\n   * Page title\n   */\n  title: string;\n  /**\n   * First lines of body\n   */\n  body_excerpt: string;\n  /**\n   * URL\n   */\n  url: string;\n  /**\n   * Score\n   */\n  score: number;\n  highlight: {\n    title?: string[] | null;\n    body?: string[] | null;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SearchResultData {\n  type: SearchResultType;\n  id: SearchResultIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SearchResultAttributes {\n  /**\n   * Page title\n   */\n  title: string;\n  /**\n   * First lines of body\n   */\n  body_excerpt: string;\n  /**\n   * URL\n   */\n  url: string;\n  /**\n   * Score\n   */\n  score: number;\n  highlight: {\n    title?: string[] | null;\n    body?: string[] | null;\n  };\n}\n\n/**\n * [Environments](https://www.datocms.com/docs/general-concepts/primary-and-sandbox-environments) make it easier for your development team to **manage and maintain content structure once your content has been published**. You can think of environments like code branches: great for testing, development and pre-production environments.\n *\n * By default, every project has one environment, called **primary environment**, which is meant to be used for the regular editorial workflow. Additionally, multiple **sandbox environments** can be created by developers to safely test/experiment new changes in the content.\n *\n * Sandbox environments start out as **exact copies of one of the existing environments** (ie. the primary one). The process of creating a new sandbox starting off from an existing environment is called fork.\n *\n * Each environment is identified by a name (ie. `master`) and stores the following information:\n *\n * - Models\n * - Records\n * - Uploads\n * - Plugins\n * - Locales and timezone settings\n * - UI Theme (colors and logo)\n * - Global SEO settings\n * - The content navigation bar\n *\n * When making changes to any of the aforementioned entities in any environment, including the primary environment, **the data in all other environments isn’t affected** and stays the same.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "environment".\n */\nexport interface Environment {\n  id: EnvironmentIdentity;\n  type: EnvironmentType;\n  meta: EnvironmentMeta;\n}\nexport type EnvironmentForkJobSchema = Environment;\nexport type EnvironmentPromoteTargetSchema = Environment;\nexport type EnvironmentSelfTargetSchema = Environment;\nexport type EnvironmentDestroyJobSchema = Environment;\n/**\n * Meta attributes\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface EnvironmentMeta {\n  /**\n   * Status of the environment\n   */\n  status: "creating" | "ready" | "destroying";\n  /**\n   * Date of creation\n   */\n  created_at: string;\n  /**\n   * Last data change\n   */\n  last_data_change_at: string;\n  /**\n   * Is this environment the primary for the project?\n   */\n  primary: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface EnvironmentData {\n  type: EnvironmentType;\n  id: EnvironmentIdentity;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `fork.schema` link.\n */\nexport interface EnvironmentForkSchema {\n  /**\n   * The ID of the forked environment\n   */\n  id?: string;\n  type?: EnvironmentType;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "maintenance_mode".\n */\nexport interface MaintenanceMode {\n  id: MaintenanceModeIdentity;\n  type: MaintenanceModeType;\n  /**\n   * Whether maintenance mode is currently active or not\n   */\n  active: boolean;\n}\nexport type MaintenanceModeSelfTargetSchema = MaintenanceMode;\nexport type MaintenanceModeActivateTargetSchema = MaintenanceMode;\nexport type MaintenanceModeDeactivateTargetSchema = MaintenanceMode;\n/**\n * JSON API data\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface MaintenanceModeData {\n  type: MaintenanceModeType;\n  id: MaintenanceModeIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface MaintenanceModeAttributes {\n  /**\n   * Whether maintenance mode is currently active or not\n   */\n  active: boolean;\n}\n\n/**\n * A webhook allows to make requests following certain Dato events. It is linked to a Role, which describes what actions can be performed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "webhook".\n */\nexport interface Webhook {\n  id: WebhookIdentity;\n  type: WebhookType;\n  /**\n   * Unique name for the webhook\n   */\n  name: string;\n  /**\n   * Whether the webhook is enabled and sending events or not\n   */\n  enabled: boolean;\n  /**\n   * The URL to be called\n   */\n  url: string;\n  /**\n   * A custom payload\n   */\n  custom_payload: string | null;\n  /**\n   * HTTP Basic Authorization username\n   */\n  http_basic_user: string | null;\n  /**\n   * HTTP Basic Authorization password\n   */\n  http_basic_password: string | null;\n  /**\n   * Additional headers that will be sent\n   */\n  headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * All the events you will be notified for\n   */\n  events: unknown[];\n  /**\n   * Specifies which API version to use when serializing entities in the webhook payload\n   */\n  payload_api_version: string;\n  /**\n   * Whether the you want records present in the payload to show blocks expanded or not\n   */\n  nested_items_in_payload: boolean;\n}\nexport type WebhookCreateTargetSchema = Webhook;\nexport type WebhookUpdateTargetSchema = Webhook;\nexport type WebhookSelfTargetSchema = Webhook;\nexport type WebhookDestroyTargetSchema = Webhook;\n/**\n * JSON API data\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WebhookData {\n  type: WebhookType;\n  id: WebhookIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WebhookAttributes {\n  /**\n   * Unique name for the webhook\n   */\n  name: string;\n  /**\n   * Whether the webhook is enabled and sending events or not\n   */\n  enabled: boolean;\n  /**\n   * The URL to be called\n   */\n  url: string;\n  /**\n   * A custom payload\n   */\n  custom_payload: string | null;\n  /**\n   * HTTP Basic Authorization username\n   */\n  http_basic_user: string | null;\n  /**\n   * HTTP Basic Authorization password\n   */\n  http_basic_password: string | null;\n  /**\n   * Additional headers that will be sent\n   */\n  headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * All the events you will be notified for\n   */\n  events: unknown[];\n  /**\n   * Specifies which API version to use when serializing entities in the webhook payload\n   */\n  payload_api_version: string;\n  /**\n   * Whether the you want records present in the payload to show blocks expanded or not\n   */\n  nested_items_in_payload: boolean;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface WebhookCreateSchema {\n  type?: WebhookType;\n  /**\n   * Unique name for the webhook\n   */\n  name: string;\n  /**\n   * The URL to be called\n   */\n  url: string;\n  /**\n   * A custom payload\n   */\n  custom_payload: string | null;\n  /**\n   * Additional headers that will be sent\n   */\n  headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * All the events you will be notified for\n   */\n  events: unknown[];\n  /**\n   * HTTP Basic Authorization username\n   */\n  http_basic_user: string | null;\n  /**\n   * HTTP Basic Authorization password\n   */\n  http_basic_password: string | null;\n  /**\n   * Whether the webhook is enabled and sending events or not\n   */\n  enabled?: boolean;\n  /**\n   * Specifies which API version to use when serializing entities in the webhook payload\n   */\n  payload_api_version?: string;\n  /**\n   * Whether the you want records present in the payload to show blocks expanded or not\n   */\n  nested_items_in_payload?: boolean;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WebhookUpdateSchema {\n  id?: WebhookIdentity;\n  type?: WebhookType;\n  /**\n   * Unique name for the webhook\n   */\n  name?: string;\n  /**\n   * The URL to be called\n   */\n  url?: string;\n  /**\n   * A custom payload\n   */\n  custom_payload?: string | null;\n  /**\n   * Additional headers that will be sent\n   */\n  headers?: {\n    [k: string]: unknown;\n  };\n  /**\n   * All the events you will be notified for\n   */\n  events?: unknown[];\n  /**\n   * HTTP Basic Authorization username\n   */\n  http_basic_user?: string | null;\n  /**\n   * HTTP Basic Authorization password\n   */\n  http_basic_password?: string | null;\n  /**\n   * Whether the webhook is enabled and sending events or not\n   */\n  enabled?: boolean;\n  /**\n   * Specifies which API version to use when serializing entities in the webhook payload\n   */\n  payload_api_version?: string;\n  /**\n   * Whether the you want records present in the payload to show blocks expanded or not\n   */\n  nested_items_in_payload?: boolean;\n}\n\n/**\n * Represents a log entry in the webhooks activity list.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "webhook_call".\n */\nexport interface WebhookCall {\n  id: WebhookCallIdentity;\n  type: WebhookCallType;\n  /**\n   * The subject of webhook triggering\n   */\n  entity_type: "item" | "item_type" | "upload";\n  /**\n   * The event that triggers the webhook call\n   */\n  event_type: "create" | "update" | "delete" | "publish" | "unpublish";\n  /**\n   * The moment the call occurred\n   */\n  created_at: string;\n  /**\n   * The url that the webhook called\n   */\n  request_url: string;\n  /**\n   * The request\'s headers\n   */\n  request_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the request\n   */\n  request_payload: string;\n  /**\n   * The status of the response\n   */\n  response_status: number | null;\n  /**\n   * The response\'s headers\n   */\n  response_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the response\n   */\n  response_payload: string | null;\n  webhook: WebhookData;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WebhookCallData {\n  type: WebhookCallType;\n  id: WebhookCallIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WebhookCallAttributes {\n  /**\n   * The subject of webhook triggering\n   */\n  entity_type: "item" | "item_type" | "upload";\n  /**\n   * The event that triggers the webhook call\n   */\n  event_type: "create" | "update" | "delete" | "publish" | "unpublish";\n  /**\n   * The moment the call occurred\n   */\n  created_at: string;\n  /**\n   * The url that the webhook called\n   */\n  request_url: string;\n  /**\n   * The request\'s headers\n   */\n  request_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the request\n   */\n  request_payload: string;\n  /**\n   * The status of the response\n   */\n  response_status: number | null;\n  /**\n   * The response\'s headers\n   */\n  response_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the response\n   */\n  response_payload: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface WebhookCallRelationships {\n  webhook: WebhookData;\n}\n\n/**\n * Configuration for different build triggers. You can have different staging and production environments in order to test your site before final deploy\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "build_trigger".\n */\nexport interface BuildTrigger {\n  id: BuildTriggerIdentity;\n  type: BuildTriggerType;\n  /**\n   * Name of the environment\n   */\n  name: string;\n  /**\n   * The deploy adapter\n   */\n  adapter: string;\n  /**\n   * Additional configuration for deploy\n   */\n  adapter_settings: {\n    [k: string]: unknown;\n  };\n  /**\n   * Timestamp of the last deploy\n   */\n  last_build_completed_at: string | null;\n  /**\n   * Status of last deploy\n   */\n  build_status: string;\n  /**\n   * Unique token of the webhook\n   */\n  webhook_token?: string;\n  /**\n   * Notification webhook URL\n   */\n  webhook_url: string;\n  /**\n   * Status of site scraper\n   */\n  indexing_status: string;\n  /**\n   * Public url of the site\n   */\n  frontend_url: string | null;\n  /**\n   * Deploy on scheduled publication\n   */\n  autotrigger_on_scheduled_publications: boolean;\n  /**\n   * Enable scraper on the site\n   */\n  indexing_enabled: boolean;\n}\nexport type BuildTriggerSelfTargetSchema = BuildTrigger;\nexport type BuildTriggerCreateTargetSchema = BuildTrigger;\nexport type BuildTriggerUpdateTargetSchema = BuildTrigger;\nexport type BuildTriggerDestroyTargetSchema = BuildTrigger;\n/**\n * JSON API attributes\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface BuildTriggerAttributes {\n  /**\n   * Name of the environment\n   */\n  name: string;\n  /**\n   * The deploy adapter\n   */\n  adapter: string;\n  /**\n   * Additional configuration for deploy\n   */\n  adapter_settings: {\n    [k: string]: unknown;\n  };\n  /**\n   * Timestamp of the last deploy\n   */\n  last_build_completed_at: string | null;\n  /**\n   * Status of last deploy\n   */\n  build_status: string;\n  /**\n   * Unique token of the webhook\n   */\n  webhook_token?: string;\n  /**\n   * Notification webhook URL\n   */\n  webhook_url: string;\n  /**\n   * Status of site scraper\n   */\n  indexing_status: string;\n  /**\n   * Public url of the site\n   */\n  frontend_url: string | null;\n  /**\n   * Deploy on scheduled publication\n   */\n  autotrigger_on_scheduled_publications: boolean;\n  /**\n   * Enable scraper on the site\n   */\n  indexing_enabled: boolean;\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface BuildTriggerCreateSchema {\n  type?: BuildTriggerType;\n  /**\n   * Name of the environment\n   */\n  name: string;\n  /**\n   * Unique token of the webhook\n   */\n  webhook_token?: string;\n  /**\n   * The deploy adapter\n   */\n  adapter: string;\n  /**\n   * Enable scraper on the site\n   */\n  indexing_enabled: boolean;\n  /**\n   * Public url of the site\n   */\n  frontend_url: string | null;\n  /**\n   * Deploy on scheduled publication\n   */\n  autotrigger_on_scheduled_publications: boolean;\n  /**\n   * Additional configuration for deploy\n   */\n  adapter_settings: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface BuildTriggerUpdateSchema {\n  id?: BuildTriggerIdentity;\n  type?: BuildTriggerType;\n  /**\n   * Name of the environment\n   */\n  name?: string;\n  /**\n   * The deploy adapter\n   */\n  adapter?: string;\n  /**\n   * Enable scraper on the site\n   */\n  indexing_enabled?: boolean;\n  /**\n   * Public url of the site\n   */\n  frontend_url?: string | null;\n  /**\n   * Deploy on scheduled publication\n   */\n  autotrigger_on_scheduled_publications?: boolean;\n  /**\n   * Additional configuration for deploy\n   */\n  adapter_settings?: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * In DatoCMS you can create filters to help you (and other editors) quickly search for records\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_type_filter".\n */\nexport interface ItemTypeFilter {\n  id: ItemTypeFilterIdentity;\n  type: ItemTypeFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n  item_type: ItemTypeData;\n}\nexport type ItemTypeFilterCreateTargetSchema = ItemTypeFilter;\nexport type ItemTypeFilterUpdateTargetSchema = ItemTypeFilter;\nexport type ItemTypeFilterSelfTargetSchema = ItemTypeFilter;\nexport type ItemTypeFilterDestroyTargetSchema = ItemTypeFilter;\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemTypeFilterData {\n  type: ItemTypeFilterType;\n  id: ItemTypeFilterIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemTypeFilterAttributes {\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemTypeFilterRelationships {\n  item_type: ItemTypeData;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemTypeFilterCreateSchema {\n  type?: ItemTypeFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemTypeFilterUpdateSchema {\n  id?: ItemTypeFilterIdentity;\n  type?: ItemTypeFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared?: boolean;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * In DatoCMS you can create filters to help you (and other editors) quickly search for uploads\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_filter".\n */\nexport interface UploadFilter {\n  id: UploadFilterIdentity;\n  type: UploadFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\nexport type UploadFilterCreateTargetSchema = UploadFilter;\nexport type UploadFilterUpdateTargetSchema = UploadFilter;\nexport type UploadFilterSelfTargetSchema = UploadFilter;\nexport type UploadFilterDestroyTargetSchema = UploadFilter;\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadFilterData {\n  type: UploadFilterType;\n  id: UploadFilterIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadFilterAttributes {\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadFilterCreateSchema {\n  type?: UploadFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UploadFilterUpdateSchema {\n  id?: UploadFilterIdentity;\n  type?: UploadFilterType;\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared?: boolean;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * A DatoCMS administrative area can be accessed by multiple people. Every invitation is linked to a specific Role, which describes what actions it will be able to perform once the user will register.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site_invitation".\n */\nexport interface SiteInvitation {\n  id: SiteInvitationIdentity;\n  type: SiteInvitationType;\n  /**\n   * Email\n   */\n  email: string;\n  role: RoleData;\n}\nexport type SiteInvitationCreateTargetSchema = SiteInvitation;\nexport type SiteInvitationUpdateTargetSchema = SiteInvitation;\nexport type SiteInvitationSelfTargetSchema = SiteInvitation;\nexport type SiteInvitationDestroyTargetSchema = SiteInvitation;\n/**\n * JSON API data\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SiteInvitationData {\n  type: SiteInvitationType;\n  id: SiteInvitationIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SiteInvitationAttributes {\n  /**\n   * Email\n   */\n  email: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SiteInvitationRelationships {\n  role: RoleData;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface SiteInvitationCreateSchema {\n  type?: SiteInvitationType;\n  /**\n   * Email\n   */\n  email: string;\n  role: RoleData;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SiteInvitationUpdateSchema {\n  id?: SiteInvitationIdentity;\n  type?: SiteInvitationType;\n  role?: RoleData;\n}\n\n/**\n * Session track users movements in the administrative area, and allows locking a record when editing it.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "editing_session".\n */\nexport interface EditingSession {\n  id: EditingSessionIdentity;\n  type: EditingSessionType;\n  /**\n   * User entered at\n   */\n  last_activity_at: string | null;\n  /**\n   * User locked record at\n   */\n  locked_at: string | null;\n  active_item: ItemData;\n  active_item_type: ItemTypeData;\n  editor: AccountData | AccessTokenData | UserData;\n}\nexport type EditingSessionUpdateTargetSchema = EditingSession;\nexport type EditingSessionDestroyTargetSchema = EditingSession;\n/**\n * JSON API data\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface EditingSessionData {\n  type: EditingSessionType;\n  id: EditingSessionIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface EditingSessionAttributes {\n  /**\n   * User entered at\n   */\n  last_activity_at: string | null;\n  /**\n   * User locked record at\n   */\n  locked_at: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface EditingSessionRelationships {\n  active_item: ItemData;\n  active_item_type: ItemTypeData;\n  editor: AccountData | AccessTokenData | UserData;\n}\n\n/**\n * A Single Sign-On group exists when a DatoCMS project is connected to an Identity Provider. These groups can be used to link DatoCMS roles to the Identity Provider\'s groups.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_group".\n */\nexport interface SsoGroup {\n  id: SsoGroupIdentity;\n  type: SsoGroupType;\n  /**\n   * Name of the group\n   */\n  name: string;\n  /**\n   * When an user belongs to multiple groups, the role associated to the group with the highest priority will be used\n   */\n  priority: number;\n  role: RoleData;\n  users: SsoUserData[];\n}\nexport type SsoGroupCopyRolesTargetSchema = SsoGroup;\nexport type SsoGroupUpdateTargetSchema = SsoGroup;\nexport type SsoGroupDestroyTargetSchema = SsoGroup;\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoGroupAttributes {\n  /**\n   * Name of the group\n   */\n  name: string;\n  /**\n   * When an user belongs to multiple groups, the role associated to the group with the highest priority will be used\n   */\n  priority: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoGroupRelationships {\n  role: RoleData;\n  users: SsoUserData[];\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SsoGroupUpdateSchema {\n  id?: SsoGroupIdentity;\n  type?: SsoGroupType;\n  /**\n   * When an user belongs to multiple groups, the role associated to the group with the highest priority will be used\n   */\n  priority: number;\n  role: RoleData;\n}\n\n/**\n * Represents the Single Sign-on settings of the current DatoCMS project\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_settings".\n */\nexport interface SsoSettings {\n  id: SsoSettingsIdentity;\n  type: SsoSettingsType;\n  /**\n   * URL of Identity Provider SAML Metadata endpoint\n   */\n  idp_saml_metadata_url: null | string;\n  /**\n   * DatoCMS SCIM base URL\n   */\n  scim_base_url: string;\n  /**\n   * DatoCMS SAML ACS URL\n   */\n  saml_acs_url: string;\n  /**\n   * DatoCMS SAML Metadata URL\n   */\n  sp_saml_metadata_url: string;\n  /**\n   * DatoCMS SAML Base URL\n   */\n  sp_saml_base_url: string;\n  /**\n   * DatoCMS SAML Token\n   */\n  saml_token: string;\n  /**\n   * DatoCMS SCIM API Token\n   */\n  scim_api_token?: string;\n  default_role: null | RoleData;\n}\nexport type SsoSettingsSelfTargetSchema = SsoSettings;\nexport type SsoSettingsUpdateTargetSchema = SsoSettings;\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoSettingsData {\n  type: SsoSettingsType;\n  id: SsoSettingsIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoSettingsAttributes {\n  /**\n   * URL of Identity Provider SAML Metadata endpoint\n   */\n  idp_saml_metadata_url: null | string;\n  /**\n   * DatoCMS SCIM base URL\n   */\n  scim_base_url: string;\n  /**\n   * DatoCMS SAML ACS URL\n   */\n  saml_acs_url: string;\n  /**\n   * DatoCMS SAML Metadata URL\n   */\n  sp_saml_metadata_url: string;\n  /**\n   * DatoCMS SAML Base URL\n   */\n  sp_saml_base_url: string;\n  /**\n   * DatoCMS SAML Token\n   */\n  saml_token: string;\n  /**\n   * DatoCMS SCIM API Token\n   */\n  scim_api_token?: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoSettingsRelationships {\n  default_role: null | RoleData;\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `generate_token.targetSchema` link.\n */\nexport interface SsoSettingsGenerateTokenTargetSchema {\n  id: SsoSettingsIdentity;\n  /**\n   * JSON API type field\n   */\n  type: "sso_token";\n  attributes: {\n    /**\n     * DatoCMS SCIM API Token\n     */\n    scim_api_token: string;\n  };\n  [k: string]: unknown;\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SsoSettingsUpdateSchema {\n  id?: SsoSettingsIdentity;\n  type?: SsoSettingsType;\n  /**\n   * URL of Identity Provider SAML Metadata endpoint\n   */\n  idp_saml_metadata_url?: null | string;\n  /**\n   * The default role assigned to SSO users that do not belong to any SSO group\n   */\n  default_role: {\n    data: RoleData;\n  };\n}\n\n/**\n * Represents the white-label settings of the current DatoCMS project\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "white_label_settings".\n */\nexport interface WhiteLabelSettings {\n  id: WhiteLabelSettingsIdentity;\n  type: WhiteLabelSettingsType;\n  /**\n   * URL of custom I18n messages. The :locale placeholder represents the current DatoCMS UI locale.\n   */\n  custom_i18n_messages_template_url: null | string;\n}\nexport type WhiteLabelSettingsSelfTargetSchema = WhiteLabelSettings;\nexport type WhiteLabelSettingsUpdateTargetSchema = WhiteLabelSettings;\n/**\n * JSON API data\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WhiteLabelSettingsData {\n  type: WhiteLabelSettingsType;\n  id: WhiteLabelSettingsIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WhiteLabelSettingsAttributes {\n  /**\n   * URL of custom I18n messages. The :locale placeholder represents the current DatoCMS UI locale.\n   */\n  custom_i18n_messages_template_url: null | string;\n}\n\n/**\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WhiteLabelSettingsUpdateSchema {\n  id?: WhiteLabelSettingsIdentity;\n  type?: WhiteLabelSettingsType;\n  /**\n   * URL of custom I18n messages. The :locale placeholder represents the current DatoCMS UI locale.\n   */\n  custom_i18n_messages_template_url?: null | string;\n}\n\n/**\n * Info that can be accessed by unauthorized users\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "public_info".\n */\nexport interface PublicInfo {\n  id: PublicInfoIdentity;\n  type: PublicInfoType;\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Specifies the Single Sign-on URL to reach\n   */\n  sso_saml_init_url: null | string;\n  /**\n   * Specifies the logo url if present\n   */\n  logo_url: null | string;\n  /**\n   * Specifies whether the project is in white-label mode\n   */\n  white_label: boolean;\n  /**\n   * Template URL to download specific I18n messages (for white-label projects only)\n   */\n  custom_i18n_messages_template_url: null | string;\n  /**\n   * Specifies the color-scheme for the project\n   */\n  theme: {\n    primary_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Additional information (only returned on authenticated requests)\n   */\n  extras: null | {\n    blocks_depth: number;\n    blocks_per_item: number;\n    [k: string]: unknown;\n  };\n}\nexport type PublicInfoSelfTargetSchema = PublicInfo;\n/**\n * JSON API data\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface PublicInfoData {\n  type: PublicInfoType;\n  id: PublicInfoIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface PublicInfoAttributes {\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Specifies the Single Sign-on URL to reach\n   */\n  sso_saml_init_url: null | string;\n  /**\n   * Specifies the logo url if present\n   */\n  logo_url: null | string;\n  /**\n   * Specifies whether the project is in white-label mode\n   */\n  white_label: boolean;\n  /**\n   * Template URL to download specific I18n messages (for white-label projects only)\n   */\n  custom_i18n_messages_template_url: null | string;\n  /**\n   * Specifies the color-scheme for the project\n   */\n  theme: {\n    primary_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Additional information (only returned on authenticated requests)\n   */\n  extras: null | {\n    blocks_depth: number;\n    blocks_per_item: number;\n    [k: string]: unknown;\n  };\n}\n\n/**\n * DatoCMS resources usage organized by day\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "daily_usage".\n */\nexport interface DailyUsage {\n  id: DailyUsageIdentity;\n  type: DailyUsageType;\n  /**\n   * The date the data are referring to\n   */\n  date: string;\n  /**\n   * Number of API calls to content delivery API\n   */\n  cda_api_calls: number;\n  /**\n   * Number of API calls to content management API\n   */\n  cma_api_calls: number;\n  /**\n   * Content delivery API traffic\n   */\n  cda_traffic_bytes: number;\n  /**\n   * Uploads requests traffic\n   */\n  assets_traffic_bytes: number;\n  /**\n   * Video streaming seconds\n   */\n  mux_delivered_seconds: number;\n}\nexport type DailyUsageInstancesTargetSchema = DailyUsage;\n/**\n * JSON API data\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface DailyUsageData {\n  type: DailyUsageType;\n  id: DailyUsageIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface DailyUsageAttributes {\n  /**\n   * The date the data are referring to\n   */\n  date: string;\n  /**\n   * Number of API calls to content delivery API\n   */\n  cda_api_calls: number;\n  /**\n   * Number of API calls to content management API\n   */\n  cma_api_calls: number;\n  /**\n   * Content delivery API traffic\n   */\n  cda_traffic_bytes: number;\n  /**\n   * Uploads requests traffic\n   */\n  assets_traffic_bytes: number;\n  /**\n   * Video streaming seconds\n   */\n  mux_delivered_seconds: number;\n}\n\n/**\n * You can use counters to analyze your project\'s data consumption over a period of time. Counters are especially useful if your project is exceeding its API calls/traffic quota limits, to better understand where and how requests are originating. Counters are updated every minute, so you can debug in real-time the results of your changes.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "usage_counter".\n */\nexport interface UsageCounter {\n  id: UsageCounterIdentity;\n  type: UsageCounterType;\n  result: {\n    /**\n     * Occurrence\n     */\n    value: string;\n    /**\n     * Counter for the specified occurrence\n     */\n    counter: number;\n  }[];\n}\nexport type UsageCounterSelfTargetSchema = UsageCounter;\n/**\n * JSON API data\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UsageCounterData {\n  type: UsageCounterType;\n  id: UsageCounterIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UsageCounterAttributes {\n  result: {\n    /**\n     * Occurrence\n     */\n    value: string;\n    /**\n     * Counter for the specified occurrence\n     */\n    counter: number;\n  }[];\n}\n\n/**\n * All the project\'s upload tags\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_tag".\n */\nexport interface UploadTag {\n  id: UploadTagIdentity;\n  type: UploadTagType;\n  /**\n   * The tag name\n   */\n  name: string;\n}\nexport type UploadTagCreateTargetSchema = UploadTag;\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadTagData {\n  type: UploadTagType;\n  id: UploadTagIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadTagAttributes {\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadTagCreateSchema {\n  type?: UploadTagType;\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * All the site\'s upload automatically generated tags\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_smart_tag".\n */\nexport interface UploadSmartTag {\n  id: UploadSmartTagIdentity;\n  type: UploadSmartTagType;\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadSmartTagData {\n  type: UploadSmartTagType;\n  id: UploadSmartTagIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadSmartTagAttributes {\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * A site represents a specific DatoCMS administrative area\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site".\n */\nexport interface Site {\n  id: SiteIdentity;\n  type: SiteType;\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Administrative area custom domain\n   */\n  domain: string | null;\n  /**\n   * Google API Key to be used by the LatLon widget\n   */\n  google_maps_api_token: string | null;\n  /**\n   * Imgix host\n   */\n  imgix_host: string | null;\n  /**\n   * DatoCMS internal domain for the administrative area\n   */\n  internal_domain: string | null;\n  /**\n   * Available locales\n   */\n  locales: [string, ...string[]];\n  /**\n   * Site default timezone\n   */\n  timezone: string;\n  /**\n   * Whether the website needs to be indexed by search engines or not\n   */\n  no_index: boolean;\n  /**\n   * The upload id for the favicon\n   */\n  favicon: string | null;\n  /**\n   * Specifies the last time when a change of data occurred\n   */\n  last_data_change_at: null | string;\n  /**\n   * Frontend website url\n   */\n  frontend_url: string | null;\n  /**\n   * Specifies whether all users of this site need to authenticate using two-factor authentication\n   */\n  require_2fa: boolean;\n  /**\n   * Specifies whether you want IPs to be tracked in the Project usages section\n   */\n  ip_tracking_enabled: boolean;\n  /**\n   * Specifies the theme to use in administrative area\n   */\n  theme: {\n    primary_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    /**\n     * The site logo\n     */\n    logo: string | null;\n    [k: string]: unknown;\n  };\n  /**\n   * Specifies default global settings\n   */\n  global_seo: {\n    /**\n     * Site name, used in social sharing\n     */\n    site_name?: string;\n    fallback_seo?: {\n      title: string;\n      description: string;\n      /**\n       * The id of the image\n       */\n      image: null | string;\n      /**\n       * Determines how a Twitter link preview is shown\n       */\n      twitter_card?: null | ("summary" | "summary_large_image");\n      [k: string]: unknown;\n    };\n    /**\n     * Title meta tag suffix\n     */\n    title_suffix?: null | string;\n    /**\n     * URL of facebook page\n     */\n    facebook_page_url?: null | string;\n    /**\n     * Twitter account associated to website\n     */\n    twitter_account?: null | string;\n    [k: string]: unknown;\n  } | null;\n  account: AccountData;\n  /**\n   * The list of build trigger\n   */\n  build_triggers?: BuildTriggerData[];\n  /**\n   * The list of site menu items\n   */\n  menu_items: MenuItemData[];\n  /**\n   * The list of site SSO users\n   */\n  sso_users: SsoUserData[];\n  /**\n   * The list of site users\n   */\n  users: UserData[];\n  /**\n   * The list of site item types\n   */\n  item_types: ItemTypeData[];\n  /**\n   * Specifies the default role for newly created identity providers users\n   */\n  sso_default_role?: RoleData[];\n  /**\n   * The list of site roles\n   */\n  roles: RoleData[];\n}\nexport type SiteSelfTargetSchema = Site;\nexport type SiteUpdateJobSchema = Site;\n/**\n * JSON API data\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SiteData {\n  type: SiteType;\n  id: SiteIdentity;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SiteAttributes {\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Administrative area custom domain\n   */\n  domain: string | null;\n  /**\n   * Google API Key to be used by the LatLon widget\n   */\n  google_maps_api_token: string | null;\n  /**\n   * Imgix host\n   */\n  imgix_host: string | null;\n  /**\n   * DatoCMS internal domain for the administrative area\n   */\n  internal_domain: string | null;\n  /**\n   * Available locales\n   */\n  locales: [string, ...string[]];\n  /**\n   * Site default timezone\n   */\n  timezone: string;\n  /**\n   * Whether the website needs to be indexed by search engines or not\n   */\n  no_index: boolean;\n  /**\n   * The upload id for the favicon\n   */\n  favicon: string | null;\n  /**\n   * Specifies the last time when a change of data occurred\n   */\n  last_data_change_at: null | string;\n  /**\n   * Frontend website url\n   */\n  frontend_url: string | null;\n  /**\n   * Specifies whether all users of this site need to authenticate using two-factor authentication\n   */\n  require_2fa: boolean;\n  /**\n   * Specifies whether you want IPs to be tracked in the Project usages section\n   */\n  ip_tracking_enabled: boolean;\n  /**\n   * Specifies the theme to use in administrative area\n   */\n  theme: {\n    primary_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    /**\n     * The site logo\n     */\n    logo: string | null;\n    [k: string]: unknown;\n  };\n  /**\n   * Specifies default global settings\n   */\n  global_seo: {\n    /**\n     * Site name, used in social sharing\n     */\n    site_name?: string;\n    fallback_seo?: {\n      title: string;\n      description: string;\n      /**\n       * The id of the image\n       */\n      image: null | string;\n      /**\n       * Determines how a Twitter link preview is shown\n       */\n      twitter_card?: null | ("summary" | "summary_large_image");\n      [k: string]: unknown;\n    };\n    /**\n     * Title meta tag suffix\n     */\n    title_suffix?: null | string;\n    /**\n     * URL of facebook page\n     */\n    facebook_page_url?: null | string;\n    /**\n     * Twitter account associated to website\n     */\n    twitter_account?: null | string;\n    [k: string]: unknown;\n  } | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SiteRelationships {\n  account: AccountData;\n  /**\n   * The list of build trigger\n   */\n  build_triggers?: BuildTriggerData[];\n  /**\n   * The list of site menu items\n   */\n  menu_items: MenuItemData[];\n  /**\n   * The list of site SSO users\n   */\n  sso_users: SsoUserData[];\n  /**\n   * The list of site users\n   */\n  users: UserData[];\n  /**\n   * The list of site item types\n   */\n  item_types: ItemTypeData[];\n  /**\n   * Specifies the default role for newly created identity providers users\n   */\n  sso_default_role?: RoleData[];\n  /**\n   * The list of site roles\n   */\n  roles: RoleData[];\n}\n\n/**\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SiteUpdateSchema {\n  id?: SiteIdentity;\n  type?: SiteType;\n  /**\n   * Whether the website needs to be indexed by search engines or not\n   */\n  no_index?: boolean;\n  /**\n   * The upload id for the favicon\n   */\n  favicon?: string | null;\n  /**\n   * Specifies default global settings\n   */\n  global_seo?: {\n    /**\n     * Site name, used in social sharing\n     */\n    site_name?: string;\n    fallback_seo?: {\n      title: string;\n      description: string;\n      /**\n       * The id of the image\n       */\n      image: null | string;\n      /**\n       * Determines how a Twitter link preview is shown\n       */\n      twitter_card?: null | ("summary" | "summary_large_image");\n      [k: string]: unknown;\n    };\n    /**\n     * Title meta tag suffix\n     */\n    title_suffix?: null | string;\n    /**\n     * URL of facebook page\n     */\n    facebook_page_url?: null | string;\n    /**\n     * Twitter account associated to website\n     */\n    twitter_account?: null | string;\n    [k: string]: unknown;\n  } | null;\n  /**\n   * Site name\n   */\n  name?: string;\n  /**\n   * Specifies the theme to use in administrative area\n   */\n  theme?: {\n    primary_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    /**\n     * The site logo\n     */\n    logo: string | null;\n    [k: string]: unknown;\n  };\n  /**\n   * Available locales\n   */\n  locales?: [string, ...string[]];\n  /**\n   * Site default timezone\n   */\n  timezone?: string;\n  /**\n   * Specifies whether all users of this site need to authenticate using two-factor authentication\n   */\n  require_2fa?: boolean;\n  /**\n   * Specifies whether you want IPs to be tracked in the Project usages section\n   */\n  ip_tracking_enabled?: boolean;\n  sso_default_role?: {\n    data: RoleData;\n  };\n}\n\n/**\n * Through workflows it is possible to set up a precise state machine able to bring a draft content up to the final publication (and beyond), through a series of intermediate, fully customizable approval steps.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "workflow".\n */\nexport interface Workflow {\n  id: WorkflowIdentity;\n  type: WorkflowType;\n  /**\n   * The name of the workflow\n   */\n  name: string;\n  /**\n   * The stages of the workflow\n   */\n  stages: [\n    {\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    },\n    ...{\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    }[]\n  ];\n}\nexport type WorkflowCreateTargetSchema = Workflow;\nexport type WorkflowUpdateTargetSchema = Workflow;\nexport type WorkflowSelfTargetSchema = Workflow;\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WorkflowAttributes {\n  /**\n   * The name of the workflow\n   */\n  name: string;\n  /**\n   * The stages of the workflow\n   */\n  stages: [\n    {\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    },\n    ...{\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    }[]\n  ];\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface WorkflowCreateSchema {\n  id?: WorkflowIdentity;\n  type?: WorkflowType;\n  /**\n   * The name of the workflow\n   */\n  name: string;\n  /**\n   * The stages of the workflow\n   */\n  stages: [\n    {\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    },\n    ...{\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    }[]\n  ];\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WorkflowUpdateSchema {\n  id?: WorkflowIdentity;\n  type?: WorkflowType;\n  /**\n   * The name of the workflow\n   */\n  name?: string;\n  /**\n   * The stages of the workflow\n   */\n  stages?: [\n    {\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    },\n    ...{\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    }[]\n  ];\n}\n',
  typings:
    '/* tslint:disable */\n/**\n * This file was automatically generated by hyperschema-to-ts: DO NOT MODIFY IT BY HAND.\n */\n\n/**\n * JSON API type field\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type RoleType = "role";\n/**\n * ID of role\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type RoleIdentity = string;\n/**\n * ID of item type\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemTypeIdentity = string;\n/**\n * ID of workflow\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WorkflowIdentity = string;\n/**\n * ID of environment. Can only contain lowercase letters, numbers and dashes\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type EnvironmentIdentity = string;\n/**\n * ID of build_trigger\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type BuildTriggerIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UserType = "user";\n/**\n * ID of collaborator\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UserIdentity = string;\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type UserDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted user. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted user. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoUserType = "sso_user";\n/**\n * ID of user\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoUserIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoGroupType = "sso_group";\n/**\n * ID of group\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoGroupIdentity = string;\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type SsoUserDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted SSO user. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted SSO user. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AuditLogEventType = "audit_log_event";\n/**\n * ULID of event (https://github.com/ulid/spec)\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AuditLogEventIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AccountType = "account";\n/**\n * ID of account\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AccountIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SitePlanType = "site_plan";\n/**\n * ID of plan\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SitePlanIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type MenuItemType = "menu_item";\n/**\n * ID of menu item\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type MenuItemIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemTypeType = "item_type";\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type MenuItemInstancesHrefSchema = {\n  filter?: {\n    /**\n     * IDs to fetch, comma separated\n     */\n    ids: string;\n  };\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemType1 = "item";\n/**\n * ID of record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type FieldType = "field";\n/**\n * ID of field\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type FieldIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WorkflowType = "workflow";\n/**\n * JSON API type field\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type JobType = "job";\n/**\n * ID of job\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type JobIdentity = string;\n/**\n * JSON API type fieldset\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type FieldsetType = "fieldset";\n/**\n * ID of fieldset\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type FieldsetIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SessionType = "session";\n/**\n * JSON web token for the session\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SessionIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type AccessTokenType = "access_token";\n/**\n * ID of access_token\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type AccessTokenIdentity = string;\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `destroy.hrefSchema` link.\n */\nexport type AccessTokenDestroyHrefSchema = {\n  /**\n   * New owner for resources previously owned by the deleted access token. This argument specifies the new owner type.\n   */\n  destination_user_type?: "account" | "user" | "access_token" | "sso_user";\n  /**\n   * New owner for resources previously owned by the deleted access token. This argument specifies the new owner ID.\n   */\n  destination_user_id?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type PluginType = "plugin";\n/**\n * ID of plugin\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type PluginIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type JobResultType = "job_result";\n/**\n * ID of job result\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type JobResultIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SubscriptionLimitType = "subscription_limit";\n/**\n * ID of limit\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SubscriptionLimitIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SubscriptionFeatureType = "subscription_feature";\n/**\n * ID of feature\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SubscriptionFeatureIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type BuildEventType = "build_event";\n/**\n * ID of menu item\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type BuildEventIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type BuildTriggerType = "build_trigger";\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type ItemInstancesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Attributes to filter records\n   */\n  filter?: {\n    /**\n     * Record (or block record) IDs to fetch, comma separated. If you use this filter, you _must not_ use `filter[type]` or `filter[fields]`\n     */\n    ids?: string;\n    /**\n     * Model ID or `api_key` to filter. If you use this filter, you _must not_ use `filter[ids]`. Comma separated values are accepted, but you _must not_ use `filter[fields]` in this case\n     */\n    type?: string;\n    /**\n     * Textual query to match. You _must not_ use `filter[ids]`. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    query?: string;\n    /**\n     * Same as [GraphQL API records filters](/docs/content-delivery-api/filtering-records). Use snake_case for fields names. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    fields?: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * When `filter[query]` or `field[fields]` is defined, filter by this locale. Default: environment\'s main locale\n   */\n  locale?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first record to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of records to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  /**\n   * Fields used to order results. You _must_ specify also `filter[type]` with one element only to be able use this option. Format: `<field_name>_<DIRECTION(ASC|DESC)>`. You can pass multiple comma separated rules\n   */\n  order_by?: string;\n  /**\n   * Whether you want the currently published versions (`published`, default) of your records, or the latest available (`current`)\n   */\n  version?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `references.hrefSchema` link.\n */\nexport type ItemReferencesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields, return full payload for nested blocks instead of IDs\n   */\n  nested?: "true";\n  /**\n   * Retrieve only the selected type of version that is linked to the record; current, published or both\n   */\n  version?: null | ("current" | "published" | "published-or-current");\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `self.hrefSchema` link.\n */\nexport type ItemSelfHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Whether you want the currently published versions (`published`, default) of your records, or the latest available (`current`)\n   */\n  version?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.hrefSchema` link.\n */\nexport type ItemBatchDestroyHrefSchema = {\n  /**\n   * IDs of records to delete, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.hrefSchema` link.\n */\nexport type ItemBatchPublishHrefSchema = {\n  /**\n   * IDs of records to publish, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.hrefSchema` link.\n */\nexport type ItemBatchUnpublishHrefSchema = {\n  /**\n   * IDs of records to unpublish, comma separated\n   */\n  "filter[ids]": string;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `publish.hrefSchema` link.\n */\nexport type ItemPublishHrefSchema = {\n  /**\n   * If the record references other draft records, force a recursive publication\n   */\n  recursive?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `unpublish.hrefSchema` link.\n */\nexport type ItemUnpublishHrefSchema = {\n  /**\n   * If the record is referenced by other published records, unpublish them recursively\n   */\n  recursive?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemVersionType = "item_version";\n/**\n * ID of record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemVersionIdentity = string;\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type ItemVersionInstancesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields. If set, returns full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first element to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of elements to fetch  (defaults to 15, maximum is 50)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * JSON API type upload\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadType = "upload";\n/**\n * ID of upload\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadIdentity = string;\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadInstancesHrefSchema = {\n  /**\n   * Attributes to filter uploads\n   */\n  filter?: {\n    /**\n     * IDs to fetch, comma separated\n     */\n    ids?: string;\n    /**\n     * Textual query to match. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    query?: string;\n    /**\n     * Same as [GraphQL API uploads filters](/docs/content-delivery-api/filtering-uploads). Use snake_case for fields names. If `locale` is defined, search within that locale. Otherwise environment\'s main locale will be used.\n     */\n    fields?: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * When `filter[query]` or `field[fields]` is defined, filter by this locale. Default: environment\'s main locale\n   */\n  locale?: string;\n  /**\n   * Fields used to order results. Format: `<field_name>_<DIRECTION(ASC|DESC)>`. You can pass multiple comma separated rules.\n   */\n  order_by?: string;\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first upload to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of uplads to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.hrefSchema` link.\n */\nexport type UploadBatchAddTagsHrefSchema = {\n  /**\n   * IDs to tag, comma separated\n   */\n  "filter[ids]"?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.hrefSchema` link.\n */\nexport type UploadBatchDestroyHrefSchema = {\n  /**\n   * IDs to destroy, comma separated\n   */\n  "filter[ids]"?: string;\n  [k: string]: unknown;\n};\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `references.hrefSchema` link.\n */\nexport type UploadReferencesHrefSchema = {\n  /**\n   * For Modular Content fields and Structured Text fields, return full payload for nested blocks instead of IDs\n   */\n  nested?: string;\n  /**\n   * Retrieve only the selected type of version that is linked to the upload; current, published or both\n   */\n  version?: null | ("current" | "published" | "published-or-current");\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadRequestType = "upload_request";\n/**\n * The S3 path where the file will be stored\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadRequestIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ScheduledPublicationType = "scheduled_publication";\n/**\n * ID of scheduled_publication\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ScheduledPublicationIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ScheduledUnpublishingType = "scheduled_unpublishing";\n/**\n * ID of scheduled_unpublishing\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ScheduledUnpublishingIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SearchResultType = "search_result";\n/**\n * ID of result\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SearchResultIdentity = string;\n/**\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type SearchResultInstancesHrefSchema = {\n  /**\n   * The query string to search\n   */\n  q: string;\n  /**\n   * The build trigger ID on which the search will be performed\n   */\n  build_trigger_id?: string;\n  /**\n   * Restrict the search on one locale\n   */\n  locale?: string;\n  /**\n   * Maximum number of results to return (defaults to 20, maximum is 100)\n   */\n  limit?: number;\n  /**\n   * Number of records to offset for the search\n   */\n  offset?: string;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type EnvironmentType = "environment";\n/**\n * JSON API type field\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type MaintenanceModeType = "maintenance_mode";\n/**\n * ID of maintenance_mode\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type MaintenanceModeIdentity = string;\n/**\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `activate.hrefSchema` link.\n */\nexport type MaintenanceModeActivateHrefSchema = {\n  /**\n   * Force the activation, even if there are collaborators editing some records.\n   */\n  force?: boolean;\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WebhookType = "webhook";\n/**\n * ID of webhook\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WebhookIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WebhookCallType = "webhook_call";\n/**\n * ID of webhook call\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WebhookCallIdentity = string;\n/**\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type WebhookCallInstancesHrefSchema = {\n  /**\n   * Params to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first element to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of elements to fetch (defaults to 30, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type ItemTypeFilterType = "item_type_filter";\n/**\n * ID of filter\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type ItemTypeFilterIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadFilterType = "upload_filter";\n/**\n * ID of filter\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadFilterIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SiteInvitationType = "site_invitation";\n/**\n * ID of invitation\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SiteInvitationIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type EditingSessionType = "editing_session";\n/**\n * UUID of presence\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type EditingSessionIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SsoSettingsType = "sso_settings";\n/**\n * ID\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SsoSettingsIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type WhiteLabelSettingsType = "white_label_settings";\n/**\n * ID\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type WhiteLabelSettingsIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type PublicInfoType = "public_info";\n/**\n * ID of site\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type PublicInfoIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type DailyUsageType = "daily_usage";\n/**\n * ID of site\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type DailyUsageIdentity = string;\n/**\n * JSON API type field\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UsageCounterType = "usage_counter";\n/**\n * Name of the counter\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UsageCounterIdentity =\n  | "assets_path_bytes"\n  | "assets_referrer_bytes"\n  | "assets_ip_bytes"\n  | "assets_full_path_bytes"\n  | "assets_path_requests"\n  | "assets_full_path_requests"\n  | "cda_access_token_id_bytes"\n  | "cda_access_token_id_requests"\n  | "cda_referrer_bytes"\n  | "cda_referrer_requests"\n  | "cda_ip_bytes"\n  | "cda_ip_requests"\n  | "cma_endpoint_bytes"\n  | "cma_endpoint_requests"\n  | "cma_user_bytes"\n  | "cma_user_requests"\n  | "cma_ip_bytes"\n  | "cma_ip_requests"\n  | "video_path_seconds";\n/**\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `self.hrefSchema` link.\n */\nexport type UsageCounterSelfHrefSchema = {\n  /**\n   * The time period upon which counters will be returned\n   */\n  period?: "today" | "current_month" | "last_month";\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadTagType = "upload_tag";\n/**\n * ID of upload tag\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadTagIdentity = string;\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadTagInstancesHrefSchema = {\n  /**\n   * Attributes to filter tags\n   */\n  filter?: {\n    /**\n     * Textual query to match.\n     */\n    query?: string;\n    [k: string]: unknown;\n  };\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first tag to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of tags to fetch (defaults to 50, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type UploadSmartTagType = "upload_smart_tag";\n/**\n * ID of upload tag\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type UploadSmartTagIdentity = string;\n/**\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `instances.hrefSchema` link.\n */\nexport type UploadSmartTagInstancesHrefSchema = {\n  /**\n   * Attributes to filter tags\n   */\n  filter?: {\n    /**\n     * Textual query to match.\n     */\n    query?: string;\n    [k: string]: unknown;\n  };\n  /**\n   * Attributes to manage results pagination\n   */\n  page?: {\n    /**\n     * Index of first tag to fetch (defaults to 0)\n     */\n    offset?: number;\n    /**\n     * Number of tags to fetch (defaults to 50, maximum is 500)\n     */\n    limit?: number;\n    [k: string]: unknown;\n  };\n  [k: string]: unknown;\n};\n/**\n * JSON API type field\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "type".\n */\nexport type SiteType = "site";\n/**\n * ID of site\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "identity".\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "id".\n */\nexport type SiteIdentity = string;\n\nexport interface DatoApi {\n  role?: Role;\n  user?: User;\n  sso_user?: SsoUser;\n  audit_log_event?: AuditLogEvent;\n  account?: Account;\n  site_plan?: SitePlan;\n  menu_item?: MenuItem;\n  item_type?: ItemType;\n  field?: Field;\n  fieldset?: Fieldset;\n  job?: Job;\n  session?: Session;\n  access_token?: AccessToken;\n  plugin?: Plugin;\n  job_result?: JobResult;\n  subscription_limit?: SubscriptionLimit;\n  subscription_feature?: SubscriptionFeature;\n  build_event?: BuildEvent;\n  item?: Item;\n  item_version?: ItemVersion;\n  upload?: Upload;\n  upload_request?: UploadRequest;\n  scheduled_publication?: ScheduledPublication;\n  scheduled_unpublishing?: ScheduledUnpublishing;\n  search_result?: SearchResult;\n  environment?: Environment;\n  maintenance_mode?: MaintenanceMode;\n  webhook?: Webhook;\n  webhook_call?: WebhookCall;\n  build_trigger?: BuildTrigger;\n  item_type_filter?: ItemTypeFilter;\n  upload_filter?: UploadFilter;\n  site_invitation?: SiteInvitation;\n  editing_session?: EditingSession;\n  sso_group?: SsoGroup;\n  sso_settings?: SsoSettings;\n  white_label_settings?: WhiteLabelSettings;\n  public_info?: PublicInfo;\n  daily_usage?: DailyUsage;\n  usage_counter?: UsageCounter;\n  upload_tag?: UploadTag;\n  upload_smart_tag?: UploadSmartTag;\n  site?: Site;\n  workflow?: Workflow;\n  [k: string]: unknown;\n}\n\n/**\n * A Role represents a specific set of actions an editor (or an API token) can perform on your administrative area.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "role".\n */\nexport interface Role {\n  type: RoleType;\n  id: RoleIdentity;\n  attributes: RoleAttributes;\n  relationships: RoleRelationships;\n  meta: RoleMeta;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface RoleAttributes {\n  /**\n   * The name of the role\n   */\n  name: string;\n  /**\n   * Can edit favicon, global SEO settings and no-index policy\n   */\n  can_edit_favicon: boolean;\n  /**\n   * Can change project name and 2FA settings\n   */\n  can_edit_site: boolean;\n  /**\n   * Can create/edit models and plugins\n   */\n  can_edit_schema: boolean;\n  /**\n   * Can customize content navigation bar\n   */\n  can_manage_menu: boolean;\n  /**\n   * Can change locales, timezone and UI theme\n   */\n  can_edit_environment: boolean;\n  /**\n   * Can promote environments to primary and manage maintenance mode\n   */\n  can_promote_environments: boolean;\n  /**\n   * Specifies the environments the user can access\n   */\n  environments_access: "all" | "primary_only" | "sandbox_only";\n  /**\n   * Can create/edit roles and invite/remove collaborators\n   */\n  can_manage_users: boolean;\n  /**\n   * Can create/edit shared filters (both for models and the media area)\n   */\n  can_manage_shared_filters?: boolean;\n  /**\n   * Can create/edit Build triggers\n   */\n  can_manage_build_triggers: boolean;\n  /**\n   * Can create/edit webhooks\n   */\n  can_manage_webhooks: boolean;\n  /**\n   * Can create/delete sandbox environments and promote them to primary environment\n   */\n  can_manage_environments: boolean;\n  /**\n   * Can manage Single Sign-On settings\n   */\n  can_manage_sso: boolean;\n  /**\n   * Can access Audit Log\n   */\n  can_access_audit_log: boolean;\n  /**\n   * Can create/edit workflows\n   */\n  can_manage_workflows: boolean;\n  /**\n   * Can manage API tokens\n   */\n  can_manage_access_tokens: boolean;\n  /**\n   * Can perform Site Search API calls\n   */\n  can_perform_site_search: boolean;\n  /**\n   * Can access the build events log\n   */\n  can_access_build_events_log: boolean;\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_item_type_permissions: {\n    item_type?: ItemTypeIdentity | null;\n    workflow?: WorkflowIdentity | null;\n    on_stage?: null | string;\n    to_stage?: null | string;\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action:\n      | "all"\n      | "read"\n      | "update"\n      | "create"\n      | "duplicate"\n      | "delete"\n      | "publish"\n      | "edit_creator"\n      | "take_over"\n      | "move_to_stage";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed actions on a model (or all) for a role\n   */\n  positive_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Prohibited actions on a model (or all) for a role\n   */\n  negative_upload_permissions: {\n    environment: EnvironmentIdentity;\n    /**\n     * Permitted action\n     */\n    action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n    /**\n     * Permitted creator\n     */\n    on_creator?: "anyone" | "self" | "role" | null;\n    /**\n     * Permitted content scope\n     */\n    localization_scope?: "all" | "localized" | "not_localized" | null;\n    /**\n     * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n     */\n    locale?: string | null;\n  }[];\n  /**\n   * Allowed build triggers for a role\n   */\n  positive_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n  /**\n   * Prohibited build triggers for a role\n   */\n  negative_build_trigger_permissions: {\n    build_trigger?: BuildTriggerIdentity | null;\n  }[];\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface RoleRelationships {\n  /**\n   * The roles from which this role inherits permissions\n   */\n  inherits_permissions_from: {\n    data: RoleData[];\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface RoleData {\n  type: RoleType;\n  id: RoleIdentity;\n}\n\n/**\n * Meta information regarding the record\n *\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface RoleMeta {\n  /**\n   * The final set of permissions considering also inherited roles\n   */\n  final_permissions: {\n    /**\n     * Can edit favicon, global SEO settings and no-index policy\n     */\n    can_edit_favicon: boolean;\n    /**\n     * Can change project name and 2FA settings\n     */\n    can_edit_site: boolean;\n    /**\n     * Can create/edit models and plugins\n     */\n    can_edit_schema: boolean;\n    /**\n     * Can customize content navigation bar\n     */\n    can_manage_menu: boolean;\n    /**\n     * Can change locales, timezone and UI theme\n     */\n    can_edit_environment: boolean;\n    /**\n     * Can promote environments to primary and manage maintenance mode\n     */\n    can_promote_environments: boolean;\n    /**\n     * Specifies the environments the user can access\n     */\n    environments_access: "all" | "primary_only" | "sandbox_only";\n    /**\n     * Can create/edit roles and invite/remove collaborators\n     */\n    can_manage_users: boolean;\n    /**\n     * Can create/edit shared filters (both for models and the media area)\n     */\n    can_manage_shared_filters?: boolean;\n    /**\n     * Can create/edit Build triggers\n     */\n    can_manage_build_triggers: boolean;\n    /**\n     * Can create/edit webhooks\n     */\n    can_manage_webhooks: boolean;\n    /**\n     * Can create/delete sandbox environments and promote them to primary environment\n     */\n    can_manage_environments: boolean;\n    /**\n     * Can manage Single Sign-On settings\n     */\n    can_manage_sso: boolean;\n    /**\n     * Can access Audit Log\n     */\n    can_access_audit_log: boolean;\n    /**\n     * Can create/edit workflows\n     */\n    can_manage_workflows: boolean;\n    /**\n     * Can manage API tokens\n     */\n    can_manage_access_tokens: boolean;\n    /**\n     * Can perform Site Search API calls\n     */\n    can_perform_site_search: boolean;\n    /**\n     * Can access the build events log\n     */\n    can_access_build_events_log: boolean;\n    /**\n     * Allowed actions on a model (or all) for a role\n     */\n    positive_item_type_permissions: {\n      item_type?: ItemTypeIdentity | null;\n      workflow?: WorkflowIdentity | null;\n      on_stage?: null | string;\n      to_stage?: null | string;\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action:\n        | "all"\n        | "read"\n        | "update"\n        | "create"\n        | "duplicate"\n        | "delete"\n        | "publish"\n        | "edit_creator"\n        | "take_over"\n        | "move_to_stage";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Prohibited actions on a model (or all) for a role\n     */\n    negative_item_type_permissions: {\n      item_type?: ItemTypeIdentity | null;\n      workflow?: WorkflowIdentity | null;\n      on_stage?: null | string;\n      to_stage?: null | string;\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action:\n        | "all"\n        | "read"\n        | "update"\n        | "create"\n        | "duplicate"\n        | "delete"\n        | "publish"\n        | "edit_creator"\n        | "take_over"\n        | "move_to_stage";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Allowed actions on a model (or all) for a role\n     */\n    positive_upload_permissions: {\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Prohibited actions on a model (or all) for a role\n     */\n    negative_upload_permissions: {\n      environment: EnvironmentIdentity;\n      /**\n       * Permitted action\n       */\n      action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n      /**\n       * Permitted creator\n       */\n      on_creator?: "anyone" | "self" | "role" | null;\n      /**\n       * Permitted content scope\n       */\n      localization_scope?: "all" | "localized" | "not_localized" | null;\n      /**\n       * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n       */\n      locale?: string | null;\n    }[];\n    /**\n     * Allowed build triggers for a role\n     */\n    positive_build_trigger_permissions: {\n      build_trigger?: BuildTriggerIdentity | null;\n    }[];\n    /**\n     * Prohibited build triggers for a role\n     */\n    negative_build_trigger_permissions: {\n      build_trigger?: BuildTriggerIdentity | null;\n    }[];\n  };\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface RoleCreateSchema {\n  data: {\n    type: RoleType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The name of the role\n       */\n      name: string;\n      /**\n       * Can edit favicon, global SEO settings and no-index policy\n       */\n      can_edit_favicon?: boolean;\n      /**\n       * Can change project name and 2FA settings\n       */\n      can_edit_site?: boolean;\n      /**\n       * Can create/edit models and plugins\n       */\n      can_edit_schema?: boolean;\n      /**\n       * Can customize content navigation bar\n       */\n      can_manage_menu?: boolean;\n      /**\n       * Can change locales, timezone and UI theme\n       */\n      can_edit_environment?: boolean;\n      /**\n       * Can promote environments to primary and manage maintenance mode\n       */\n      can_promote_environments?: boolean;\n      /**\n       * Specifies the environments the user can access\n       */\n      environments_access?: "all" | "primary_only" | "sandbox_only";\n      /**\n       * Can create/edit roles and invite/remove collaborators\n       */\n      can_manage_users?: boolean;\n      /**\n       * Can create/edit shared filters (both for models and the media area)\n       */\n      can_manage_shared_filters?: boolean;\n      /**\n       * Can create/edit Build triggers\n       */\n      can_manage_build_triggers?: boolean;\n      /**\n       * Can create/edit webhooks\n       */\n      can_manage_webhooks?: boolean;\n      /**\n       * Can create/delete sandbox environments and promote them to primary environment\n       */\n      can_manage_environments?: boolean;\n      /**\n       * Can manage Single Sign-On settings\n       */\n      can_manage_sso?: boolean;\n      /**\n       * Can access Audit Log\n       */\n      can_access_audit_log?: boolean;\n      /**\n       * Can create/edit workflows\n       */\n      can_manage_workflows?: boolean;\n      /**\n       * Can manage API tokens\n       */\n      can_manage_access_tokens?: boolean;\n      /**\n       * Can perform Site Search API calls\n       */\n      can_perform_site_search?: boolean;\n      /**\n       * Can access the build events log\n       */\n      can_access_build_events_log?: boolean;\n      /**\n       * Allowed actions on a model (or all) for a role\n       */\n      positive_item_type_permissions?: {\n        item_type?: ItemTypeIdentity | null;\n        workflow?: WorkflowIdentity | null;\n        on_stage?: null | string;\n        to_stage?: null | string;\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action:\n          | "all"\n          | "read"\n          | "update"\n          | "create"\n          | "duplicate"\n          | "delete"\n          | "publish"\n          | "edit_creator"\n          | "take_over"\n          | "move_to_stage";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Prohibited actions on a model (or all) for a role\n       */\n      negative_item_type_permissions?: {\n        item_type?: ItemTypeIdentity | null;\n        workflow?: WorkflowIdentity | null;\n        on_stage?: null | string;\n        to_stage?: null | string;\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action:\n          | "all"\n          | "read"\n          | "update"\n          | "create"\n          | "duplicate"\n          | "delete"\n          | "publish"\n          | "edit_creator"\n          | "take_over"\n          | "move_to_stage";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Allowed actions on a model (or all) for a role\n       */\n      positive_upload_permissions?: {\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Prohibited actions on a model (or all) for a role\n       */\n      negative_upload_permissions?: {\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Allowed build triggers for a role\n       */\n      positive_build_trigger_permissions?: {\n        build_trigger?: BuildTriggerIdentity | null;\n      }[];\n      /**\n       * Prohibited build triggers for a role\n       */\n      negative_build_trigger_permissions?: {\n        build_trigger?: BuildTriggerIdentity | null;\n      }[];\n    };\n    /**\n     * JSON API links\n     */\n    relationships?: {\n      /**\n       * The roles from which this role inherits permissions\n       */\n      inherits_permissions_from?: {\n        data: RoleData[];\n      };\n    };\n    meta?: RoleMeta;\n  };\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface RoleCreateTargetSchema {\n  data: Role;\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface RoleUpdateSchema {\n  data: {\n    type: RoleType;\n    id: RoleIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes?: {\n      /**\n       * The name of the role\n       */\n      name?: string;\n      /**\n       * Can edit favicon, global SEO settings and no-index policy\n       */\n      can_edit_favicon?: boolean;\n      /**\n       * Can change project name and 2FA settings\n       */\n      can_edit_site?: boolean;\n      /**\n       * Can create/edit models and plugins\n       */\n      can_edit_schema?: boolean;\n      /**\n       * Can customize content navigation bar\n       */\n      can_manage_menu?: boolean;\n      /**\n       * Can change locales, timezone and UI theme\n       */\n      can_edit_environment?: boolean;\n      /**\n       * Can promote environments to primary and manage maintenance mode\n       */\n      can_promote_environments?: boolean;\n      /**\n       * Specifies the environments the user can access\n       */\n      environments_access?: "all" | "primary_only" | "sandbox_only";\n      /**\n       * Can create/edit roles and invite/remove collaborators\n       */\n      can_manage_users?: boolean;\n      /**\n       * Can create/edit shared filters (both for models and the media area)\n       */\n      can_manage_shared_filters?: boolean;\n      /**\n       * Can create/edit Build triggers\n       */\n      can_manage_build_triggers?: boolean;\n      /**\n       * Can create/edit webhooks\n       */\n      can_manage_webhooks?: boolean;\n      /**\n       * Can create/delete sandbox environments and promote them to primary environment\n       */\n      can_manage_environments?: boolean;\n      /**\n       * Can manage Single Sign-On settings\n       */\n      can_manage_sso?: boolean;\n      /**\n       * Can access Audit Log\n       */\n      can_access_audit_log?: boolean;\n      /**\n       * Can create/edit workflows\n       */\n      can_manage_workflows?: boolean;\n      /**\n       * Can manage API tokens\n       */\n      can_manage_access_tokens?: boolean;\n      /**\n       * Can perform Site Search API calls\n       */\n      can_perform_site_search?: boolean;\n      /**\n       * Can access the build events log\n       */\n      can_access_build_events_log?: boolean;\n      /**\n       * Allowed actions on a model (or all) for a role\n       */\n      positive_item_type_permissions?: {\n        item_type?: ItemTypeIdentity | null;\n        workflow?: WorkflowIdentity | null;\n        on_stage?: null | string;\n        to_stage?: null | string;\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action:\n          | "all"\n          | "read"\n          | "update"\n          | "create"\n          | "duplicate"\n          | "delete"\n          | "publish"\n          | "edit_creator"\n          | "take_over"\n          | "move_to_stage";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Prohibited actions on a model (or all) for a role\n       */\n      negative_item_type_permissions?: {\n        item_type?: ItemTypeIdentity | null;\n        workflow?: WorkflowIdentity | null;\n        on_stage?: null | string;\n        to_stage?: null | string;\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action:\n          | "all"\n          | "read"\n          | "update"\n          | "create"\n          | "duplicate"\n          | "delete"\n          | "publish"\n          | "edit_creator"\n          | "take_over"\n          | "move_to_stage";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Allowed actions on a model (or all) for a role\n       */\n      positive_upload_permissions?: {\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Prohibited actions on a model (or all) for a role\n       */\n      negative_upload_permissions?: {\n        environment: EnvironmentIdentity;\n        /**\n         * Permitted action\n         */\n        action: "all" | "read" | "update" | "create" | "delete" | "edit_creator" | "replace_asset";\n        /**\n         * Permitted creator\n         */\n        on_creator?: "anyone" | "self" | "role" | null;\n        /**\n         * Permitted content scope\n         */\n        localization_scope?: "all" | "localized" | "not_localized" | null;\n        /**\n         * Permitted localized content in this locale. Required when `localization_scope` is `localized`\n         */\n        locale?: string | null;\n      }[];\n      /**\n       * Allowed build triggers for a role\n       */\n      positive_build_trigger_permissions?: {\n        build_trigger?: BuildTriggerIdentity | null;\n      }[];\n      /**\n       * Prohibited build triggers for a role\n       */\n      negative_build_trigger_permissions?: {\n        build_trigger?: BuildTriggerIdentity | null;\n      }[];\n    };\n    /**\n     * JSON API links\n     */\n    relationships?: {\n      /**\n       * The roles from which this role inherits permissions\n       */\n      inherits_permissions_from?: {\n        data: RoleData[];\n      };\n    };\n    meta?: RoleMeta;\n  };\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface RoleUpdateTargetSchema {\n  data: Role;\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface RoleInstancesTargetSchema {\n  data: Role[];\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface RoleSelfTargetSchema {\n  data: Role;\n}\n\n/**\n * This interface was referenced by `Role`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface RoleDestroyTargetSchema {\n  data: Role;\n}\n\n/**\n * A DatoCMS administrative area can be accessed by multiple people. Every collaborator is linked to a specific Role, which describes what actions it will be able to perform once logged in.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "user".\n */\nexport interface User {\n  type: UserType;\n  id: UserIdentity;\n  attributes: UserAttributes;\n  relationships: UserRelationships;\n  meta?: UserMeta;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UserAttributes {\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * Whether 2-factor authentication is active for this account or not\n   */\n  is_2fa_active: boolean;\n  /**\n   * Full name\n   */\n  full_name: string;\n  /**\n   * Whether the user is active or not\n   */\n  is_active: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface UserRelationships {\n  /**\n   * Role\n   */\n  role: {\n    data: RoleData;\n  };\n}\n\n/**\n * Meta information on the user\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface UserMeta {\n  /**\n   * Date of last reading/interaction\n   */\n  last_access: string | null;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UserData {\n  type: UserType;\n  id: UserIdentity;\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UserUpdateSchema {\n  data: {\n    type: UserType;\n    id: UserIdentity;\n    attributes?: {\n      /**\n       * Whether the user is active or not\n       */\n      is_active: boolean;\n    };\n    relationships?: {\n      /**\n       * Role\n       */\n      role: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface UserUpdateTargetSchema {\n  data: User;\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface UserInstancesTargetSchema {\n  data: User[];\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface UserSelfTargetSchema {\n  data: User;\n}\n\n/**\n * This interface was referenced by `User`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface UserDestroyTargetSchema {\n  data: User;\n}\n\n/**\n * A Single Sign-On user exists when a DatoCMS project is connected to an external Identity Provider. An SSO user will not use the standard login procedure but has to go through SAML authentication. It can also be linked to one or more IdP groups.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_user".\n */\nexport interface SsoUser {\n  type: SsoUserType;\n  id: SsoUserIdentity;\n  attributes: SsoUserAttributes;\n  relationships: SsoUserRelationships;\n  meta: SsoUserMeta;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoUserAttributes {\n  /**\n   * Email\n   */\n  username: string;\n  /**\n   * Identity provider ID\n   */\n  external_id: string | null;\n  /**\n   * Whether this user is active on the identity provider. De-activated users won\'t be able to login.\n   */\n  is_active: boolean;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoUserRelationships {\n  /**\n   * All the users\'s groups\n   */\n  groups: {\n    data: SsoGroupData[];\n  };\n  /**\n   * The user role\n   */\n  role: {\n    data: RoleData | null;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoGroupData {\n  type: SsoGroupType;\n  id: SsoGroupIdentity;\n}\n\n/**\n * Meta information on the user\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface SsoUserMeta {\n  /**\n   * Date of last reading/interaction\n   */\n  last_access: string | null;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoUserData {\n  type: SsoUserType;\n  id: SsoUserIdentity;\n}\n\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SsoUserInstancesTargetSchema {\n  data: SsoUser[];\n}\n\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface SsoUserSelfTargetSchema {\n  data: SsoUser;\n}\n\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `copy_users.targetSchema` link.\n */\nexport interface SsoUserCopyUsersTargetSchema {\n  data: SsoUser[];\n}\n\n/**\n * This interface was referenced by `SsoUser`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface SsoUserDestroyTargetSchema {\n  data: SsoUser;\n}\n\n/**\n * If the Audit log functionality is enabled in a project, logged events can be queried using SQL-like language and fetched in full detail so that they can be exported or analyzed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "audit_log_event".\n */\nexport interface AuditLogEvent {\n  type: AuditLogEventType;\n  id: AuditLogEventIdentity;\n  attributes: AuditLogEventAttributes;\n  meta: AuditLogEventMeta;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AuditLogEventAttributes {\n  /**\n   * The actual action performed\n   */\n  action_name: string;\n  /**\n   * The actor who performed the action\n   */\n  actor: {\n    /**\n     * The type of actor (can be `account`, `user`, `sso_user` or `access_token`)\n     */\n    type: string;\n    /**\n     * The ID of the actor\n     */\n    id: string;\n    /**\n     * An human representation of the actor (name/email/username depending on the type of actor)\n     */\n    name: string;\n  };\n  /**\n   * The role of the actor at the time the action was performed\n   */\n  role: null | {\n    /**\n     * The name of the role\n     */\n    name: string;\n    /**\n     * The ID of the role\n     */\n    id: string;\n  };\n  /**\n   * The environment inside of which the action was performed\n   */\n  environment: {\n    /**\n     * The ID of the environment\n     */\n    id: string;\n    /**\n     * Whether the environment was the primary one at the time the action was performed\n     */\n    primary: boolean;\n  };\n  /**\n   * The actual request being performed\n   */\n  request: {\n    /**\n     * The full path of the request\n     */\n    path: string;\n    /**\n     * The HTTP method of the request\n     */\n    method: string;\n    /**\n     * The X-Request-ID header of the request\n     */\n    id?: string;\n    /**\n     * The full HTTP body of the request\n     */\n    payload?: null | {\n      [k: string]: unknown;\n    };\n  };\n  /**\n   * The actual response being returned by DatoCMS\n   */\n  response: null | {\n    /**\n     * The HTTP status code of the response\n     */\n    status: number;\n    /**\n     * The full HTTP body of the response\n     */\n    payload: {\n      [k: string]: unknown;\n    };\n  };\n}\n\n/**\n * JSON API meta\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface AuditLogEventMeta {\n  /**\n   * The date of the event\n   */\n  occurred_at: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AuditLogEventData {\n  type: AuditLogEventType;\n  id: AuditLogEventIdentity;\n}\n\n/**\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `query.schema` link.\n */\nexport interface AuditLogEventQuerySchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "audit_log_query";\n    attributes: {\n      /**\n       * An SQL-like expression to filter the events\n       */\n      filter?: string;\n      /**\n       * Set this value to get remaining results, if a meta.next_token was returned in the previous query response\n       */\n      next_token?: string;\n      /**\n       * Whether a detailed log complete with full request and response payload must be returned or not\n       */\n      detailed_log?: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `AuditLogEvent`\'s JSON-Schema\n * via the `query.targetSchema` link.\n */\nexport interface AuditLogEventQueryTargetSchema {\n  data: AuditLogEvent[];\n  meta: {\n    /**\n     * If the response request exceeds the response payload limit DatoCMS will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results\n     */\n    next_token: null | string;\n  };\n}\n\n/**\n * DatoCMS account\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "account".\n */\nexport interface Account {\n  type: AccountType;\n  id: AccountIdentity;\n  attributes: AccountAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AccountAttributes {\n  /**\n   * Email\n   */\n  email: string;\n  /**\n   * First name\n   */\n  first_name: string | null;\n  /**\n   * Last name\n   */\n  last_name: string | null;\n  /**\n   * Company name\n   */\n  company: string | null;\n  /**\n   * Password\n   */\n  password?: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Account`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AccountData {\n  type: AccountType;\n  id: AccountIdentity;\n}\n\n/**\n * Stores the information regarding the current plan for the project.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site_plan".\n */\nexport interface SitePlan {\n  type: SitePlanType;\n  id: SitePlanIdentity;\n  attributes: SitePlanAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SitePlanAttributes {\n  /**\n   * The name of the plan\n   */\n  name: string;\n  /**\n   * Whether this plan is active or legacy\n   */\n  active: boolean;\n  /**\n   * Whether custom domain can be enabled or not\n   */\n  custom_domain: boolean;\n  /**\n   * Number of users that can be invited\n   */\n  users: null | number;\n  /**\n   * Number of indexable pages\n   */\n  indexable_pages: null | number;\n  /**\n   * Number of build triggers\n   */\n  build_triggers: null | number;\n  /**\n   * Number of plugins\n   */\n  plugins: null | number;\n  /**\n   * Number of webhooks\n   */\n  webhooks: null | number;\n  /**\n   * Number of records allowed\n   */\n  items: null | number;\n  /**\n   * Monthly price\n   */\n  monthly_price: number;\n  /**\n   * Yearly price\n   */\n  yearly_price: number;\n  /**\n   * Uploadable bytes\n   */\n  uploadable_bytes: null | number;\n  /**\n   * Amount of asset data transferred between our Asset CDN and GraphQL Content Delivery API and content consumers\n   */\n  traffic_bytes: null | number;\n  /**\n   * The number of requests made to both our Content Management and Content Delivery APIs\n   */\n  api_calls: null | number;\n  /**\n   * The number of streaming seconds delivered by Mux.com\n   */\n  mux_streaming_seconds: null | number;\n  /**\n   * The number of available encoding seconds to Mux.com\n   */\n  mux_encoding_seconds: null | number;\n  /**\n   * The number of different API tokens you can generate, each which different permissions\n   */\n  access_tokens: null | number;\n  /**\n   * Number of roles allowed\n   */\n  roles: null | number;\n  /**\n   * Number of locales allowed\n   */\n  locales: null | number;\n  /**\n   * Number of sandbox environments allowed\n   */\n  sandbox_environments: null | number;\n  /**\n   * Number of models allowed\n   */\n  item_types: null | number;\n  /**\n   * Whether collaboration features are enabled or not\n   */\n  item_locking: boolean;\n  /**\n   * Whether project is in white-label mode or not\n   */\n  white_label: boolean;\n  /**\n   * Whether Single Sign-On feature is enabled or not\n   */\n  sso: boolean;\n  /**\n   * Whether built-in image editor and smart-tagging is enabled or not\n   */\n  advanced_media_area: boolean;\n  /**\n   * Maximum number of blocks a record can contain\n   */\n  blocks_per_item: number;\n  /**\n   * Maximum level of block nesting for a record\n   */\n  blocks_depth: number;\n  /**\n   * Whether video streaming with Mux.com is enabled or not\n   */\n  video: boolean;\n  /**\n   * Days of version history retention\n   */\n  history_retention_days: number | null;\n  /**\n   * Maximum number of clients connected at the same time to the Realtime Updates API. The limit is per-project\n   */\n  concurrent_realtime_connections: number;\n  /**\n   * Period (in minutes) in which bursts of changes made to the same record by the same user (or API token) will be grouped into a single one\n   */\n  history_resolution_minutes: number;\n  /**\n   * Whether two-factor authentication can be enabled or not\n   */\n  otp: boolean;\n  /**\n   * Whether workflows are enabled or not\n   */\n  workflows: boolean;\n  /**\n   * Number of workflows allowed\n   */\n  workflows_count: number;\n  /**\n   * Whether audit logs are enabled or not\n   */\n  audit_log: boolean;\n  /**\n   * Whether translator roles are enabled or not\n   */\n  translator_roles: boolean;\n  /**\n   * Available extra packets\n   */\n  extra_packets: {\n    users?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    locales?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    item_types?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    roles?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    build_triggers?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    access_tokens?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_encoding_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    sandbox_environments?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n  /**\n   * Automatic packets\n   */\n  auto_packets: {\n    traffic_bytes?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    api_calls?: {\n      amount_per_packet: number;\n      price: number;\n    };\n    mux_streaming_seconds?: {\n      amount_per_packet: number;\n      price: number;\n    };\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SitePlan`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SitePlanData {\n  type: SitePlanType;\n  id: SitePlanIdentity;\n}\n\n/**\n * In DatoCMS you can organize the different Models present in your administrative area reordering and grouping them, so that their purpose will be more clear to the final editor.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "menu_item".\n */\nexport interface MenuItem {\n  type: MenuItemType;\n  id: MenuItemIdentity;\n  attributes: MenuItemAttributes;\n  relationships: MenuItemRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface MenuItemAttributes {\n  /**\n   * The label of the menu item\n   */\n  label: string;\n  /**\n   * The URL to which the menu item points to\n   */\n  external_url: null | string;\n  /**\n   * Ordering index\n   */\n  position: number;\n  /**\n   * Opens link in new tab (used together with `external_url`)\n   */\n  open_in_new_tab: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface MenuItemRelationships {\n  /**\n   * item type associated with the menu item\n   */\n  item_type: {\n    data: ItemTypeData | null;\n  };\n  /**\n   * Parent menu item\n   */\n  parent: {\n    data: null | MenuItemData;\n  };\n  /**\n   * Underlying menu items\n   */\n  children: {\n    data: MenuItemData[];\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemTypeData {\n  type: ItemTypeType;\n  id: ItemTypeIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface MenuItemData {\n  type: MenuItemType;\n  id: MenuItemIdentity;\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface MenuItemCreateSchema {\n  data: {\n    type: MenuItemType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The label of the menu item\n       */\n      label: string;\n      /**\n       * The URL to which the menu item points to\n       */\n      external_url?: null | string;\n      /**\n       * Ordering index\n       */\n      position: number;\n      /**\n       * Opens link in new tab (used together with `external_url`)\n       */\n      open_in_new_tab?: boolean;\n    };\n    relationships?: {\n      /**\n       * item type associated with the menu item\n       */\n      item_type?: {\n        data: ItemTypeData | null;\n      };\n      /**\n       * Parent menu item\n       */\n      parent?: {\n        data: null | MenuItemData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface MenuItemCreateTargetSchema {\n  data: MenuItem;\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface MenuItemUpdateSchema {\n  data: {\n    type: MenuItemType;\n    id: MenuItemIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes?: {\n      /**\n       * The label of the menu item\n       */\n      label: string;\n      /**\n       * The URL to which the menu item points to\n       */\n      external_url?: null | string;\n      /**\n       * Ordering index\n       */\n      position: number;\n      /**\n       * Opens link in new tab (used together with `external_url`)\n       */\n      open_in_new_tab?: boolean;\n    };\n    relationships?: {\n      /**\n       * item type associated with the menu item\n       */\n      item_type?: {\n        data: ItemTypeData | null;\n      };\n      /**\n       * Parent menu item\n       */\n      parent?: {\n        data: null | MenuItemData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface MenuItemUpdateTargetSchema {\n  data: MenuItem;\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface MenuItemInstancesTargetSchema {\n  data: MenuItem[];\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface MenuItemSelfTargetSchema {\n  data: MenuItem;\n}\n\n/**\n * This interface was referenced by `MenuItem`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface MenuItemDestroyTargetSchema {\n  data: MenuItem;\n}\n\n/**\n * The way you define the kind of content you can edit inside your administrative area passes through the concept of Models, which are much like database tables. For backward-compatibility reasons, the API refers to models as "item types".\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_type".\n */\nexport interface ItemType {\n  type: ItemTypeType;\n  id: ItemTypeIdentity;\n  attributes: ItemTypeAttributes;\n  relationships: ItemTypeRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemTypeAttributes {\n  /**\n   * Name of the model\n   */\n  name: string;\n  /**\n   * API key of the model\n   */\n  api_key: string;\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appeareance: "compact" | "table";\n  /**\n   * The way the model collection should be presented to the editors\n   */\n  collection_appearance: "compact" | "table";\n  /**\n   * Whether the model is single-instance or not\n   */\n  singleton: boolean;\n  /**\n   * Whether we require all the project locales to be present for each localized field or not\n   */\n  all_locales_required: boolean;\n  /**\n   * Whether editors can sort records via drag & drop or not\n   */\n  sortable: boolean;\n  /**\n   * Whether this model is a modular content block or not\n   */\n  modular_block: boolean;\n  /**\n   * Whether draft/published mode is active or not\n   */\n  draft_mode_active: boolean;\n  /**\n   * Whether editors can organize records in a tree or not\n   */\n  tree: boolean;\n  /**\n   * If an ordering field is set, this fields specify the sorting direction\n   */\n  ordering_direction: null | "asc" | "desc";\n  /**\n   * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n   */\n  ordering_meta: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n  /**\n   * If this model is single-instance, this tells the single-instance record has already been created or not\n   */\n  has_singleton_item: boolean;\n  /**\n   * A hint shown to editors to help them understand the purpose of this model/block\n   */\n  hint: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemTypeRelationships {\n  /**\n   * The item instance related to this item type\n   */\n  singleton_item: {\n    data: ItemData | null;\n  };\n  /**\n   * The list of item type fields\n   */\n  fields: {\n    data: FieldData[];\n  };\n  /**\n   * The field to use as display title\n   */\n  title_field: {\n    data: FieldData | null;\n  };\n  /**\n   * The field to use as preview image\n   */\n  image_preview_field: {\n    data: FieldData | null;\n  };\n  /**\n   * The field to use as fallback description for SEO purposes\n   */\n  excerpt_field: {\n    data: FieldData | null;\n  };\n  /**\n   * The field upon which the collection is sorted\n   */\n  ordering_field: {\n    data: FieldData | null;\n  };\n  /**\n   * The workflow to enforce on records\n   */\n  workflow: {\n    data: WorkflowData | null;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemData {\n  type: ItemType1;\n  id: ItemIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface FieldData {\n  type: FieldType;\n  id: FieldIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WorkflowData {\n  type: WorkflowType;\n  id: WorkflowIdentity;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemTypeCreateSchema {\n  data: {\n    type: ItemTypeType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * Name of the model\n       */\n      name: string;\n      /**\n       * API key of the model\n       */\n      api_key: string;\n      /**\n       * Whether the model is single-instance or not\n       */\n      singleton?: boolean;\n      /**\n       * Whether we require all the project locales to be present for each localized field or not\n       */\n      all_locales_required?: boolean;\n      /**\n       * Whether editors can sort records via drag & drop or not\n       */\n      sortable?: boolean;\n      /**\n       * Whether this model is a modular content block or not\n       */\n      modular_block?: boolean;\n      /**\n       * Whether draft/published mode is active or not\n       */\n      draft_mode_active?: boolean;\n      /**\n       * Whether editors can organize records in a tree or not\n       */\n      tree?: boolean;\n      /**\n       * If an ordering field is set, this fields specify the sorting direction\n       */\n      ordering_direction?: null | "asc" | "desc";\n      /**\n       * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n       */\n      ordering_meta?: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n      /**\n       * The way the model collection should be presented to the editors\n       */\n      collection_appeareance?: "compact" | "table";\n      /**\n       * The way the model collection should be presented to the editors\n       */\n      collection_appearance?: "compact" | "table";\n      /**\n       * A hint shown to editors to help them understand the purpose of this model/block\n       */\n      hint?: string | null;\n    };\n    relationships?: {\n      /**\n       * The field upon which the collection is sorted\n       */\n      ordering_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as display title\n       */\n      title_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as preview image\n       */\n      image_preview_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as fallback description for SEO purposes\n       */\n      excerpt_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The workflow to enforce on records\n       */\n      workflow?: {\n        data: WorkflowData | null;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface ItemTypeCreateTargetSchema {\n  data: ItemType;\n  included?: MenuItem[];\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemTypeUpdateSchema {\n  data: {\n    type: ItemTypeType;\n    id: ItemTypeIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes?: {\n      /**\n       * Name of the model\n       */\n      name?: string;\n      /**\n       * API key of the model\n       */\n      api_key?: string;\n      /**\n       * The way the model collection should be presented to the editors\n       */\n      collection_appeareance?: "compact" | "table";\n      /**\n       * The way the model collection should be presented to the editors\n       */\n      collection_appearance?: "compact" | "table";\n      /**\n       * Whether the model is single-instance or not\n       */\n      singleton?: boolean;\n      /**\n       * Whether we require all the project locales to be present for each localized field or not\n       */\n      all_locales_required?: boolean;\n      /**\n       * Whether editors can sort records via drag & drop or not\n       */\n      sortable?: boolean;\n      /**\n       * Whether this model is a modular content block or not\n       */\n      modular_block?: boolean;\n      /**\n       * Whether draft/published mode is active or not\n       */\n      draft_mode_active?: boolean;\n      /**\n       * Whether editors can organize records in a tree or not\n       */\n      tree?: boolean;\n      /**\n       * If an ordering field is set, this fields specify the sorting direction\n       */\n      ordering_direction?: null | "asc" | "desc";\n      /**\n       * Specifies the model\'s sorting method. Cannot be set in concurrency with ordering_field\n       */\n      ordering_meta?: null | "created_at" | "updated_at" | "first_published_at" | "published_at";\n      /**\n       * If this model is single-instance, this tells the single-instance record has already been created or not\n       */\n      has_singleton_item?: boolean;\n      /**\n       * A hint shown to editors to help them understand the purpose of this model/block\n       */\n      hint?: string | null;\n    };\n    relationships?: {\n      /**\n       * The field upon which the collection is sorted\n       */\n      ordering_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as display title\n       */\n      title_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as preview image\n       */\n      image_preview_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The field to use as fallback description for SEO purposes\n       */\n      excerpt_field?: {\n        data: FieldData | null;\n      };\n      /**\n       * The workflow to enforce on records\n       */\n      workflow?: {\n        data: WorkflowData | null;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface ItemTypeUpdateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "job".\n */\nexport interface Job {\n  type: JobType;\n  id: JobIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Job`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface JobData {\n  type: JobType;\n  id: JobIdentity;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `update.jobSchema` link.\n */\nexport interface ItemTypeUpdateJobSchema {\n  data: ItemType;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface ItemTypeInstancesTargetSchema {\n  data: ItemType[];\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface ItemTypeSelfTargetSchema {\n  data: ItemType;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `duplicate.targetSchema` link.\n */\nexport interface ItemTypeDuplicateTargetSchema {\n  data: ItemType;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface ItemTypeDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `ItemType`\'s JSON-Schema\n * via the `destroy.jobSchema` link.\n */\nexport interface ItemTypeDestroyJobSchema {\n  data: ItemType;\n}\n\n/**\n * Each Model consists of a set of fields. Using the database metaphore, fields are like table columns, and when creating them you need to specify their type (`string`, `file`, `float`, etc.) and any required validation.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "field".\n */\nexport interface Field {\n  type: FieldType;\n  id: FieldIdentity;\n  attributes: FieldAttributes;\n  relationships: FieldRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface FieldAttributes {\n  /**\n   * The label of the field\n   */\n  label: string;\n  /**\n   * Type of input\n   */\n  field_type: string;\n  /**\n   * Whether the field needs to be multilanguage or not\n   */\n  localized: boolean;\n  /**\n   * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n   */\n  default_value:\n    | boolean\n    | null\n    | string\n    | number\n    | {\n        [k: string]: unknown;\n      };\n  /**\n   * Field API key\n   */\n  api_key: string;\n  /**\n   * Field hint\n   */\n  hint: string | null;\n  /**\n   * Optional field validations\n   */\n  validators: {\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance\n   */\n  appeareance: {\n    editor: string;\n    parameters: {\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Field appearance details, plugin configuration and field add-ons\n   */\n  appearance: {\n    /**\n     * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n     */\n    editor: string;\n    /**\n     * The specific field extension to use for the field (only if the editor is a modern plugin)\n     */\n    field_extension?: string;\n    /**\n     * The editor plugin\'s parameters\n     */\n    parameters: {\n      [k: string]: unknown;\n    };\n    /**\n     * An array of add-on plugins with id and parameters\n     */\n    addons: {\n      /**\n       * The ID of a plugin offering a field addon\n       */\n      id: string;\n      /**\n       * The specific field extension to use for the field (only if the editor is a modern plugin)\n       */\n      field_extension?: string;\n      parameters: {\n        [k: string]: unknown;\n      };\n      [k: string]: unknown;\n    }[];\n    [k: string]: unknown;\n  };\n  /**\n   * Ordering index\n   */\n  position: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface FieldRelationships {\n  /**\n   * Field item type\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n  /**\n   * Fieldset linkage\n   */\n  fieldset: {\n    data: null | FieldsetData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface FieldsetData {\n  type: FieldsetType;\n  id: FieldsetIdentity;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface FieldCreateSchema {\n  data: {\n    type: FieldType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The label of the field\n       */\n      label: string;\n      /**\n       * Type of input\n       */\n      field_type: string;\n      /**\n       * Field API key\n       */\n      api_key: string;\n      /**\n       * Whether the field needs to be multilanguage or not\n       */\n      localized?: boolean;\n      /**\n       * Optional field validations\n       */\n      validators?: {\n        [k: string]: unknown;\n      };\n      /**\n       * Field appearance\n       */\n      appeareance?: {\n        editor: string;\n        parameters: {\n          [k: string]: unknown;\n        };\n        [k: string]: unknown;\n      };\n      /**\n       * Field appearance details, plugin configuration and field add-ons\n       */\n      appearance?: {\n        /**\n         * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n         */\n        editor: string;\n        /**\n         * The specific field extension to use for the field (only if the editor is a modern plugin)\n         */\n        field_extension?: string;\n        /**\n         * The editor plugin\'s parameters\n         */\n        parameters: {\n          [k: string]: unknown;\n        };\n        /**\n         * An array of add-on plugins with id and parameters\n         */\n        addons: {\n          /**\n           * The ID of a plugin offering a field addon\n           */\n          id: string;\n          /**\n           * The specific field extension to use for the field (only if the editor is a modern plugin)\n           */\n          field_extension?: string;\n          parameters: {\n            [k: string]: unknown;\n          };\n          [k: string]: unknown;\n        }[];\n        [k: string]: unknown;\n      };\n      /**\n       * Ordering index\n       */\n      position?: number;\n      /**\n       * Field hint\n       */\n      hint?: string | null;\n      /**\n       * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n       */\n      default_value?:\n        | boolean\n        | null\n        | string\n        | number\n        | {\n            [k: string]: unknown;\n          };\n    };\n    /**\n     * JSON API links\n     */\n    relationships?: {\n      /**\n       * Fieldset linkage\n       */\n      fieldset: {\n        data: null | FieldsetData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface FieldCreateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `create.jobSchema` link.\n */\nexport interface FieldCreateJobSchema {\n  data: Field;\n  included?: ItemType[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface FieldUpdateSchema {\n  data: {\n    type: FieldType;\n    id: FieldIdentity;\n    attributes: {\n      /**\n       * Default value for Field. When field is localized accepts an object of default values with site locales as keys\n       */\n      default_value?:\n        | boolean\n        | null\n        | string\n        | number\n        | {\n            [k: string]: unknown;\n          };\n      /**\n       * The label of the field\n       */\n      label?: string;\n      /**\n       * Field API key\n       */\n      api_key?: string;\n      /**\n       * Whether the field needs to be multilanguage or not\n       */\n      localized?: boolean;\n      /**\n       * Optional field validations\n       */\n      validators?: {\n        [k: string]: unknown;\n      };\n      /**\n       * Field appearance\n       */\n      appeareance?: {\n        editor: string;\n        parameters: {\n          [k: string]: unknown;\n        };\n        [k: string]: unknown;\n      };\n      /**\n       * Field appearance details, plugin configuration and field add-ons\n       */\n      appearance?: {\n        /**\n         * A valid editor can be a DatoCMS default field editor type (ie. `"single_line"`), or a plugin ID offering a custom field editor\n         */\n        editor: string;\n        /**\n         * The specific field extension to use for the field (only if the editor is a modern plugin)\n         */\n        field_extension?: string;\n        /**\n         * The editor plugin\'s parameters\n         */\n        parameters: {\n          [k: string]: unknown;\n        };\n        /**\n         * An array of add-on plugins with id and parameters\n         */\n        addons: {\n          /**\n           * The ID of a plugin offering a field addon\n           */\n          id: string;\n          /**\n           * The specific field extension to use for the field (only if the editor is a modern plugin)\n           */\n          field_extension?: string;\n          parameters: {\n            [k: string]: unknown;\n          };\n          [k: string]: unknown;\n        }[];\n        [k: string]: unknown;\n      };\n      /**\n       * Ordering index\n       */\n      position?: number;\n      /**\n       * Type of input\n       */\n      field_type?: string;\n      /**\n       * Field hint\n       */\n      hint?: string | null;\n    };\n    /**\n     * JSON API links\n     */\n    relationships?: {\n      /**\n       * Fieldset linkage\n       */\n      fieldset: {\n        data: null | FieldsetData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface FieldUpdateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `update.jobSchema` link.\n */\nexport interface FieldUpdateJobSchema {\n  data: Field;\n  included?: (ItemType | Field)[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface FieldInstancesTargetSchema {\n  data: Field[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `referencing.targetSchema` link.\n */\nexport interface FieldReferencingTargetSchema {\n  data: Field[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `related.targetSchema` link.\n */\nexport interface FieldRelatedTargetSchema {\n  data: Field[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface FieldSelfTargetSchema {\n  data: Field;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface FieldDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `destroy.jobSchema` link.\n */\nexport interface FieldDestroyJobSchema {\n  data: Field;\n  included?: ItemType[];\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `duplicate.targetSchema` link.\n */\nexport interface FieldDuplicateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Field`\'s JSON-Schema\n * via the `duplicate.jobSchema` link.\n */\nexport interface FieldDuplicateJobSchema {\n  data: Field;\n  included: ItemType[];\n}\n\n/**\n * Fields can be organized and grouped into fieldset to better present them to editors.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "fieldset".\n */\nexport interface Fieldset {\n  type: FieldsetType;\n  id: FieldsetIdentity;\n  attributes: FieldsetAttributes;\n  relationships: FieldsetRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface FieldsetAttributes {\n  /**\n   * The title of the fieldset\n   */\n  title: string;\n  /**\n   * Description/contextual hint for the fieldset\n   */\n  hint: string | null;\n  /**\n   * Whether the fieldset can be collapsed or not\n   */\n  collapsible: boolean;\n  /**\n   * When fieldset is collapsible, determines if the default is to start collapsed or not\n   */\n  start_collapsed: boolean;\n  /**\n   * Ordering index\n   */\n  position: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface FieldsetRelationships {\n  /**\n   * Fieldset item type\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface FieldsetCreateSchema {\n  data: {\n    type: FieldsetType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The title of the fieldset\n       */\n      title: string;\n      /**\n       * Description/contextual hint for the fieldset\n       */\n      hint?: string | null;\n      /**\n       * Ordering index\n       */\n      position?: number;\n      /**\n       * Whether the fieldset can be collapsed or not\n       */\n      collapsible?: boolean;\n      /**\n       * When fieldset is collapsible, determines if the default is to start collapsed or not\n       */\n      start_collapsed?: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface FieldsetCreateTargetSchema {\n  data: Fieldset;\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface FieldsetUpdateSchema {\n  data: {\n    type: FieldsetType;\n    id: FieldsetIdentity;\n    attributes: {\n      /**\n       * The title of the fieldset\n       */\n      title?: string;\n      /**\n       * Description/contextual hint for the fieldset\n       */\n      hint?: string | null;\n      /**\n       * Ordering index\n       */\n      position?: number;\n      /**\n       * Whether the fieldset can be collapsed or not\n       */\n      collapsible?: boolean;\n      /**\n       * When fieldset is collapsible, determines if the default is to start collapsed or not\n       */\n      start_collapsed?: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface FieldsetUpdateTargetSchema {\n  data: Fieldset;\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface FieldsetInstancesTargetSchema {\n  data: Fieldset[];\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface FieldsetSelfTargetSchema {\n  data: Fieldset;\n}\n\n/**\n * This interface was referenced by `Fieldset`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface FieldsetDestroyTargetSchema {\n  data: Fieldset;\n}\n\n/**\n * A session is required to access to read-and-write API endpoints\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "session".\n */\nexport interface Session {\n  type: SessionType;\n  id: SessionIdentity;\n  relationships: SessionRelationships;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SessionRelationships {\n  /**\n   * The user associated with the session\n   */\n  user: {\n    data: UserData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SessionData {\n  type: SessionType;\n  id: SessionIdentity;\n}\n\n/**\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface SessionCreateSchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "email_credentials";\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * Email\n       */\n      email: string;\n      /**\n       * Password\n       */\n      password: string;\n      /**\n       * Two-factor authentication one-time password\n       */\n      otp_code?: string;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Session`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface SessionCreateTargetSchema {\n  data: Session;\n  included: User[];\n}\n\n/**\n * An API token allows access to our API. It is linked to a Role, which describes what actions can be performed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "access_token".\n */\nexport interface AccessToken {\n  type: AccessTokenType;\n  id: AccessTokenIdentity;\n  attributes: AccessTokenAttributes;\n  relationships: AccessTokenRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface AccessTokenAttributes {\n  /**\n   * Name of API token\n   */\n  name: string;\n  /**\n   * The actual API token\n   */\n  token?: string;\n  /**\n   * Whether this API token can access the Content Delivery API published content endpoint\n   */\n  can_access_cda: boolean;\n  /**\n   * Whether this API token can access the Content Delivery API draft content endpoint\n   */\n  can_access_cda_preview: boolean;\n  /**\n   * Whether this API token can access the Content Management API\n   */\n  can_access_cma: boolean;\n  hardcoded_type: null | string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface AccessTokenRelationships {\n  /**\n   * Role\n   */\n  role: {\n    data: RoleData | null;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface AccessTokenData {\n  type: AccessTokenType;\n  id: AccessTokenIdentity;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface AccessTokenCreateSchema {\n  data: {\n    type: AccessTokenType;\n    attributes: {\n      /**\n       * Name of API token\n       */\n      name: string;\n      /**\n       * Whether this API token can access the Content Delivery API published content endpoint\n       */\n      can_access_cda: boolean;\n      /**\n       * Whether this API token can access the Content Delivery API draft content endpoint\n       */\n      can_access_cda_preview: boolean;\n      /**\n       * Whether this API token can access the Content Management API\n       */\n      can_access_cma: boolean;\n    };\n    relationships: {\n      /**\n       * Role\n       */\n      role: {\n        data: RoleData | null;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface AccessTokenCreateTargetSchema {\n  data: AccessToken;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface AccessTokenUpdateSchema {\n  data: {\n    type: AccessTokenType;\n    id: AccessTokenIdentity;\n    attributes: {\n      /**\n       * Name of API token\n       */\n      name: string;\n      /**\n       * Whether this API token can access the Content Delivery API published content endpoint\n       */\n      can_access_cda: boolean;\n      /**\n       * Whether this API token can access the Content Delivery API draft content endpoint\n       */\n      can_access_cda_preview: boolean;\n      /**\n       * Whether this API token can access the Content Management API\n       */\n      can_access_cma: boolean;\n    };\n    relationships: {\n      /**\n       * Role\n       */\n      role: {\n        data: RoleData | null;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface AccessTokenUpdateTargetSchema {\n  data: AccessToken;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface AccessTokenInstancesTargetSchema {\n  data: AccessToken[];\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface AccessTokenSelfTargetSchema {\n  data: AccessToken;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `regenerate_token.targetSchema` link.\n */\nexport interface AccessTokenRegenerateTokenTargetSchema {\n  data: AccessToken;\n}\n\n/**\n * This interface was referenced by `AccessToken`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface AccessTokenDestroyTargetSchema {\n  data: AccessToken;\n}\n\n/**\n * Plugins enable developers to replace DatoCMS field components with HTML5 applications so the editing experiences of the DatoCMS web app can be customized.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "plugin".\n */\nexport interface Plugin {\n  type: PluginType;\n  id: PluginIdentity;\n  attributes: PluginAttributes;\n  meta: PluginMeta;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface PluginAttributes {\n  /**\n   * The name of the plugin\n   */\n  name: string;\n  /**\n   * A description of the plugin\n   */\n  description: null | string;\n  /**\n   * NPM package name of the plugin (or null if it\'s a private plugin)\n   */\n  package_name: null | string;\n  /**\n   * The installed version of the plugin (or null if it\'s a private plugin)\n   */\n  package_version: null | string;\n  /**\n   * The entry point URL of the plugin\n   */\n  url: string;\n  /**\n   * Global plugin configuration. Plugins can persist whatever information they want in this object to reuse it later.\n   */\n  parameters: {\n    [k: string]: unknown;\n  };\n  /**\n   * Permissions granted to this plugin\n   */\n  permissions: "currentUserAccessToken"[];\n  /**\n   * The type of field extension a legacy plugin implements\n   */\n  plugin_type: "field_editor" | "sidebar" | "field_addon" | null;\n  /**\n   * On which types of field in which a legacy plugin can be used\n   */\n  field_types:\n    | null\n    | (\n        | "boolean"\n        | "date"\n        | "date_time"\n        | "float"\n        | "integer"\n        | "string"\n        | "text"\n        | "lat_lon"\n        | "json"\n        | "seo"\n        | "link"\n        | "links"\n        | "video"\n        | "color"\n        | "slug"\n        | "rich_text"\n        | "file"\n        | "gallery"\n      )[];\n  /**\n   * The schema for the parameters a legacy plugin can persist\n   */\n  parameter_definitions: null | {\n    global: unknown[];\n    instance: unknown[];\n  };\n}\n\n/**\n * JSON API meta\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface PluginMeta {\n  /**\n   * Version of the plugin. Legacy plugins are v1, new plugins are v2\n   */\n  version: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface PluginData {\n  type: PluginType;\n  id: PluginIdentity;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface PluginCreateSchema {\n  data: {\n    type: PluginType;\n    attributes: {\n      /**\n       * NPM package name of the public plugin you want to install. For public plugins, that\'s the only attribute you need to pass.\n       */\n      package_name?: null | string;\n      /**\n       * The name of the plugin. Only to be passed if package name key is not specified.\n       */\n      name?: string;\n      /**\n       * A description of the plugin. Only to be passed if package name key is not specified.\n       */\n      description?: null | string;\n      /**\n       * The entry point URL of the plugin. Only to be passed if package name key is not specified.\n       */\n      url?: string;\n      /**\n       * Permissions granted to this plugin. Only to be passed if package name key is not specified.\n       */\n      permissions?: "currentUserAccessToken"[];\n      /**\n       * The type of field extension this legacy plugin implements. Only to be passed if package name key is not specified.\n       */\n      plugin_type?: "field_editor" | "sidebar" | "field_addon";\n      /**\n       * On which types of field in which this legacy plugin can be used. Only to be passed if package name key is not specified.\n       */\n      field_types?: (\n        | "boolean"\n        | "date"\n        | "date_time"\n        | "float"\n        | "integer"\n        | "string"\n        | "text"\n        | "lat_lon"\n        | "json"\n        | "seo"\n        | "link"\n        | "links"\n        | "video"\n        | "color"\n        | "slug"\n        | "rich_text"\n        | "file"\n        | "gallery"\n      )[];\n      /**\n       * The schema for the parameters this legacy plugin can persist\n       */\n      parameter_definitions?: {\n        global: unknown[];\n        instance: unknown[];\n      };\n      /**\n       * NPM version of the plugin\n       */\n      package_version?: null | string;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface PluginCreateTargetSchema {\n  data: Plugin;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface PluginUpdateSchema {\n  data: {\n    type: PluginType;\n    id: PluginIdentity;\n    attributes: {\n      /**\n       * The name of the plugin\n       */\n      name?: string;\n      /**\n       * A description of the plugin\n       */\n      description?: null | string;\n      /**\n       * The entry point URL of the plugin\n       */\n      url?: string;\n      /**\n       * Global plugin configuration. Plugins can persist whatever information they want in this object to reuse it later.\n       */\n      parameters?: {\n        [k: string]: unknown;\n      };\n      /**\n       * The installed version of the plugin (or null if it\'s a private plugin)\n       */\n      package_version?: null | string;\n      /**\n       * Permissions granted to this plugin\n       */\n      permissions?: "currentUserAccessToken"[];\n    };\n    meta?: {\n      [k: string]: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface PluginUpdateTargetSchema {\n  data: Plugin;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface PluginInstancesTargetSchema {\n  data: Plugin[];\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface PluginSelfTargetSchema {\n  data: Plugin;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface PluginDestroyTargetSchema {\n  data: Plugin;\n}\n\n/**\n * This interface was referenced by `Plugin`\'s JSON-Schema\n * via the `fields.targetSchema` link.\n */\nexport interface PluginFieldsTargetSchema {\n  data: Field[];\n}\n\n/**\n * Some API endpoint give results asynchronously, returning the ID of a job.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "job_result".\n */\nexport interface JobResult {\n  type: JobResultType;\n  id: JobResultIdentity;\n  attributes: JobResultAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface JobResultAttributes {\n  /**\n   * Status of delayed HTTP response\n   */\n  status: number;\n  /**\n   * JSON API response of the HTTP request\n   */\n  payload: null | {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface JobResultData {\n  type: JobResultType;\n  id: JobResultIdentity;\n}\n\n/**\n * This interface was referenced by `JobResult`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface JobResultSelfTargetSchema {\n  data: JobResult;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "subscription_limit".\n */\nexport interface SubscriptionLimit {\n  type: SubscriptionLimitType;\n  id: SubscriptionLimitIdentity;\n  attributes: SubscriptionLimitAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SubscriptionLimitAttributes {\n  /**\n   * The codename for the limit\n   */\n  code: string;\n  /**\n   * Current usage\n   */\n  usage: number;\n  /**\n   * The actual limit\n   */\n  limit: number | null;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SubscriptionLimitData {\n  type: SubscriptionLimitType;\n  id: SubscriptionLimitIdentity;\n}\n\n/**\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SubscriptionLimitInstancesTargetSchema {\n  data: SubscriptionLimit[];\n}\n\n/**\n * This interface was referenced by `SubscriptionLimit`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface SubscriptionLimitSelfTargetSchema {\n  data: SubscriptionLimit;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "subscription_feature".\n */\nexport interface SubscriptionFeature {\n  type: SubscriptionFeatureType;\n  id: SubscriptionFeatureIdentity;\n  attributes: SubscriptionFeatureAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SubscriptionFeatureAttributes {\n  /**\n   * The codename for the feature\n   */\n  code: string;\n  /**\n   * Whether the project is currently using the feature\n   */\n  in_use?: boolean;\n  /**\n   * Whether the feature is available on the current project\n   */\n  enabled: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SubscriptionFeatureData {\n  type: SubscriptionFeatureType;\n  id: SubscriptionFeatureIdentity;\n}\n\n/**\n * This interface was referenced by `SubscriptionFeature`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SubscriptionFeatureInstancesTargetSchema {\n  data: SubscriptionFeature[];\n}\n\n/**\n * Represents an event occurred during the deploy process of your administrative area.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "build_event".\n */\nexport interface BuildEvent {\n  type: BuildEventType;\n  id: BuildEventIdentity;\n  attributes: BuildEventAttributes;\n  relationships: BuildEventRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface BuildEventAttributes {\n  /**\n   * The type of activity\n   */\n  event_type:\n    | "request_success"\n    | "request_failure"\n    | "response_success"\n    | "response_failure"\n    | "request_aborted"\n    | "response_unprocessable"\n    | "indexing_started"\n    | "indexing_success"\n    | "indexing_failure";\n  /**\n   * The moment the activity occurred\n   */\n  created_at: string;\n  /**\n   * Any details regarding the event\n   */\n  data: {\n    [k: string]: unknown;\n  };\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface BuildEventRelationships {\n  /**\n   * Source build trigger\n   */\n  build_trigger: {\n    data: BuildTriggerData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface BuildTriggerData {\n  type: BuildTriggerType;\n  id: BuildTriggerIdentity;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface BuildEventData {\n  type: BuildEventType;\n  id: BuildEventIdentity;\n}\n\n/**\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface BuildEventInstancesTargetSchema {\n  data: BuildEvent[];\n}\n\n/**\n * This interface was referenced by `BuildEvent`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface BuildEventSelfTargetSchema {\n  data: BuildEvent;\n}\n\n/**\n * DatoCMS stores the individual pieces of content you create from a model as records, which are much like table rows in a database. For backward-compatibility reasons, the API refers to records as "items".\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item".\n */\nexport interface Item {\n  type: ItemType1;\n  id: ItemIdentity;\n  attributes: ItemAttributes;\n  relationships: ItemRelationships;\n  meta: ItemMeta;\n}\n\n/**\n * The JSON data associated to the record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemAttributes {\n  [k: string]: unknown;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemRelationships {\n  /**\n   * The record\'s model\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n  /**\n   * The entity (account/collaborator/access token/sso user) who created the record. It must be an object with `type` (e.g. \'account\') and `id` properties.\n   */\n  creator?: {\n    data: AccountData | AccessTokenData | UserData | SsoUserData;\n  };\n}\n\n/**\n * Meta information regarding the record\n *\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface ItemMeta {\n  /**\n   * Date of creation\n   */\n  created_at: string;\n  /**\n   * Last update time\n   */\n  updated_at: string;\n  /**\n   * Date of last publication\n   */\n  published_at: null | string;\n  /**\n   * Date of first publication\n   */\n  first_published_at: null | string;\n  /**\n   * Date of future publication\n   */\n  publication_scheduled_at: null | string;\n  /**\n   * Date of future unpublishing\n   */\n  unpublishing_scheduled_at: null | string;\n  /**\n   * Status\n   */\n  status: null | ("draft" | "updated" | "published");\n  /**\n   * Whether the current record is valid or not\n   */\n  is_valid: boolean;\n  /**\n   * The ID of the current record version\n   */\n  current_version: string;\n  /**\n   * Workflow stage in which the item is\n   */\n  stage: null | string;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface ItemInstancesTargetSchema {\n  data: Item[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `validate_existing.schema` link.\n */\nexport interface ItemValidateExistingSchema {\n  data: {\n    id: ItemIdentity;\n    type: ItemType1;\n    /**\n     * The JSON data associated to the record\n     */\n    attributes: {\n      [k: string]: unknown;\n    };\n    relationships: {\n      item_type: {\n        data: ItemTypeData;\n      };\n      /**\n       * The entity (account/collaborator/access token/sso user) who created the record. It must be an object with `type` (e.g. \'account\') and `id` properties.\n       */\n      creator?: {\n        data: AccountData | AccessTokenData | UserData | SsoUserData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `validate_new.schema` link.\n */\nexport interface ItemValidateNewSchema {\n  data: {\n    type: ItemType1;\n    /**\n     * The JSON data associated to the record\n     */\n    attributes: {\n      [k: string]: unknown;\n    };\n    relationships: {\n      item_type: {\n        data: ItemTypeData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemCreateSchema {\n  data: {\n    type: ItemType1;\n    /**\n     * The JSON data associated to the record\n     */\n    attributes: {\n      [k: string]: unknown;\n    };\n    /**\n     * Meta information regarding the record\n     */\n    meta?: {\n      /**\n       * Date of creation\n       */\n      created_at?: string;\n      /**\n       * Last update time\n       */\n      updated_at?: string;\n      /**\n       * Date of last publication\n       */\n      published_at?: null | string;\n      /**\n       * Date of first publication\n       */\n      first_published_at?: null | string;\n      /**\n       * Date of future publication\n       */\n      publication_scheduled_at?: null | string;\n      /**\n       * Status\n       */\n      status?: null | ("draft" | "updated" | "published");\n      /**\n       * Whether the current record is valid or not\n       */\n      is_valid?: boolean;\n      /**\n       * The ID of the current record version\n       */\n      current_version?: string;\n    };\n    relationships: {\n      /**\n       * The record model\n       */\n      item_type: {\n        data: ItemTypeData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface ItemCreateTargetSchema {\n  data: Item;\n  included: (ItemType | Item)[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `duplicate.targetSchema` link.\n */\nexport interface ItemDuplicateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `duplicate.jobSchema` link.\n */\nexport interface ItemDuplicateJobSchema {\n  data: Item;\n  included: ItemType[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemUpdateSchema {\n  data: {\n    type: ItemType1;\n    id: ItemIdentity;\n    /**\n     * The JSON data associated to the record\n     */\n    attributes?: {\n      [k: string]: unknown;\n    };\n    /**\n     * Meta information regarding the record\n     */\n    meta?: {\n      /**\n       * Date of creation\n       */\n      created_at?: string;\n      /**\n       * Last update time\n       */\n      updated_at?: string;\n      /**\n       * Date of last publication\n       */\n      published_at?: null | string;\n      /**\n       * Date of first publication\n       */\n      first_published_at?: null | string;\n      /**\n       * Date of future publication\n       */\n      publication_scheduled_at?: null | string;\n      /**\n       * Date of future unpublishing\n       */\n      unpublishing_scheduled_at?: null | string;\n      /**\n       * Status\n       */\n      status?: null | ("draft" | "updated" | "published");\n      /**\n       * Whether the current record is valid or not\n       */\n      is_valid?: boolean;\n      /**\n       * The ID of the current record version (for optimistic locking, see the example)\n       */\n      current_version?: string;\n      /**\n       * The new stage to move the record to\n       */\n      stage?: string | null;\n    };\n    relationships?: {\n      creator?: {\n        data: AccountData | AccessTokenData | UserData | SsoUserData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface ItemUpdateTargetSchema {\n  data: Item;\n  included?: (ItemType | Item)[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `references.targetSchema` link.\n */\nexport interface ItemReferencesTargetSchema {\n  data: Item[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface ItemSelfTargetSchema {\n  data: Item;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface ItemDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `destroy.jobSchema` link.\n */\nexport interface ItemDestroyJobSchema {\n  data: Item;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.targetSchema` link.\n */\nexport interface ItemBatchDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_destroy.jobSchema` link.\n */\nexport interface ItemBatchDestroyJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.targetSchema` link.\n */\nexport interface ItemBatchPublishTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_publish.jobSchema` link.\n */\nexport interface ItemBatchPublishJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.targetSchema` link.\n */\nexport interface ItemBatchUnpublishTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `batch_unpublish.jobSchema` link.\n */\nexport interface ItemBatchUnpublishJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `publish.targetSchema` link.\n */\nexport interface ItemPublishTargetSchema {\n  data: Item;\n  included?: ItemType[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `unpublish.targetSchema` link.\n */\nexport interface ItemUnpublishTargetSchema {\n  data: Item;\n  included?: ItemType[];\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.schema` link.\n */\nexport interface ItemBulkPublishSchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "item_bulk_publish_operation";\n    relationships: {\n      /**\n       * Records to publish\n       */\n      items: {\n        data: ItemData[];\n      };\n      minItems?: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.targetSchema` link.\n */\nexport interface ItemBulkPublishTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_publish.jobSchema` link.\n */\nexport interface ItemBulkPublishJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.schema` link.\n */\nexport interface ItemBulkUnpublishSchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "item_bulk_unpublish_operation";\n    relationships: {\n      /**\n       * Records to unpublish\n       */\n      items: {\n        data: ItemData[];\n      };\n      minItems?: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.targetSchema` link.\n */\nexport interface ItemBulkUnpublishTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_unpublish.jobSchema` link.\n */\nexport interface ItemBulkUnpublishJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.schema` link.\n */\nexport interface ItemBulkDestroySchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "item_bulk_destroy_operation";\n    relationships: {\n      /**\n       * Records to delete\n       */\n      items: {\n        data: ItemData[];\n      };\n      minItems?: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.targetSchema` link.\n */\nexport interface ItemBulkDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_destroy.jobSchema` link.\n */\nexport interface ItemBulkDestroyJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.schema` link.\n */\nexport interface ItemBulkMoveToStageSchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "item_bulk_move_to_stage_operation";\n    attributes: {\n      /**\n       * Stage to be moved to\n       */\n      stage: string;\n    };\n    relationships: {\n      /**\n       * Records to move\n       */\n      items: {\n        data: ItemData[];\n      };\n      minItems?: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.targetSchema` link.\n */\nexport interface ItemBulkMoveToStageTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Item`\'s JSON-Schema\n * via the `bulk_move_to_stage.jobSchema` link.\n */\nexport interface ItemBulkMoveToStageJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * Every change to a record is stored as a separate record version in DatoCMS.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_version".\n */\nexport interface ItemVersion {\n  type: ItemVersionType;\n  id: ItemVersionIdentity;\n  attributes: ItemVersionAttributes;\n  relationships: ItemVersionRelationships;\n  meta: ItemVersionMeta;\n}\n\n/**\n * The JSON data associated to the record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemVersionAttributes {\n  [k: string]: unknown;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemVersionRelationships {\n  /**\n   * The record version\'s model\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n  /**\n   * The record this version belongs to\n   */\n  item: {\n    data: ItemData;\n  };\n  /**\n   * The entity (account/collaborator/access token/sso user) who made this change to the record. It must be an object with `type` (e.g. \'account\') and `id` properties.\n   */\n  editor: {\n    data: AccountData | AccessTokenData | UserData | SsoUserData;\n  };\n}\n\n/**\n * Meta information regarding the record version\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface ItemVersionMeta {\n  /**\n   * Date of record version creation\n   */\n  created_at: string;\n  /**\n   * Whether the record version is valid or not\n   */\n  is_valid: boolean;\n  /**\n   * Whether the record version is the published version or not\n   */\n  is_published: boolean;\n  /**\n   * Whether the record version is the most recent version or not\n   */\n  is_current: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemVersionData {\n  type: ItemVersionType;\n  id: ItemVersionIdentity;\n}\n\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `restore.targetSchema` link.\n */\nexport interface ItemVersionRestoreTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `restore.jobSchema` link.\n */\nexport interface ItemVersionRestoreJobSchema {\n  data: [Item, ItemVersion];\n}\n\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface ItemVersionInstancesTargetSchema {\n  data: ItemVersion[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * This interface was referenced by `ItemVersion`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface ItemVersionSelfTargetSchema {\n  data: ItemVersion;\n}\n\n/**\n * Every file you upload to DatoCMS will be retrievable from this endpoint.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload".\n */\nexport interface Upload {\n  type: UploadType;\n  id: UploadIdentity;\n  attributes: UploadAttributes;\n  relationships: UploadRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadAttributes {\n  /**\n   * size of the upload\n   */\n  size: number;\n  /**\n   * Width of image\n   */\n  width: null | number;\n  /**\n   * Height of image\n   */\n  height: null | number;\n  /**\n   * Upload path\n   */\n  path: string;\n  /**\n   * Upload basename\n   */\n  basename: string;\n  /**\n   * Upload filename\n   */\n  filename: string;\n  /**\n   * Upload URL\n   */\n  url: string;\n  /**\n   * Format\n   */\n  format: string | null;\n  /**\n   * Author\n   */\n  author: string | null;\n  /**\n   * Copyright\n   */\n  copyright: string | null;\n  /**\n   * Notes\n   */\n  notes: string | null;\n  /**\n   * The MD5 hash of the asset\n   */\n  md5: string;\n  /**\n   * Seconds of duration for the video\n   */\n  duration: number | null;\n  /**\n   * Frame rate (FPS) for the video\n   */\n  frame_rate: number | null;\n  /**\n   * Blurhash for the asset\n   */\n  blurhash: string | null;\n  /**\n   * Public Mux playback ID. Used with stream.mux.com to create the source URL for a video player.\n   */\n  mux_playback_id: string | null;\n  /**\n   * Maximum quality of MP4 rendition available\n   */\n  mux_mp4_highest_res: null | "high" | "medium" | "low";\n  /**\n   * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n   */\n  default_field_metadata: {\n    /**\n     * This interface was referenced by `undefined`\'s JSON-Schema definition\n     * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n     */\n    [k: string]: {\n      /**\n       * Alternate text for the asset\n       */\n      alt: string | null;\n      /**\n       * Title for the asset\n       */\n      title: string | null;\n      /**\n       * Object with arbitrary metadata\n       */\n      custom_data: {\n        [k: string]: unknown;\n      };\n      /**\n       * Focal point (only for image assets)\n       */\n      focal_point: {\n        /**\n         * Horizontal position expressed as float between 0 and 1\n         */\n        x: number;\n        /**\n         * Vertical position expressed as float between 0 and 1\n         */\n        y: number;\n      } | null;\n    };\n  };\n  /**\n   * Is this upload an image?\n   */\n  is_image: boolean;\n  /**\n   * Date of upload\n   */\n  created_at: null | string;\n  /**\n   * Date of last update\n   */\n  updated_at: null | string;\n  /**\n   * Mime type of upload\n   */\n  mime_type: null | string;\n  /**\n   * Tags\n   */\n  tags: string[];\n  /**\n   * Smart tags\n   */\n  smart_tags: string[];\n  /**\n   * Exif information\n   */\n  exif_info: {\n    [k: string]: unknown;\n  };\n  /**\n   * Dominant colors of the image\n   */\n  colors: {\n    /**\n     * Red value (from 0 to 255)\n     */\n    red: number;\n    /**\n     * Green value (from 0 to 255)\n     */\n    green: number;\n    /**\n     * Blue value (from 0 to 255)\n     */\n    blue: number;\n    /**\n     * Alpha value (from 0 to 255)\n     */\n    alpha: number;\n  }[];\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface UploadRelationships {\n  /**\n   * The entity (account/collaborator/access token) who created the asset. It must be an object with `type` (e.g. \'account\') and `id` properties.\n   */\n  creator: {\n    data: AccountData | AccessTokenData | UserData | SsoUserData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadData {\n  type: UploadType;\n  id: UploadIdentity;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadCreateSchema {\n  data: {\n    type: UploadType;\n    attributes: {\n      /**\n       * Upload path\n       */\n      path: string;\n      /**\n       * Copyright\n       */\n      copyright?: string | null;\n      /**\n       * Author\n       */\n      author?: string | null;\n      /**\n       * Notes\n       */\n      notes?: string | null;\n      /**\n       * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n       */\n      default_field_metadata?: {\n        /**\n         * This interface was referenced by `undefined`\'s JSON-Schema definition\n         * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n         */\n        [k: string]: {\n          /**\n           * Alternate text for the asset\n           */\n          alt?: string | null;\n          /**\n           * Title for the asset\n           */\n          title?: string | null;\n          /**\n           * Object with arbitrary metadata\n           */\n          custom_data?: {\n            [k: string]: unknown;\n          };\n          /**\n           * Focal point (only for image assets)\n           */\n          focal_point?: {\n            /**\n             * Horizontal position expressed as float between 0 and 1\n             */\n            x: number;\n            /**\n             * Vertical position expressed as float between 0 and 1\n             */\n            y: number;\n          } | null;\n        };\n      };\n      /**\n       * Tags\n       */\n      tags?: string[];\n      [k: string]: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface UploadCreateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `create.jobSchema` link.\n */\nexport interface UploadCreateJobSchema {\n  data: Upload;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface UploadInstancesTargetSchema {\n  data: Upload[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface UploadSelfTargetSchema {\n  data: Upload;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface UploadDestroyTargetSchema {\n  data: Upload;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UploadUpdateSchema {\n  data: {\n    type: UploadType;\n    id: UploadIdentity;\n    attributes?: {\n      /**\n       * Upload path\n       */\n      path?: string;\n      /**\n       * Upload basename\n       */\n      basename?: string;\n      /**\n       * Copyright\n       */\n      copyright?: string | null;\n      /**\n       * Author\n       */\n      author?: string | null;\n      /**\n       * Notes\n       */\n      notes?: string | null;\n      /**\n       * Tags\n       */\n      tags?: string[];\n      /**\n       * For each of the project\'s locales, the default metadata to apply if nothing is specified at record\'s level.\n       */\n      default_field_metadata?: {\n        /**\n         * This interface was referenced by `undefined`\'s JSON-Schema definition\n         * via the `patternProperty` "^(?<languagecode>[a-z]{0,3}(-[A-Za-z]+)?(-[A-Z]{0,3})?)$".\n         */\n        [k: string]: {\n          /**\n           * Alternate text for the asset\n           */\n          alt?: string | null;\n          /**\n           * Title for the asset\n           */\n          title?: string | null;\n          /**\n           * Object with arbitrary metadata\n           */\n          custom_data?: {\n            [k: string]: unknown;\n          };\n          /**\n           * Focal point (only for image assets)\n           */\n          focal_point?: {\n            /**\n             * Horizontal position expressed as float between 0 and 1\n             */\n            x: number;\n            /**\n             * Vertical position expressed as float between 0 and 1\n             */\n            y: number;\n          } | null;\n        };\n      };\n      [k: string]: unknown;\n    };\n    relationships?: {\n      /**\n       * The entity (account/collaborator/access token) who created the asset. It must be an object with `type` (e.g. \'account\') and `id` properties.\n       */\n      creator: {\n        data: AccountData | AccessTokenData | UserData | SsoUserData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface UploadUpdateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `update.jobSchema` link.\n */\nexport interface UploadUpdateJobSchema {\n  data: Upload;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.schema` link.\n */\nexport interface UploadBatchAddTagsSchema {\n  data: {\n    type: UploadType;\n    attributes: {\n      /**\n       * Tags\n       */\n      tags?: string[];\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.targetSchema` link.\n */\nexport interface UploadBatchAddTagsTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_add_tags.jobSchema` link.\n */\nexport interface UploadBatchAddTagsJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.targetSchema` link.\n */\nexport interface UploadBatchDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `batch_destroy.jobSchema` link.\n */\nexport interface UploadBatchDestroyJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `references.targetSchema` link.\n */\nexport interface UploadReferencesTargetSchema {\n  data: Item[];\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.schema` link.\n */\nexport interface UploadBulkTagSchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "upload_bulk_tag_operation";\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The tags to add to the assets\n       */\n      tags: string[];\n    };\n    relationships: {\n      /**\n       * Assets to tag\n       */\n      uploads: {\n        data: UploadData[];\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.targetSchema` link.\n */\nexport interface UploadBulkTagTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_tag.jobSchema` link.\n */\nexport interface UploadBulkTagJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.schema` link.\n */\nexport interface UploadBulkDestroySchema {\n  data: {\n    /**\n     * JSON API type field\n     */\n    type: "upload_bulk_destroy_operation";\n    relationships: {\n      /**\n       * Assets to delete\n       */\n      uploads: {\n        data: UploadData[];\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.targetSchema` link.\n */\nexport interface UploadBulkDestroyTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Upload`\'s JSON-Schema\n * via the `bulk_destroy.jobSchema` link.\n */\nexport interface UploadBulkDestroyJobSchema {\n  data: unknown[];\n  meta: {\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * To upload a file in DatoCMS, first you need to obtain an upload permission through this API endpoint. The response will contain the S3 URL where you will be able to upload the file with a direct PUT request.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_request".\n */\nexport interface UploadRequest {\n  type: UploadRequestType;\n  id: UploadRequestIdentity;\n  attributes: UploadRequestAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadRequestAttributes {\n  /**\n   * The URL to use to upload the file with a direct PUT request\n   */\n  url: string;\n  [k: string]: unknown;\n}\n\n/**\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadRequestCreateSchema {\n  data: {\n    type: UploadRequestType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The original file name\n       */\n      filename?: string;\n      [k: string]: unknown;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `UploadRequest`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface UploadRequestCreateTargetSchema {\n  data: UploadRequest;\n}\n\n/**\n * You can create scheduled publication to publish records in the future\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "scheduled_publication".\n */\nexport interface ScheduledPublication {\n  type: ScheduledPublicationType;\n  id: ScheduledPublicationIdentity;\n  attributes: ScheduledPublicationAttributes;\n  relationships: ScheduledPublicationRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ScheduledPublicationAttributes {\n  /**\n   * The future date for the publication\n   */\n  publication_scheduled_at: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ScheduledPublicationRelationships {\n  /**\n   * Item\n   */\n  item: {\n    data: ItemData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ScheduledPublicationData {\n  type: ScheduledPublicationType;\n  id: ScheduledPublicationIdentity;\n}\n\n/**\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ScheduledPublicationCreateSchema {\n  data: {\n    type: ScheduledPublicationType;\n    attributes: ScheduledPublicationAttributes;\n  };\n}\n\n/**\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface ScheduledPublicationCreateTargetSchema {\n  data: ScheduledPublication;\n  included: Item[];\n}\n\n/**\n * This interface was referenced by `ScheduledPublication`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface ScheduledPublicationDestroyTargetSchema {\n  data: Item;\n}\n\n/**\n * You can create a scheduled unpublishing to unpublish records in the future\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "scheduled_unpublishing".\n */\nexport interface ScheduledUnpublishing {\n  type: ScheduledUnpublishingType;\n  id: ScheduledUnpublishingIdentity;\n  attributes: ScheduledUnpublishingAttributes;\n  relationships: ScheduledUnpublishingRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ScheduledUnpublishingAttributes {\n  /**\n   * The future date for the unpublishing\n   */\n  unpublishing_scheduled_at: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ScheduledUnpublishingRelationships {\n  /**\n   * Item\n   */\n  item: {\n    data: ItemData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ScheduledUnpublishingData {\n  type: ScheduledUnpublishingType;\n  id: ScheduledUnpublishingIdentity;\n}\n\n/**\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ScheduledUnpublishingCreateSchema {\n  data: {\n    type: ScheduledUnpublishingType;\n    attributes: ScheduledUnpublishingAttributes;\n  };\n}\n\n/**\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface ScheduledUnpublishingCreateTargetSchema {\n  data: ScheduledUnpublishing;\n  included: Item[];\n}\n\n/**\n * This interface was referenced by `ScheduledUnpublishing`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface ScheduledUnpublishingDestroyTargetSchema {\n  data: Item;\n}\n\n/**\n * DatoCMS Site Search is a way to deliver tailored search results to your site visitors. This is the endpoint you can use to query for results.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "search_result".\n */\nexport interface SearchResult {\n  type: SearchResultType;\n  id: SearchResultIdentity;\n  attributes: SearchResultAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SearchResultAttributes {\n  /**\n   * Page title\n   */\n  title: string;\n  /**\n   * First lines of body\n   */\n  body_excerpt: string;\n  /**\n   * URL\n   */\n  url: string;\n  /**\n   * Score\n   */\n  score: number;\n  highlight: {\n    title?: string[] | null;\n    body?: string[] | null;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SearchResultData {\n  type: SearchResultType;\n  id: SearchResultIdentity;\n}\n\n/**\n * This interface was referenced by `SearchResult`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SearchResultInstancesTargetSchema {\n  data: SearchResult[];\n  meta?: {\n    total_count: number;\n  };\n}\n\n/**\n * [Environments](https://www.datocms.com/docs/general-concepts/primary-and-sandbox-environments) make it easier for your development team to **manage and maintain content structure once your content has been published**. You can think of environments like code branches: great for testing, development and pre-production environments.\n *\n * By default, every project has one environment, called **primary environment**, which is meant to be used for the regular editorial workflow. Additionally, multiple **sandbox environments** can be created by developers to safely test/experiment new changes in the content.\n *\n * Sandbox environments start out as **exact copies of one of the existing environments** (ie. the primary one). The process of creating a new sandbox starting off from an existing environment is called fork.\n *\n * Each environment is identified by a name (ie. `master`) and stores the following information:\n *\n * - Models\n * - Records\n * - Uploads\n * - Plugins\n * - Locales and timezone settings\n * - UI Theme (colors and logo)\n * - Global SEO settings\n * - The content navigation bar\n *\n * When making changes to any of the aforementioned entities in any environment, including the primary environment, **the data in all other environments isn’t affected** and stays the same.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "environment".\n */\nexport interface Environment {\n  type: EnvironmentType;\n  id: EnvironmentIdentity;\n  meta: EnvironmentMeta;\n}\n\n/**\n * Meta attributes\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "meta".\n */\nexport interface EnvironmentMeta {\n  /**\n   * Status of the environment\n   */\n  status: "creating" | "ready" | "destroying";\n  /**\n   * Date of creation\n   */\n  created_at: string;\n  /**\n   * Last data change\n   */\n  last_data_change_at: string;\n  /**\n   * Is this environment the primary for the project?\n   */\n  primary: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface EnvironmentData {\n  type: EnvironmentType;\n  id: EnvironmentIdentity;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `fork.schema` link.\n */\nexport interface EnvironmentForkSchema {\n  data: {\n    type: EnvironmentType;\n    /**\n     * The ID of the forked environment\n     */\n    id: string;\n  };\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `fork.targetSchema` link.\n */\nexport interface EnvironmentForkTargetSchema {\n  data: Job | Environment;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `fork.jobSchema` link.\n */\nexport interface EnvironmentForkJobSchema {\n  data: Environment;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `promote.targetSchema` link.\n */\nexport interface EnvironmentPromoteTargetSchema {\n  data: Environment;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface EnvironmentInstancesTargetSchema {\n  data: Environment[];\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface EnvironmentSelfTargetSchema {\n  data: Environment;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface EnvironmentDestroyTargetSchema {\n  data: Job | Environment;\n}\n\n/**\n * This interface was referenced by `Environment`\'s JSON-Schema\n * via the `destroy.jobSchema` link.\n */\nexport interface EnvironmentDestroyJobSchema {\n  data: Environment;\n}\n\n/**\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "maintenance_mode".\n */\nexport interface MaintenanceMode {\n  type: MaintenanceModeType;\n  id: MaintenanceModeIdentity;\n  attributes: MaintenanceModeAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface MaintenanceModeAttributes {\n  /**\n   * Whether maintenance mode is currently active or not\n   */\n  active: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface MaintenanceModeData {\n  type: MaintenanceModeType;\n  id: MaintenanceModeIdentity;\n}\n\n/**\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface MaintenanceModeSelfTargetSchema {\n  data: MaintenanceMode;\n}\n\n/**\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `activate.targetSchema` link.\n */\nexport interface MaintenanceModeActivateTargetSchema {\n  data: MaintenanceMode;\n}\n\n/**\n * This interface was referenced by `MaintenanceMode`\'s JSON-Schema\n * via the `deactivate.targetSchema` link.\n */\nexport interface MaintenanceModeDeactivateTargetSchema {\n  data: MaintenanceMode;\n}\n\n/**\n * A webhook allows to make requests following certain Dato events. It is linked to a Role, which describes what actions can be performed.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "webhook".\n */\nexport interface Webhook {\n  type: WebhookType;\n  id: WebhookIdentity;\n  attributes: WebhookAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WebhookAttributes {\n  /**\n   * Unique name for the webhook\n   */\n  name: string;\n  /**\n   * Whether the webhook is enabled and sending events or not\n   */\n  enabled: boolean;\n  /**\n   * The URL to be called\n   */\n  url: string;\n  /**\n   * A custom payload\n   */\n  custom_payload: string | null;\n  /**\n   * HTTP Basic Authorization username\n   */\n  http_basic_user: string | null;\n  /**\n   * HTTP Basic Authorization password\n   */\n  http_basic_password: string | null;\n  /**\n   * Additional headers that will be sent\n   */\n  headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * All the events you will be notified for\n   */\n  events: unknown[];\n  /**\n   * Specifies which API version to use when serializing entities in the webhook payload\n   */\n  payload_api_version: string;\n  /**\n   * Whether the you want records present in the payload to show blocks expanded or not\n   */\n  nested_items_in_payload: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WebhookData {\n  type: WebhookType;\n  id: WebhookIdentity;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface WebhookCreateSchema {\n  data: {\n    type: WebhookType;\n    attributes: {\n      /**\n       * Unique name for the webhook\n       */\n      name: string;\n      /**\n       * The URL to be called\n       */\n      url: string;\n      /**\n       * A custom payload\n       */\n      custom_payload: string | null;\n      /**\n       * Additional headers that will be sent\n       */\n      headers: {\n        [k: string]: unknown;\n      };\n      /**\n       * All the events you will be notified for\n       */\n      events: unknown[];\n      /**\n       * HTTP Basic Authorization username\n       */\n      http_basic_user: string | null;\n      /**\n       * HTTP Basic Authorization password\n       */\n      http_basic_password: string | null;\n      /**\n       * Whether the webhook is enabled and sending events or not\n       */\n      enabled?: boolean;\n      /**\n       * Specifies which API version to use when serializing entities in the webhook payload\n       */\n      payload_api_version?: string;\n      /**\n       * Whether the you want records present in the payload to show blocks expanded or not\n       */\n      nested_items_in_payload?: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface WebhookCreateTargetSchema {\n  data: Webhook;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WebhookUpdateSchema {\n  data: {\n    type: WebhookType;\n    id: WebhookIdentity;\n    attributes: {\n      /**\n       * Unique name for the webhook\n       */\n      name?: string;\n      /**\n       * The URL to be called\n       */\n      url?: string;\n      /**\n       * A custom payload\n       */\n      custom_payload?: string | null;\n      /**\n       * Additional headers that will be sent\n       */\n      headers?: {\n        [k: string]: unknown;\n      };\n      /**\n       * All the events you will be notified for\n       */\n      events?: unknown[];\n      /**\n       * HTTP Basic Authorization username\n       */\n      http_basic_user?: string | null;\n      /**\n       * HTTP Basic Authorization password\n       */\n      http_basic_password?: string | null;\n      /**\n       * Whether the webhook is enabled and sending events or not\n       */\n      enabled?: boolean;\n      /**\n       * Specifies which API version to use when serializing entities in the webhook payload\n       */\n      payload_api_version?: string;\n      /**\n       * Whether the you want records present in the payload to show blocks expanded or not\n       */\n      nested_items_in_payload?: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface WebhookUpdateTargetSchema {\n  data: Webhook;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface WebhookInstancesTargetSchema {\n  data: Webhook[];\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface WebhookSelfTargetSchema {\n  data: Webhook;\n}\n\n/**\n * This interface was referenced by `Webhook`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface WebhookDestroyTargetSchema {\n  data: Webhook;\n}\n\n/**\n * Represents a log entry in the webhooks activity list.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "webhook_call".\n */\nexport interface WebhookCall {\n  type: WebhookCallType;\n  id: WebhookCallIdentity;\n  attributes: WebhookCallAttributes;\n  relationships: WebhookCallRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WebhookCallAttributes {\n  /**\n   * The subject of webhook triggering\n   */\n  entity_type: "item" | "item_type" | "upload";\n  /**\n   * The event that triggers the webhook call\n   */\n  event_type: "create" | "update" | "delete" | "publish" | "unpublish";\n  /**\n   * The moment the call occurred\n   */\n  created_at: string;\n  /**\n   * The url that the webhook called\n   */\n  request_url: string;\n  /**\n   * The request\'s headers\n   */\n  request_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the request\n   */\n  request_payload: string;\n  /**\n   * The status of the response\n   */\n  response_status: number | null;\n  /**\n   * The response\'s headers\n   */\n  response_headers: {\n    [k: string]: unknown;\n  };\n  /**\n   * The body of the response\n   */\n  response_payload: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface WebhookCallRelationships {\n  /**\n   * The webhook which has been called\n   */\n  webhook: {\n    data: WebhookData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WebhookCallData {\n  type: WebhookCallType;\n  id: WebhookCallIdentity;\n}\n\n/**\n * This interface was referenced by `WebhookCall`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface WebhookCallInstancesTargetSchema {\n  data: WebhookCall[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * Configuration for different build triggers. You can have different staging and production environments in order to test your site before final deploy\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "build_trigger".\n */\nexport interface BuildTrigger {\n  type: BuildTriggerType;\n  id: BuildTriggerIdentity;\n  attributes: BuildTriggerAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface BuildTriggerAttributes {\n  /**\n   * Name of the environment\n   */\n  name: string;\n  /**\n   * The deploy adapter\n   */\n  adapter: string;\n  /**\n   * Additional configuration for deploy\n   */\n  adapter_settings: {\n    [k: string]: unknown;\n  };\n  /**\n   * Timestamp of the last deploy\n   */\n  last_build_completed_at: string | null;\n  /**\n   * Status of last deploy\n   */\n  build_status: string;\n  /**\n   * Unique token of the webhook\n   */\n  webhook_token?: string;\n  /**\n   * Notification webhook URL\n   */\n  webhook_url: string;\n  /**\n   * Status of site scraper\n   */\n  indexing_status: string;\n  /**\n   * Public url of the site\n   */\n  frontend_url: string | null;\n  /**\n   * Deploy on scheduled publication\n   */\n  autotrigger_on_scheduled_publications: boolean;\n  /**\n   * Enable scraper on the site\n   */\n  indexing_enabled: boolean;\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface BuildTriggerInstancesTargetSchema {\n  data: BuildTrigger[];\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface BuildTriggerSelfTargetSchema {\n  data: BuildTrigger;\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface BuildTriggerCreateSchema {\n  data: {\n    type: BuildTriggerType;\n    attributes: {\n      /**\n       * Name of the environment\n       */\n      name: string;\n      /**\n       * Unique token of the webhook\n       */\n      webhook_token?: string;\n      /**\n       * The deploy adapter\n       */\n      adapter: string;\n      /**\n       * Enable scraper on the site\n       */\n      indexing_enabled: boolean;\n      /**\n       * Public url of the site\n       */\n      frontend_url: string | null;\n      /**\n       * Deploy on scheduled publication\n       */\n      autotrigger_on_scheduled_publications: boolean;\n      /**\n       * Additional configuration for deploy\n       */\n      adapter_settings: {\n        [k: string]: unknown;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface BuildTriggerCreateTargetSchema {\n  data: BuildTrigger;\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface BuildTriggerUpdateSchema {\n  data: {\n    type: BuildTriggerType;\n    id: BuildTriggerIdentity;\n    attributes: {\n      /**\n       * Name of the environment\n       */\n      name?: string;\n      /**\n       * The deploy adapter\n       */\n      adapter?: string;\n      /**\n       * Enable scraper on the site\n       */\n      indexing_enabled?: boolean;\n      /**\n       * Public url of the site\n       */\n      frontend_url?: string | null;\n      /**\n       * Deploy on scheduled publication\n       */\n      autotrigger_on_scheduled_publications?: boolean;\n      /**\n       * Additional configuration for deploy\n       */\n      adapter_settings?: {\n        [k: string]: unknown;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface BuildTriggerUpdateTargetSchema {\n  data: BuildTrigger;\n}\n\n/**\n * This interface was referenced by `BuildTrigger`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface BuildTriggerDestroyTargetSchema {\n  data: BuildTrigger;\n}\n\n/**\n * In DatoCMS you can create filters to help you (and other editors) quickly search for records\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "item_type_filter".\n */\nexport interface ItemTypeFilter {\n  type: ItemTypeFilterType;\n  id: ItemTypeFilterIdentity;\n  attributes: ItemTypeFilterAttributes;\n  relationships: ItemTypeFilterRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface ItemTypeFilterAttributes {\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface ItemTypeFilterRelationships {\n  /**\n   * Model associated with the filter\n   */\n  item_type: {\n    data: ItemTypeData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface ItemTypeFilterData {\n  type: ItemTypeFilterType;\n  id: ItemTypeFilterIdentity;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface ItemTypeFilterCreateSchema {\n  data: {\n    type: ItemTypeFilterType;\n    attributes: {\n      /**\n       * The name of the filter\n       */\n      name: string;\n      /**\n       * The actual filter\n       */\n      filter: {\n        [k: string]: unknown;\n      };\n      /**\n       * Whether it\'s a shared filter or not\n       */\n      shared: boolean;\n    };\n    relationships: ItemTypeFilterRelationships;\n  };\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface ItemTypeFilterCreateTargetSchema {\n  data: ItemTypeFilter;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface ItemTypeFilterUpdateSchema {\n  data: {\n    type: ItemTypeFilterType;\n    id: ItemTypeFilterIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The name of the filter\n       */\n      name: string;\n      /**\n       * Whether it\'s a shared filter or not\n       */\n      shared?: boolean;\n      /**\n       * The actual filter\n       */\n      filter: {\n        [k: string]: unknown;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface ItemTypeFilterUpdateTargetSchema {\n  data: ItemTypeFilter;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface ItemTypeFilterInstancesTargetSchema {\n  data: ItemTypeFilter[];\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface ItemTypeFilterSelfTargetSchema {\n  data: ItemTypeFilter;\n}\n\n/**\n * This interface was referenced by `ItemTypeFilter`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface ItemTypeFilterDestroyTargetSchema {\n  data: ItemTypeFilter;\n}\n\n/**\n * In DatoCMS you can create filters to help you (and other editors) quickly search for uploads\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_filter".\n */\nexport interface UploadFilter {\n  type: UploadFilterType;\n  id: UploadFilterIdentity;\n  attributes: UploadFilterAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadFilterAttributes {\n  /**\n   * The name of the filter\n   */\n  name: string;\n  /**\n   * The actual filter\n   */\n  filter: {\n    [k: string]: unknown;\n  };\n  /**\n   * Whether it\'s a shared filter or not\n   */\n  shared: boolean;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadFilterData {\n  type: UploadFilterType;\n  id: UploadFilterIdentity;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadFilterCreateSchema {\n  data: {\n    type: UploadFilterType;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The name of the filter\n       */\n      name: string;\n      /**\n       * The actual filter\n       */\n      filter: {\n        [k: string]: unknown;\n      };\n      /**\n       * Whether it\'s a shared filter or not\n       */\n      shared: boolean;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface UploadFilterCreateTargetSchema {\n  data: UploadFilter;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface UploadFilterUpdateSchema {\n  data: {\n    type: UploadFilterType;\n    id: UploadFilterIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The name of the filter\n       */\n      name: string;\n      /**\n       * Whether it\'s a shared filter or not\n       */\n      shared?: boolean;\n      /**\n       * The actual filter\n       */\n      filter: {\n        [k: string]: unknown;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface UploadFilterUpdateTargetSchema {\n  data: UploadFilter;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface UploadFilterInstancesTargetSchema {\n  data: UploadFilter[];\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface UploadFilterSelfTargetSchema {\n  data: UploadFilter;\n}\n\n/**\n * This interface was referenced by `UploadFilter`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface UploadFilterDestroyTargetSchema {\n  data: UploadFilter;\n}\n\n/**\n * A DatoCMS administrative area can be accessed by multiple people. Every invitation is linked to a specific Role, which describes what actions it will be able to perform once the user will register.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site_invitation".\n */\nexport interface SiteInvitation {\n  type: SiteInvitationType;\n  id: SiteInvitationIdentity;\n  attributes: SiteInvitationAttributes;\n  relationships: SiteInvitationRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SiteInvitationAttributes {\n  /**\n   * Email\n   */\n  email: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SiteInvitationRelationships {\n  /**\n   * Role\n   */\n  role: {\n    data: RoleData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SiteInvitationData {\n  type: SiteInvitationType;\n  id: SiteInvitationIdentity;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface SiteInvitationCreateSchema {\n  data: {\n    type: SiteInvitationType;\n    attributes: {\n      /**\n       * Email\n       */\n      email: string;\n    };\n    relationships: {\n      /**\n       * Role\n       */\n      role: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface SiteInvitationCreateTargetSchema {\n  data: SiteInvitation;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SiteInvitationUpdateSchema {\n  data: {\n    type: SiteInvitationType;\n    id: SiteInvitationIdentity;\n    relationships: {\n      /**\n       * Role\n       */\n      role?: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface SiteInvitationUpdateTargetSchema {\n  data: SiteInvitation;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SiteInvitationInstancesTargetSchema {\n  data: SiteInvitation[];\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface SiteInvitationSelfTargetSchema {\n  data: SiteInvitation;\n}\n\n/**\n * This interface was referenced by `SiteInvitation`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface SiteInvitationDestroyTargetSchema {\n  data: SiteInvitation;\n}\n\n/**\n * Session track users movements in the administrative area, and allows locking a record when editing it.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "editing_session".\n */\nexport interface EditingSession {\n  type: EditingSessionType;\n  id: EditingSessionIdentity;\n  attributes: EditingSessionAttributes;\n  relationships: EditingSessionRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface EditingSessionAttributes {\n  /**\n   * User entered at\n   */\n  last_activity_at: string | null;\n  /**\n   * User locked record at\n   */\n  locked_at: string | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface EditingSessionRelationships {\n  /**\n   * The active item in the session\n   */\n  active_item: {\n    data: ItemData;\n  };\n  /**\n   * The item type of the active item in the session\n   */\n  active_item_type: {\n    data: ItemTypeData;\n  };\n  /**\n   * The entity (account/editor/access token) who has accessed the record\n   */\n  editor: {\n    data: AccountData | AccessTokenData | UserData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface EditingSessionData {\n  type: EditingSessionType;\n  id: EditingSessionIdentity;\n}\n\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface EditingSessionInstancesTargetSchema {\n  data: EditingSession[];\n}\n\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface EditingSessionUpdateSchema {\n  data:\n    | {\n        /**\n         * JSON API type\n         */\n        type: "editing_session_enter_item";\n        /**\n         * JSON API relationships\n         */\n        relationships: {\n          /**\n           * The active item in the session\n           */\n          item: {\n            data: ItemData;\n          };\n        };\n      }\n    | {\n        /**\n         * JSON API type\n         */\n        type: "editing_session_take_over_item";\n        /**\n         * JSON API relationships\n         */\n        relationships: {\n          /**\n           * The active item in the session\n           */\n          item: {\n            data: ItemData;\n          };\n        };\n      }\n    | {\n        /**\n         * JSON API type\n         */\n        type: "editing_session_lock_item";\n        /**\n         * JSON API relationships\n         */\n        relationships: {\n          /**\n           * The active item in the session\n           */\n          item: {\n            data: ItemData;\n          };\n        };\n      }\n    | {\n        /**\n         * JSON API type\n         */\n        type: "editing_session_unlock_item";\n      };\n}\n\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface EditingSessionUpdateTargetSchema {\n  data: EditingSession;\n}\n\n/**\n * This interface was referenced by `EditingSession`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface EditingSessionDestroyTargetSchema {\n  data: EditingSession;\n}\n\n/**\n * A Single Sign-On group exists when a DatoCMS project is connected to an Identity Provider. These groups can be used to link DatoCMS roles to the Identity Provider\'s groups.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_group".\n */\nexport interface SsoGroup {\n  type: SsoGroupType;\n  id: SsoGroupIdentity;\n  attributes: SsoGroupAttributes;\n  relationships: SsoGroupRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoGroupAttributes {\n  /**\n   * Name of the group\n   */\n  name: string;\n  /**\n   * When an user belongs to multiple groups, the role associated to the group with the highest priority will be used\n   */\n  priority: number;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoGroupRelationships {\n  /**\n   * Sso Group\'s role\n   */\n  role: {\n    data: RoleData;\n  };\n  /**\n   * Group members\n   */\n  users: {\n    data: SsoUserData[];\n  };\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface SsoGroupInstancesTargetSchema {\n  data: SsoGroup[];\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `copy_roles.targetSchema` link.\n */\nexport interface SsoGroupCopyRolesTargetSchema {\n  data: SsoGroup;\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SsoGroupUpdateSchema {\n  data: {\n    type: SsoGroupType;\n    id: SsoGroupIdentity;\n    attributes: {\n      /**\n       * When an user belongs to multiple groups, the role associated to the group with the highest priority will be used\n       */\n      priority: number;\n    };\n    relationships: {\n      /**\n       * Sso Group\'s role\n       */\n      role: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface SsoGroupUpdateTargetSchema {\n  data: SsoGroup;\n}\n\n/**\n * This interface was referenced by `SsoGroup`\'s JSON-Schema\n * via the `destroy.targetSchema` link.\n */\nexport interface SsoGroupDestroyTargetSchema {\n  data: SsoGroup;\n}\n\n/**\n * Represents the Single Sign-on settings of the current DatoCMS project\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "sso_settings".\n */\nexport interface SsoSettings {\n  type: SsoSettingsType;\n  id: SsoSettingsIdentity;\n  attributes: SsoSettingsAttributes;\n  relationships: SsoSettingsRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SsoSettingsAttributes {\n  /**\n   * URL of Identity Provider SAML Metadata endpoint\n   */\n  idp_saml_metadata_url: null | string;\n  /**\n   * DatoCMS SCIM base URL\n   */\n  scim_base_url: string;\n  /**\n   * DatoCMS SAML ACS URL\n   */\n  saml_acs_url: string;\n  /**\n   * DatoCMS SAML Metadata URL\n   */\n  sp_saml_metadata_url: string;\n  /**\n   * DatoCMS SAML Base URL\n   */\n  sp_saml_base_url: string;\n  /**\n   * DatoCMS SAML Token\n   */\n  saml_token: string;\n  /**\n   * DatoCMS SCIM API Token\n   */\n  scim_api_token?: string;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SsoSettingsRelationships {\n  /**\n   * The default role assigned to SSO users that do not belong to any SSO group\n   */\n  default_role: {\n    data: null | RoleData;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SsoSettingsData {\n  type: SsoSettingsType;\n  id: SsoSettingsIdentity;\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface SsoSettingsSelfTargetSchema {\n  data: SsoSettings;\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `generate_token.targetSchema` link.\n */\nexport interface SsoSettingsGenerateTokenTargetSchema {\n  data: {\n    id: SsoSettingsIdentity;\n    /**\n     * JSON API type field\n     */\n    type: "sso_token";\n    attributes: {\n      /**\n       * DatoCMS SCIM API Token\n       */\n      scim_api_token: string;\n    };\n    [k: string]: unknown;\n  };\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SsoSettingsUpdateSchema {\n  data: {\n    type: SsoSettingsType;\n    id?: SsoSettingsIdentity;\n    attributes?: {\n      /**\n       * URL of Identity Provider SAML Metadata endpoint\n       */\n      idp_saml_metadata_url: null | string;\n    };\n    relationships: {\n      /**\n       * The default role assigned to SSO users that do not belong to any SSO group\n       */\n      default_role: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `SsoSettings`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface SsoSettingsUpdateTargetSchema {\n  data: SsoSettings;\n}\n\n/**\n * Represents the white-label settings of the current DatoCMS project\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "white_label_settings".\n */\nexport interface WhiteLabelSettings {\n  type: WhiteLabelSettingsType;\n  id: WhiteLabelSettingsIdentity;\n  attributes: WhiteLabelSettingsAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WhiteLabelSettingsAttributes {\n  /**\n   * URL of custom I18n messages. The :locale placeholder represents the current DatoCMS UI locale.\n   */\n  custom_i18n_messages_template_url: null | string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface WhiteLabelSettingsData {\n  type: WhiteLabelSettingsType;\n  id: WhiteLabelSettingsIdentity;\n}\n\n/**\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface WhiteLabelSettingsSelfTargetSchema {\n  data: WhiteLabelSettings;\n}\n\n/**\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WhiteLabelSettingsUpdateSchema {\n  data: {\n    type: WhiteLabelSettingsType;\n    id?: WhiteLabelSettingsIdentity;\n    attributes?: {\n      /**\n       * URL of custom I18n messages. The :locale placeholder represents the current DatoCMS UI locale.\n       */\n      custom_i18n_messages_template_url: null | string;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `WhiteLabelSettings`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface WhiteLabelSettingsUpdateTargetSchema {\n  data: WhiteLabelSettings;\n}\n\n/**\n * Info that can be accessed by unauthorized users\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "public_info".\n */\nexport interface PublicInfo {\n  type: PublicInfoType;\n  id: PublicInfoIdentity;\n  attributes: PublicInfoAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface PublicInfoAttributes {\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Specifies the Single Sign-on URL to reach\n   */\n  sso_saml_init_url: null | string;\n  /**\n   * Specifies the logo url if present\n   */\n  logo_url: null | string;\n  /**\n   * Specifies whether the project is in white-label mode\n   */\n  white_label: boolean;\n  /**\n   * Template URL to download specific I18n messages (for white-label projects only)\n   */\n  custom_i18n_messages_template_url: null | string;\n  /**\n   * Specifies the color-scheme for the project\n   */\n  theme: {\n    primary_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color?: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    [k: string]: unknown;\n  };\n  /**\n   * Additional information (only returned on authenticated requests)\n   */\n  extras: null | {\n    blocks_depth: number;\n    blocks_per_item: number;\n    [k: string]: unknown;\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface PublicInfoData {\n  type: PublicInfoType;\n  id: PublicInfoIdentity;\n}\n\n/**\n * This interface was referenced by `PublicInfo`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface PublicInfoSelfTargetSchema {\n  data: PublicInfo;\n}\n\n/**\n * DatoCMS resources usage organized by day\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "daily_usage".\n */\nexport interface DailyUsage {\n  type: DailyUsageType;\n  id: DailyUsageIdentity;\n  attributes: DailyUsageAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface DailyUsageAttributes {\n  /**\n   * The date the data are referring to\n   */\n  date: string;\n  /**\n   * Number of API calls to content delivery API\n   */\n  cda_api_calls: number;\n  /**\n   * Number of API calls to content management API\n   */\n  cma_api_calls: number;\n  /**\n   * Content delivery API traffic\n   */\n  cda_traffic_bytes: number;\n  /**\n   * Uploads requests traffic\n   */\n  assets_traffic_bytes: number;\n  /**\n   * Video streaming seconds\n   */\n  mux_delivered_seconds: number;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface DailyUsageData {\n  type: DailyUsageType;\n  id: DailyUsageIdentity;\n}\n\n/**\n * This interface was referenced by `DailyUsage`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface DailyUsageInstancesTargetSchema {\n  data: DailyUsage;\n}\n\n/**\n * You can use counters to analyze your project\'s data consumption over a period of time. Counters are especially useful if your project is exceeding its API calls/traffic quota limits, to better understand where and how requests are originating. Counters are updated every minute, so you can debug in real-time the results of your changes.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "usage_counter".\n */\nexport interface UsageCounter {\n  type: UsageCounterType;\n  id: UsageCounterIdentity;\n  attributes: UsageCounterAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UsageCounterAttributes {\n  result: {\n    /**\n     * Occurrence\n     */\n    value: string;\n    /**\n     * Counter for the specified occurrence\n     */\n    counter: number;\n  }[];\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UsageCounterData {\n  type: UsageCounterType;\n  id: UsageCounterIdentity;\n}\n\n/**\n * This interface was referenced by `UsageCounter`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface UsageCounterSelfTargetSchema {\n  data: UsageCounter;\n}\n\n/**\n * All the project\'s upload tags\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_tag".\n */\nexport interface UploadTag {\n  type: UploadTagType;\n  id: UploadTagIdentity;\n  attributes: UploadTagAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadTagAttributes {\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadTagData {\n  type: UploadTagType;\n  id: UploadTagIdentity;\n}\n\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface UploadTagInstancesTargetSchema {\n  data: UploadTag[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface UploadTagCreateSchema {\n  data: {\n    type: UploadTagType;\n    attributes: {\n      /**\n       * The tag name\n       */\n      name: string;\n    };\n  };\n}\n\n/**\n * This interface was referenced by `UploadTag`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface UploadTagCreateTargetSchema {\n  data: UploadTag;\n}\n\n/**\n * All the site\'s upload automatically generated tags\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "upload_smart_tag".\n */\nexport interface UploadSmartTag {\n  type: UploadSmartTagType;\n  id: UploadSmartTagIdentity;\n  attributes: UploadSmartTagAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface UploadSmartTagAttributes {\n  /**\n   * The tag name\n   */\n  name: string;\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface UploadSmartTagData {\n  type: UploadSmartTagType;\n  id: UploadSmartTagIdentity;\n}\n\n/**\n * This interface was referenced by `UploadSmartTag`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface UploadSmartTagInstancesTargetSchema {\n  data: UploadSmartTag[];\n  meta: {\n    total_count: number;\n  };\n}\n\n/**\n * A site represents a specific DatoCMS administrative area\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "site".\n */\nexport interface Site {\n  type: SiteType;\n  id: SiteIdentity;\n  attributes: SiteAttributes;\n  relationships: SiteRelationships;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface SiteAttributes {\n  /**\n   * Site name\n   */\n  name: string;\n  /**\n   * Administrative area custom domain\n   */\n  domain: string | null;\n  /**\n   * Google API Key to be used by the LatLon widget\n   */\n  google_maps_api_token: string | null;\n  /**\n   * Imgix host\n   */\n  imgix_host: string | null;\n  /**\n   * DatoCMS internal domain for the administrative area\n   */\n  internal_domain: string | null;\n  /**\n   * Available locales\n   */\n  locales: [string, ...string[]];\n  /**\n   * Site default timezone\n   */\n  timezone: string;\n  /**\n   * Whether the website needs to be indexed by search engines or not\n   */\n  no_index: boolean;\n  /**\n   * The upload id for the favicon\n   */\n  favicon: string | null;\n  /**\n   * Specifies the last time when a change of data occurred\n   */\n  last_data_change_at: null | string;\n  /**\n   * Frontend website url\n   */\n  frontend_url: string | null;\n  /**\n   * Specifies whether all users of this site need to authenticate using two-factor authentication\n   */\n  require_2fa: boolean;\n  /**\n   * Specifies whether you want IPs to be tracked in the Project usages section\n   */\n  ip_tracking_enabled: boolean;\n  /**\n   * Specifies the theme to use in administrative area\n   */\n  theme: {\n    primary_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    light_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    accent_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    dark_color: {\n      red: number;\n      green: number;\n      blue: number;\n      alpha: number;\n      [k: string]: unknown;\n    };\n    /**\n     * The site logo\n     */\n    logo: string | null;\n    [k: string]: unknown;\n  };\n  /**\n   * Specifies default global settings\n   */\n  global_seo: {\n    /**\n     * Site name, used in social sharing\n     */\n    site_name?: string;\n    fallback_seo?: {\n      title: string;\n      description: string;\n      /**\n       * The id of the image\n       */\n      image: null | string;\n      /**\n       * Determines how a Twitter link preview is shown\n       */\n      twitter_card?: null | ("summary" | "summary_large_image");\n      [k: string]: unknown;\n    };\n    /**\n     * Title meta tag suffix\n     */\n    title_suffix?: null | string;\n    /**\n     * URL of facebook page\n     */\n    facebook_page_url?: null | string;\n    /**\n     * Twitter account associated to website\n     */\n    twitter_account?: null | string;\n    [k: string]: unknown;\n  } | null;\n}\n\n/**\n * JSON API links\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "relationships".\n */\nexport interface SiteRelationships {\n  account: {\n    data: AccountData;\n  };\n  build_triggers?: {\n    /**\n     * The list of build trigger\n     */\n    data: BuildTriggerData[];\n  };\n  menu_items: {\n    /**\n     * The list of site menu items\n     */\n    data: MenuItemData[];\n  };\n  sso_users: {\n    /**\n     * The list of site SSO users\n     */\n    data: SsoUserData[];\n  };\n  users: {\n    /**\n     * The list of site users\n     */\n    data: UserData[];\n  };\n  item_types: {\n    /**\n     * The list of site item types\n     */\n    data: ItemTypeData[];\n  };\n  sso_default_role?: {\n    /**\n     * Specifies the default role for newly created identity providers users\n     */\n    data: RoleData[];\n  };\n  roles: {\n    /**\n     * The list of site roles\n     */\n    data: RoleData[];\n  };\n}\n\n/**\n * JSON API data\n *\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `definition` "data".\n */\nexport interface SiteData {\n  type: SiteType;\n  id: SiteIdentity;\n}\n\n/**\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface SiteSelfTargetSchema {\n  data: Site;\n  included?: (MenuItem | User | ItemType | Role | Field | Upload | SsoUser)[];\n}\n\n/**\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface SiteUpdateSchema {\n  data: {\n    type: SiteType;\n    id?: SiteIdentity;\n    attributes: {\n      /**\n       * Whether the website needs to be indexed by search engines or not\n       */\n      no_index?: boolean;\n      /**\n       * The upload id for the favicon\n       */\n      favicon?: string | null;\n      /**\n       * Specifies default global settings\n       */\n      global_seo?: {\n        /**\n         * Site name, used in social sharing\n         */\n        site_name?: string;\n        fallback_seo?: {\n          title: string;\n          description: string;\n          /**\n           * The id of the image\n           */\n          image: null | string;\n          /**\n           * Determines how a Twitter link preview is shown\n           */\n          twitter_card?: null | ("summary" | "summary_large_image");\n          [k: string]: unknown;\n        };\n        /**\n         * Title meta tag suffix\n         */\n        title_suffix?: null | string;\n        /**\n         * URL of facebook page\n         */\n        facebook_page_url?: null | string;\n        /**\n         * Twitter account associated to website\n         */\n        twitter_account?: null | string;\n        [k: string]: unknown;\n      } | null;\n      /**\n       * Site name\n       */\n      name?: string;\n      /**\n       * Specifies the theme to use in administrative area\n       */\n      theme?: {\n        primary_color: {\n          red: number;\n          green: number;\n          blue: number;\n          alpha: number;\n          [k: string]: unknown;\n        };\n        light_color: {\n          red: number;\n          green: number;\n          blue: number;\n          alpha: number;\n          [k: string]: unknown;\n        };\n        accent_color: {\n          red: number;\n          green: number;\n          blue: number;\n          alpha: number;\n          [k: string]: unknown;\n        };\n        dark_color: {\n          red: number;\n          green: number;\n          blue: number;\n          alpha: number;\n          [k: string]: unknown;\n        };\n        /**\n         * The site logo\n         */\n        logo: string | null;\n        [k: string]: unknown;\n      };\n      /**\n       * Available locales\n       */\n      locales?: [string, ...string[]];\n      /**\n       * Site default timezone\n       */\n      timezone?: string;\n      /**\n       * Specifies whether all users of this site need to authenticate using two-factor authentication\n       */\n      require_2fa?: boolean;\n      /**\n       * Specifies whether you want IPs to be tracked in the Project usages section\n       */\n      ip_tracking_enabled?: boolean;\n    };\n    relationships?: {\n      sso_default_role?: {\n        data: RoleData;\n      };\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface SiteUpdateTargetSchema {\n  data: Job;\n}\n\n/**\n * This interface was referenced by `Site`\'s JSON-Schema\n * via the `update.jobSchema` link.\n */\nexport interface SiteUpdateJobSchema {\n  data: Site;\n}\n\n/**\n * Through workflows it is possible to set up a precise state machine able to bring a draft content up to the final publication (and beyond), through a series of intermediate, fully customizable approval steps.\n *\n * This interface was referenced by `DatoApi`\'s JSON-Schema\n * via the `definition` "workflow".\n */\nexport interface Workflow {\n  type: WorkflowType;\n  id: WorkflowIdentity;\n  attributes: WorkflowAttributes;\n}\n\n/**\n * JSON API attributes\n *\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `definition` "attributes".\n */\nexport interface WorkflowAttributes {\n  /**\n   * The name of the workflow\n   */\n  name: string;\n  /**\n   * The stages of the workflow\n   */\n  stages: [\n    {\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    },\n    ...{\n      /**\n       * ID of the stage\n       */\n      id: string;\n      /**\n       * Name of the stage\n       */\n      name: string;\n      /**\n       * Description of the stage\n       */\n      description?: string | null;\n      /**\n       * Whether this is the initial stage or not\n       */\n      initial?: boolean;\n    }[]\n  ];\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `create.schema` link.\n */\nexport interface WorkflowCreateSchema {\n  data: {\n    type: WorkflowType;\n    id: WorkflowIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes: {\n      /**\n       * The name of the workflow\n       */\n      name: string;\n      /**\n       * The stages of the workflow\n       */\n      stages: [\n        {\n          /**\n           * ID of the stage\n           */\n          id: string;\n          /**\n           * Name of the stage\n           */\n          name: string;\n          /**\n           * Description of the stage\n           */\n          description?: string | null;\n          /**\n           * Whether this is the initial stage or not\n           */\n          initial?: boolean;\n        },\n        ...{\n          /**\n           * ID of the stage\n           */\n          id: string;\n          /**\n           * Name of the stage\n           */\n          name: string;\n          /**\n           * Description of the stage\n           */\n          description?: string | null;\n          /**\n           * Whether this is the initial stage or not\n           */\n          initial?: boolean;\n        }[]\n      ];\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `create.targetSchema` link.\n */\nexport interface WorkflowCreateTargetSchema {\n  data: Workflow;\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `update.schema` link.\n */\nexport interface WorkflowUpdateSchema {\n  data: {\n    type: WorkflowType;\n    id: WorkflowIdentity;\n    /**\n     * JSON API attributes\n     */\n    attributes?: {\n      /**\n       * The name of the workflow\n       */\n      name?: string;\n      /**\n       * The stages of the workflow\n       */\n      stages?: [\n        {\n          /**\n           * ID of the stage\n           */\n          id: string;\n          /**\n           * Name of the stage\n           */\n          name: string;\n          /**\n           * Description of the stage\n           */\n          description?: string | null;\n          /**\n           * Whether this is the initial stage or not\n           */\n          initial?: boolean;\n        },\n        ...{\n          /**\n           * ID of the stage\n           */\n          id: string;\n          /**\n           * Name of the stage\n           */\n          name: string;\n          /**\n           * Description of the stage\n           */\n          description?: string | null;\n          /**\n           * Whether this is the initial stage or not\n           */\n          initial?: boolean;\n        }[]\n      ];\n    };\n  };\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `update.targetSchema` link.\n */\nexport interface WorkflowUpdateTargetSchema {\n  data: Workflow;\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `instances.targetSchema` link.\n */\nexport interface WorkflowInstancesTargetSchema {\n  data: Workflow[];\n}\n\n/**\n * This interface was referenced by `Workflow`\'s JSON-Schema\n * via the `self.targetSchema` link.\n */\nexport interface WorkflowSelfTargetSchema {\n  data: Workflow;\n}\n',
};
